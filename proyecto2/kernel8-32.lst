
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001ba2 	b	eef0 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8074:	e24ddc1e 	sub	sp, sp, #7680	; 0x1e00
    8078:	e24dd004 	sub	sp, sp, #4
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000009 	bl	80ac <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb00005b 	bl	81fc <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000004 	beq	80a8 <main+0x38>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb00008e 	bl	82d8 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	1a000000 	bne	80a8 <main+0x38>
    80a4:	eb001b88 	bl	eecc <reboot>
    80a8:	eb001b82 	bl	eeb8 <halt>

000080ac <CKernel::CKernel()>:
    80ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    80b0:	e3a01000 	mov	r1, #0
    80b4:	e280600c 	add	r6, r0, #12
    80b8:	e24dd00c 	sub	sp, sp, #12
    80bc:	e1a04000 	mov	r4, r0
    80c0:	eb0000e0 	bl	8448 <CActLED::CActLED(bool)>
    80c4:	e1a00006 	mov	r0, r6
    80c8:	eb0006b3 	bl	9b9c <CKernelOptions::CKernelOptions()>
    80cc:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
    80d0:	eb000137 	bl	85b4 <CDeviceNameService::CDeviceNameService()>
    80d4:	e1a00006 	mov	r0, r6
    80d8:	eb0005f8 	bl	98c0 <CKernelOptions::GetWidth() const>
    80dc:	e1a07000 	mov	r7, r0
    80e0:	e1a00006 	mov	r0, r6
    80e4:	e3a05000 	mov	r5, #0
    80e8:	eb0005f6 	bl	98c8 <CKernelOptions::GetHeight() const>
    80ec:	e1a02000 	mov	r2, r0
    80f0:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
    80f4:	e1a01007 	mov	r1, r7
    80f8:	e1a03005 	mov	r3, r5
    80fc:	e58d5000 	str	r5, [sp]
    8100:	e2800008 	add	r0, r0, #8
    8104:	e2847c1a 	add	r7, r4, #6656	; 0x1a00
    8108:	eb000c58 	bl	b270 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    810c:	e2840e93 	add	r0, r4, #2352	; 0x930
    8110:	e1a03005 	mov	r3, r5
    8114:	e1a02005 	mov	r2, r5
    8118:	e1a01005 	mov	r1, r5
    811c:	e2800008 	add	r0, r0, #8
    8120:	eb001217 	bl	c984 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8124:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    8128:	e2877024 	add	r7, r7, #36	; 0x24
    812c:	e2800020 	add	r0, r0, #32
    8130:	eb0024a7 	bl	113d4 <CExceptionHandler::CExceptionHandler()>
    8134:	e1a00007 	mov	r0, r7
    8138:	eb00268e 	bl	11b78 <CInterruptSystem::CInterruptSystem()>
    813c:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    8140:	e1a01007 	mov	r1, r7
    8144:	e2800004 	add	r0, r0, #4
    8148:	eb001bb1 	bl	f014 <CTimer::CTimer(CInterruptSystem*)>
    814c:	e1a00006 	mov	r0, r6
    8150:	eb0005e1 	bl	98dc <CKernelOptions::GetLogLevel() const>
    8154:	e1a01000 	mov	r1, r0
    8158:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    815c:	e1a02005 	mov	r2, r5
    8160:	e3a03001 	mov	r3, #1
    8164:	e2800004 	add	r0, r0, #4
    8168:	eb0007ec 	bl	a120 <CLogger::CLogger(unsigned int, CTimer*, bool)>
    816c:	e1a00004 	mov	r0, r4
    8170:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8174:	e3a020c8 	mov	r2, #200	; 0xc8
    8178:	e3a01005 	mov	r1, #5
    817c:	eb0000f5 	bl	8558 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8180:	e1a00004 	mov	r0, r4
    8184:	e28dd00c 	add	sp, sp, #12
    8188:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000818c <CKernel::~CKernel()>:
    818c:	e92d4010 	push	{r4, lr}
    8190:	e1a04000 	mov	r4, r0
    8194:	e2800c1d 	add	r0, r0, #7424	; 0x1d00
    8198:	e2800004 	add	r0, r0, #4
    819c:	eb0007f7 	bl	a180 <CLogger::~CLogger()>
    81a0:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    81a4:	e2800004 	add	r0, r0, #4
    81a8:	eb001bbb 	bl	f09c <CTimer::~CTimer()>
    81ac:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    81b0:	e2800024 	add	r0, r0, #36	; 0x24
    81b4:	eb00267d 	bl	11bb0 <CInterruptSystem::~CInterruptSystem()>
    81b8:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    81bc:	e2800020 	add	r0, r0, #32
    81c0:	eb002420 	bl	11248 <CExceptionHandler::~CExceptionHandler()>
    81c4:	e2840e93 	add	r0, r4, #2352	; 0x930
    81c8:	e2800008 	add	r0, r0, #8
    81cc:	eb001264 	bl	cb64 <CSerialDevice::~CSerialDevice()>
    81d0:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
    81d4:	e2800008 	add	r0, r0, #8
    81d8:	eb000c4c 	bl	b310 <CScreenDevice::~CScreenDevice()>
    81dc:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
    81e0:	eb000104 	bl	85f8 <CDeviceNameService::~CDeviceNameService()>
    81e4:	e284000c 	add	r0, r4, #12
    81e8:	eb000599 	bl	9854 <CKernelOptions::~CKernelOptions()>
    81ec:	e1a00004 	mov	r0, r4
    81f0:	eb0000b9 	bl	84dc <CActLED::~CActLED()>
    81f4:	e1a00004 	mov	r0, r4
    81f8:	e8bd8010 	pop	{r4, pc}

000081fc <CKernel::Initialize()>:
    81fc:	e92d4070 	push	{r4, r5, r6, lr}
    8200:	e2804e8a 	add	r4, r0, #2208	; 0x8a0
    8204:	e2844008 	add	r4, r4, #8
    8208:	e24dd008 	sub	sp, sp, #8
    820c:	e1a05000 	mov	r5, r0
    8210:	e1a00004 	mov	r0, r4
    8214:	eb000c71 	bl	b3e0 <CScreenDevice::Initialize()>
    8218:	e3500000 	cmp	r0, #0
    821c:	1a000002 	bne	822c <CKernel::Initialize()+0x30>
    8220:	e3a00000 	mov	r0, #0
    8224:	e28dd008 	add	sp, sp, #8
    8228:	e8bd8070 	pop	{r4, r5, r6, pc}
    822c:	e3a06000 	mov	r6, #0
    8230:	e2850e93 	add	r0, r5, #2352	; 0x930
    8234:	e58d6000 	str	r6, [sp]
    8238:	e2800008 	add	r0, r0, #8
    823c:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8240:	e3401001 	movt	r1, #1
    8244:	e3a03001 	mov	r3, #1
    8248:	e3a02008 	mov	r2, #8
    824c:	eb00129f 	bl	ccd0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    8250:	e1500006 	cmp	r0, r6
    8254:	0afffff1 	beq	8220 <CKernel::Initialize()+0x24>
    8258:	e285000c 	add	r0, r5, #12
    825c:	eb00059b 	bl	98d0 <CKernelOptions::GetLogDevice() const>
    8260:	e1a02006 	mov	r2, r6
    8264:	e1a01000 	mov	r1, r0
    8268:	e2850e8a 	add	r0, r5, #2208	; 0x8a0
    826c:	eb000175 	bl	8848 <CDeviceNameService::GetDevice(char const*, bool)>
    8270:	e1500006 	cmp	r0, r6
    8274:	11a01000 	movne	r1, r0
    8278:	e2850c1d 	add	r0, r5, #7424	; 0x1d00
    827c:	01a01004 	moveq	r1, r4
    8280:	e2800004 	add	r0, r0, #4
    8284:	e28dd008 	add	sp, sp, #8
    8288:	e8bd4070 	pop	{r4, r5, r6, lr}
    828c:	ea0007d7 	b	a1f0 <CLogger::Initialize(CDevice*)>

00008290 <clearBuffer(void*, unsigned int)>:
    8290:	e3510000 	cmp	r1, #0
    8294:	012fff1e 	bxeq	lr
    8298:	e0801001 	add	r1, r0, r1
    829c:	e3a03000 	mov	r3, #0
    82a0:	e4c03001 	strb	r3, [r0], #1
    82a4:	e1510000 	cmp	r1, r0
    82a8:	1afffffc 	bne	82a0 <clearBuffer(void*, unsigned int)+0x10>
    82ac:	e12fff1e 	bx	lr

000082b0 <my_strlen(char const*)>:
    82b0:	e1d030d0 	ldrsb	r3, [r0]
    82b4:	e3530000 	cmp	r3, #0
    82b8:	0a000004 	beq	82d0 <my_strlen(char const*)+0x20>
    82bc:	e3a03000 	mov	r3, #0
    82c0:	e1f020d1 	ldrsb	r2, [r0, #1]!
    82c4:	e2833001 	add	r3, r3, #1
    82c8:	e3520000 	cmp	r2, #0
    82cc:	1afffffb 	bne	82c0 <my_strlen(char const*)+0x10>
    82d0:	e1a00003 	mov	r0, r3
    82d4:	e12fff1e 	bx	lr

000082d8 <CKernel::Run()>:
    82d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82dc:	e1a04000 	mov	r4, r0
    82e0:	e2800c1d 	add	r0, r0, #7424	; 0x1d00
    82e4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    82e8:	e30439f8 	movw	r3, #18936	; 0x49f8
    82ec:	e3403001 	movt	r3, #1
    82f0:	e30419d4 	movw	r1, #18900	; 0x49d4
    82f4:	e3401001 	movt	r1, #1
    82f8:	e2800004 	add	r0, r0, #4
    82fc:	e3a02003 	mov	r2, #3
    8300:	eb0007cf 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8304:	e3a03000 	mov	r3, #0
    8308:	e1a01003 	mov	r1, r3
    830c:	e30439dc 	movw	r3, #18908	; 0x49dc
    8310:	e3403001 	movt	r3, #1
    8314:	e1f320d1 	ldrsb	r2, [r3, #1]!
    8318:	e2811001 	add	r1, r1, #1
    831c:	e3520000 	cmp	r2, #0
    8320:	1afffffb 	bne	8314 <CKernel::Run()+0x3c>
    8324:	e30439e4 	movw	r3, #18916	; 0x49e4
    8328:	e3403001 	movt	r3, #1
    832c:	e58d1004 	str	r1, [sp, #4]
    8330:	e1f370d1 	ldrsb	r7, [r3, #1]!
    8334:	e2822001 	add	r2, r2, #1
    8338:	e3570000 	cmp	r7, #0
    833c:	1afffffb 	bne	8330 <CKernel::Run()+0x58>
    8340:	e30439e8 	movw	r3, #18920	; 0x49e8
    8344:	e3403001 	movt	r3, #1
    8348:	e58d2000 	str	r2, [sp]
    834c:	e1f320d1 	ldrsb	r2, [r3, #1]!
    8350:	e2877001 	add	r7, r7, #1
    8354:	e3520000 	cmp	r2, #0
    8358:	1afffffb 	bne	834c <CKernel::Run()+0x74>
    835c:	e2845e93 	add	r5, r4, #2352	; 0x930
    8360:	e2844e8a 	add	r4, r4, #2208	; 0x8a0
    8364:	e304a9e8 	movw	sl, #18920	; 0x49e8
    8368:	e340a001 	movt	sl, #1
    836c:	e3049a1c 	movw	r9, #18972	; 0x4a1c
    8370:	e3409001 	movt	r9, #1
    8374:	e3048a20 	movw	r8, #18976	; 0x4a20
    8378:	e3408001 	movt	r8, #1
    837c:	e2855008 	add	r5, r5, #8
    8380:	e2844008 	add	r4, r4, #8
    8384:	e3a06001 	mov	r6, #1
    8388:	e28d2008 	add	r2, sp, #8
    838c:	e3a0b000 	mov	fp, #0
    8390:	e4c2b001 	strb	fp, [r2], #1
    8394:	e28d3048 	add	r3, sp, #72	; 0x48
    8398:	e1520003 	cmp	r2, r3
    839c:	1afffffb 	bne	8390 <CKernel::Run()+0xb8>
    83a0:	e3a0203f 	mov	r2, #63	; 0x3f
    83a4:	e28d1008 	add	r1, sp, #8
    83a8:	e1a00005 	mov	r0, r5
    83ac:	eb001365 	bl	d148 <CSerialDevice::Read(void*, unsigned int)>
    83b0:	e3500000 	cmp	r0, #0
    83b4:	0a000015 	beq	8410 <CKernel::Run()+0x138>
    83b8:	e28d3048 	add	r3, sp, #72	; 0x48
    83bc:	e3560000 	cmp	r6, #0
    83c0:	e0830000 	add	r0, r3, r0
    83c4:	e540b040 	strb	fp, [r0, #-64]	; 0xffffffc0
    83c8:	0a000013 	beq	841c <CKernel::Run()+0x144>
    83cc:	e1a02007 	mov	r2, r7
    83d0:	e1a0100a 	mov	r1, sl
    83d4:	e1a00004 	mov	r0, r4
    83d8:	e3a06000 	mov	r6, #0
    83dc:	eb000d21 	bl	b868 <CScreenDevice::Write(void const*, unsigned int)>
    83e0:	e3a02040 	mov	r2, #64	; 0x40
    83e4:	e28d1008 	add	r1, sp, #8
    83e8:	e1a00004 	mov	r0, r4
    83ec:	eb000d1d 	bl	b868 <CScreenDevice::Write(void const*, unsigned int)>
    83f0:	e3a02002 	mov	r2, #2
    83f4:	e1a01009 	mov	r1, r9
    83f8:	e1a00004 	mov	r0, r4
    83fc:	eb000d19 	bl	b868 <CScreenDevice::Write(void const*, unsigned int)>
    8400:	e3a02001 	mov	r2, #1
    8404:	e1a01008 	mov	r1, r8
    8408:	e1a00004 	mov	r0, r4
    840c:	eb000d15 	bl	b868 <CScreenDevice::Write(void const*, unsigned int)>
    8410:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8414:	eb001e27 	bl	fcb8 <CTimer::SimpleMsDelay(unsigned int)>
    8418:	eaffffda 	b	8388 <CKernel::Run()+0xb0>
    841c:	e59d2004 	ldr	r2, [sp, #4]
    8420:	e1a00004 	mov	r0, r4
    8424:	e30419dc 	movw	r1, #18908	; 0x49dc
    8428:	e3401001 	movt	r1, #1
    842c:	eb000d0d 	bl	b868 <CScreenDevice::Write(void const*, unsigned int)>
    8430:	e59d2000 	ldr	r2, [sp]
    8434:	e30419e4 	movw	r1, #18916	; 0x49e4
    8438:	e3401001 	movt	r1, #1
    843c:	e1a00004 	mov	r0, r4
    8440:	eb000d08 	bl	b868 <CScreenDevice::Write(void const*, unsigned int)>
    8444:	eaffffe0 	b	83cc <CKernel::Run()+0xf4>

00008448 <CActLED::CActLED(bool)>:
    8448:	e3073240 	movw	r3, #29248	; 0x7240
    844c:	e3403001 	movt	r3, #1
    8450:	e3a02000 	mov	r2, #0
    8454:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8458:	e1a07001 	mov	r7, r1
    845c:	e5802000 	str	r2, [r0]
    8460:	e1a05000 	mov	r5, r0
    8464:	e5802004 	str	r2, [r0, #4]
    8468:	e5830000 	str	r0, [r3]
    846c:	eb000b73 	bl	b240 <CMachineInfo::Get()>
    8470:	eb000a83 	bl	ae84 <CMachineInfo::GetActLEDInfo() const>
    8474:	e2106080 	ands	r6, r0, #128	; 0x80
    8478:	e1a04000 	mov	r4, r0
    847c:	1a00000e 	bne	84bc <CActLED::CActLED(bool)+0x74>
    8480:	e3a00028 	mov	r0, #40	; 0x28
    8484:	eb0021b6 	bl	10b64 <operator new(unsigned int)>
    8488:	e1a03006 	mov	r3, r6
    848c:	e1a07000 	mov	r7, r0
    8490:	e3a02001 	mov	r2, #1
    8494:	e204103f 	and	r1, r4, #63	; 0x3f
    8498:	eb0001fb 	bl	8c8c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    849c:	e5857000 	str	r7, [r5]
    84a0:	e2244040 	eor	r4, r4, #64	; 0x40
    84a4:	e1a00005 	mov	r0, r5
    84a8:	e7e04354 	ubfx	r4, r4, #6, #1
    84ac:	e5c54008 	strb	r4, [r5, #8]
    84b0:	eb00001a 	bl	8520 <CActLED::Off()>
    84b4:	e1a00005 	mov	r0, r5
    84b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84bc:	e3a00014 	mov	r0, #20
    84c0:	eb0021a7 	bl	10b64 <operator new(unsigned int)>
    84c4:	e1a02007 	mov	r2, r7
    84c8:	e1a06000 	mov	r6, r0
    84cc:	e204103f 	and	r1, r4, #63	; 0x3f
    84d0:	eb0020b7 	bl	107b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    84d4:	e5856004 	str	r6, [r5, #4]
    84d8:	eafffff0 	b	84a0 <CActLED::CActLED(bool)+0x58>

000084dc <CActLED::~CActLED()>:
    84dc:	e3073240 	movw	r3, #29248	; 0x7240
    84e0:	e3403001 	movt	r3, #1
    84e4:	e3a02000 	mov	r2, #0
    84e8:	e5832000 	str	r2, [r3]
    84ec:	e12fff1e 	bx	lr

000084f0 <CActLED::On()>:
    84f0:	e5903000 	ldr	r3, [r0]
    84f4:	e3530000 	cmp	r3, #0
    84f8:	0a000002 	beq	8508 <CActLED::On()+0x18>
    84fc:	e5d01008 	ldrb	r1, [r0, #8]
    8500:	e1a00003 	mov	r0, r3
    8504:	ea000281 	b	8f10 <CGPIOPin::Write(unsigned int)>
    8508:	e5903004 	ldr	r3, [r0, #4]
    850c:	e3530000 	cmp	r3, #0
    8510:	012fff1e 	bxeq	lr
    8514:	e5d01008 	ldrb	r1, [r0, #8]
    8518:	e1a00003 	mov	r0, r3
    851c:	ea0020fc 	b	10914 <CVirtualGPIOPin::Write(unsigned int)>

00008520 <CActLED::Off()>:
    8520:	e5903000 	ldr	r3, [r0]
    8524:	e3530000 	cmp	r3, #0
    8528:	0a000003 	beq	853c <CActLED::Off()+0x1c>
    852c:	e5d01008 	ldrb	r1, [r0, #8]
    8530:	e1a00003 	mov	r0, r3
    8534:	e2211001 	eor	r1, r1, #1
    8538:	ea000274 	b	8f10 <CGPIOPin::Write(unsigned int)>
    853c:	e5903004 	ldr	r3, [r0, #4]
    8540:	e3530000 	cmp	r3, #0
    8544:	012fff1e 	bxeq	lr
    8548:	e5d01008 	ldrb	r1, [r0, #8]
    854c:	e1a00003 	mov	r0, r3
    8550:	e2211001 	eor	r1, r1, #1
    8554:	ea0020ee 	b	10914 <CVirtualGPIOPin::Write(unsigned int)>

00008558 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8558:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    855c:	e2516000 	subs	r6, r1, #0
    8560:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8564:	e1a08003 	mov	r8, r3
    8568:	e1a07002 	mov	r7, r2
    856c:	e1a05000 	mov	r5, r0
    8570:	e3a04001 	mov	r4, #1
    8574:	e1a00005 	mov	r0, r5
    8578:	e2844001 	add	r4, r4, #1
    857c:	ebffffdb 	bl	84f0 <CActLED::On()>
    8580:	e1a00007 	mov	r0, r7
    8584:	eb001dcb 	bl	fcb8 <CTimer::SimpleMsDelay(unsigned int)>
    8588:	e1a00005 	mov	r0, r5
    858c:	ebffffe3 	bl	8520 <CActLED::Off()>
    8590:	e1a00008 	mov	r0, r8
    8594:	eb001dc7 	bl	fcb8 <CTimer::SimpleMsDelay(unsigned int)>
    8598:	e1560004 	cmp	r6, r4
    859c:	2afffff4 	bcs	8574 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    85a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000085a4 <CActLED::Get()>:
    85a4:	e3073240 	movw	r3, #29248	; 0x7240
    85a8:	e3403001 	movt	r3, #1
    85ac:	e5930000 	ldr	r0, [r3]
    85b0:	e12fff1e 	bx	lr

000085b4 <CDeviceNameService::CDeviceNameService()>:
    85b4:	e3073244 	movw	r3, #29252	; 0x7244
    85b8:	e3403001 	movt	r3, #1
    85bc:	e3a01000 	mov	r1, #0
    85c0:	e5801004 	str	r1, [r0, #4]
    85c4:	e593c000 	ldr	ip, [r3]
    85c8:	e5801000 	str	r1, [r0]
    85cc:	e15c0001 	cmp	ip, r1
    85d0:	1a000001 	bne	85dc <CDeviceNameService::CDeviceNameService()+0x28>
    85d4:	e5830000 	str	r0, [r3]
    85d8:	e12fff1e 	bx	lr
    85dc:	e3041a24 	movw	r1, #18980	; 0x4a24
    85e0:	e3401001 	movt	r1, #1
    85e4:	e3040a3c 	movw	r0, #19004	; 0x4a3c
    85e8:	e3400001 	movt	r0, #1
    85ec:	e92d4010 	push	{r4, lr}
    85f0:	e3a0201f 	mov	r2, #31
    85f4:	eb0026e9 	bl	121a0 <assertion_failed>

000085f8 <CDeviceNameService::~CDeviceNameService()>:
    85f8:	e5903000 	ldr	r3, [r0]
    85fc:	e92d4070 	push	{r4, r5, r6, lr}
    8600:	e1a05000 	mov	r5, r0
    8604:	e3530000 	cmp	r3, #0
    8608:	0a00000e 	beq	8648 <CDeviceNameService::~CDeviceNameService()+0x50>
    860c:	e3a06000 	mov	r6, #0
    8610:	e5930004 	ldr	r0, [r3, #4]
    8614:	e5934000 	ldr	r4, [r3]
    8618:	e3500000 	cmp	r0, #0
    861c:	0a000000 	beq	8624 <CDeviceNameService::~CDeviceNameService()+0x2c>
    8620:	eb002157 	bl	10b84 <operator delete[](void*)>
    8624:	e5953000 	ldr	r3, [r5]
    8628:	e3a01010 	mov	r1, #16
    862c:	e1a00003 	mov	r0, r3
    8630:	e5836004 	str	r6, [r3, #4]
    8634:	e5836008 	str	r6, [r3, #8]
    8638:	eb002157 	bl	10b9c <operator delete(void*, unsigned int)>
    863c:	e2543000 	subs	r3, r4, #0
    8640:	e5854000 	str	r4, [r5]
    8644:	1afffff1 	bne	8610 <CDeviceNameService::~CDeviceNameService()+0x18>
    8648:	e3073244 	movw	r3, #29252	; 0x7244
    864c:	e3403001 	movt	r3, #1
    8650:	e3a02000 	mov	r2, #0
    8654:	e1a00005 	mov	r0, r5
    8658:	e5832000 	str	r2, [r3]
    865c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008660 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    8660:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8664:	e1a05000 	mov	r5, r0
    8668:	e5900004 	ldr	r0, [r0, #4]
    866c:	e1a06001 	mov	r6, r1
    8670:	e1a07002 	mov	r7, r2
    8674:	e3500000 	cmp	r0, #0
    8678:	e1a08003 	mov	r8, r3
    867c:	1a000017 	bne	86e0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    8680:	e3a00010 	mov	r0, #16
    8684:	eb002136 	bl	10b64 <operator new(unsigned int)>
    8688:	e3560000 	cmp	r6, #0
    868c:	e1a04000 	mov	r4, r0
    8690:	0a000014 	beq	86e8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    8694:	e1a00006 	mov	r0, r6
    8698:	eb001df3 	bl	fe6c <strlen>
    869c:	e2800001 	add	r0, r0, #1
    86a0:	eb002130 	bl	10b68 <operator new[](unsigned int)>
    86a4:	e1a01006 	mov	r1, r6
    86a8:	e5840004 	str	r0, [r4, #4]
    86ac:	eb001ead 	bl	10168 <strcpy>
    86b0:	e3570000 	cmp	r7, #0
    86b4:	0a000011 	beq	8700 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
    86b8:	e5952004 	ldr	r2, [r5, #4]
    86bc:	e5953000 	ldr	r3, [r5]
    86c0:	e3520000 	cmp	r2, #0
    86c4:	e5847008 	str	r7, [r4, #8]
    86c8:	e5c4800c 	strb	r8, [r4, #12]
    86cc:	e5843000 	str	r3, [r4]
    86d0:	e5854000 	str	r4, [r5]
    86d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    86d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    86dc:	ea002508 	b	11b04 <LeaveCritical>
    86e0:	eb0024da 	bl	11a50 <EnterCritical>
    86e4:	eaffffe5 	b	8680 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    86e8:	e3041a24 	movw	r1, #18980	; 0x4a24
    86ec:	e3401001 	movt	r1, #1
    86f0:	e3040a48 	movw	r0, #19016	; 0x4a48
    86f4:	e3400001 	movt	r0, #1
    86f8:	e3a0203b 	mov	r2, #59	; 0x3b
    86fc:	eb0026a7 	bl	121a0 <assertion_failed>
    8700:	e3041a24 	movw	r1, #18980	; 0x4a24
    8704:	e3401001 	movt	r1, #1
    8708:	e3040a54 	movw	r0, #19028	; 0x4a54
    870c:	e3400001 	movt	r0, #1
    8710:	e3a02040 	mov	r2, #64	; 0x40
    8714:	eb0026a1 	bl	121a0 <assertion_failed>

00008718 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    8718:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    871c:	e2515000 	subs	r5, r1, #0
    8720:	0a00003e 	beq	8820 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    8724:	e1a08000 	mov	r8, r0
    8728:	e5900004 	ldr	r0, [r0, #4]
    872c:	e1a07002 	mov	r7, r2
    8730:	e3500000 	cmp	r0, #0
    8734:	1a00002e 	bne	87f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    8738:	e5984000 	ldr	r4, [r8]
    873c:	e3540000 	cmp	r4, #0
    8740:	0a00003f 	beq	8844 <CDeviceNameService::RemoveDevice(char const*, bool)+0x12c>
    8744:	e5941004 	ldr	r1, [r4, #4]
    8748:	e3510000 	cmp	r1, #0
    874c:	13a06000 	movne	r6, #0
    8750:	1a000001 	bne	875c <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
    8754:	ea00000e 	b	8794 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
    8758:	e1a04003 	mov	r4, r3
    875c:	e1a00005 	mov	r0, r5
    8760:	eb001dcb 	bl	fe94 <strcmp>
    8764:	e3500000 	cmp	r0, #0
    8768:	1a000002 	bne	8778 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
    876c:	e5d4300c 	ldrb	r3, [r4, #12]
    8770:	e1530007 	cmp	r3, r7
    8774:	0a00000c 	beq	87ac <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    8778:	e5943000 	ldr	r3, [r4]
    877c:	e3530000 	cmp	r3, #0
    8780:	0a00001f 	beq	8804 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    8784:	e5931004 	ldr	r1, [r3, #4]
    8788:	e1a06004 	mov	r6, r4
    878c:	e3510000 	cmp	r1, #0
    8790:	1afffff0 	bne	8758 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    8794:	e3041a24 	movw	r1, #18980	; 0x4a24
    8798:	e3401001 	movt	r1, #1
    879c:	e3040a64 	movw	r0, #19044	; 0x4a64
    87a0:	e3400001 	movt	r0, #1
    87a4:	e3a0205e 	mov	r2, #94	; 0x5e
    87a8:	eb00267c 	bl	121a0 <assertion_failed>
    87ac:	e3560000 	cmp	r6, #0
    87b0:	15943000 	ldrne	r3, [r4]
    87b4:	15863000 	strne	r3, [r6]
    87b8:	0a00001e 	beq	8838 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
    87bc:	e5983004 	ldr	r3, [r8, #4]
    87c0:	e3530000 	cmp	r3, #0
    87c4:	1a000013 	bne	8818 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    87c8:	e5940004 	ldr	r0, [r4, #4]
    87cc:	e3500000 	cmp	r0, #0
    87d0:	0a000000 	beq	87d8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    87d4:	eb0020ea 	bl	10b84 <operator delete[](void*)>
    87d8:	e3a03000 	mov	r3, #0
    87dc:	e1a00004 	mov	r0, r4
    87e0:	e5843004 	str	r3, [r4, #4]
    87e4:	e3a01010 	mov	r1, #16
    87e8:	e5843008 	str	r3, [r4, #8]
    87ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    87f0:	ea0020e9 	b	10b9c <operator delete(void*, unsigned int)>
    87f4:	eb002495 	bl	11a50 <EnterCritical>
    87f8:	e5984000 	ldr	r4, [r8]
    87fc:	e3540000 	cmp	r4, #0
    8800:	1affffcf 	bne	8744 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    8804:	e5983004 	ldr	r3, [r8, #4]
    8808:	e3530000 	cmp	r3, #0
    880c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8810:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8814:	ea0024ba 	b	11b04 <LeaveCritical>
    8818:	eb0024b9 	bl	11b04 <LeaveCritical>
    881c:	eaffffe9 	b	87c8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    8820:	e3041a24 	movw	r1, #18980	; 0x4a24
    8824:	e3401001 	movt	r1, #1
    8828:	e3040a48 	movw	r0, #19016	; 0x4a48
    882c:	e3400001 	movt	r0, #1
    8830:	e3a02056 	mov	r2, #86	; 0x56
    8834:	eb002659 	bl	121a0 <assertion_failed>
    8838:	e5943000 	ldr	r3, [r4]
    883c:	e5883000 	str	r3, [r8]
    8840:	eaffffdd 	b	87bc <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    8844:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008848 <CDeviceNameService::GetDevice(char const*, bool)>:
    8848:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    884c:	e2515000 	subs	r5, r1, #0
    8850:	e24dd00c 	sub	sp, sp, #12
    8854:	0a00002d 	beq	8910 <CDeviceNameService::GetDevice(char const*, bool)+0xc8>
    8858:	e1a07000 	mov	r7, r0
    885c:	e5900004 	ldr	r0, [r0, #4]
    8860:	e1a06002 	mov	r6, r2
    8864:	e3500000 	cmp	r0, #0
    8868:	1a000016 	bne	88c8 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
    886c:	e5974000 	ldr	r4, [r7]
    8870:	e3540000 	cmp	r4, #0
    8874:	1a00000a 	bne	88a4 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    8878:	ea000019 	b	88e4 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    887c:	e1a00005 	mov	r0, r5
    8880:	eb001d83 	bl	fe94 <strcmp>
    8884:	e3500000 	cmp	r0, #0
    8888:	1a000002 	bne	8898 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
    888c:	e5d4300c 	ldrb	r3, [r4, #12]
    8890:	e1530006 	cmp	r3, r6
    8894:	0a000015 	beq	88f0 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    8898:	e5944000 	ldr	r4, [r4]
    889c:	e3540000 	cmp	r4, #0
    88a0:	0a00000c 	beq	88d8 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
    88a4:	e5941004 	ldr	r1, [r4, #4]
    88a8:	e3510000 	cmp	r1, #0
    88ac:	1afffff2 	bne	887c <CDeviceNameService::GetDevice(char const*, bool)+0x34>
    88b0:	e3041a24 	movw	r1, #18980	; 0x4a24
    88b4:	e3401001 	movt	r1, #1
    88b8:	e3040a64 	movw	r0, #19044	; 0x4a64
    88bc:	e3400001 	movt	r0, #1
    88c0:	e3a02092 	mov	r2, #146	; 0x92
    88c4:	eb002635 	bl	121a0 <assertion_failed>
    88c8:	eb002460 	bl	11a50 <EnterCritical>
    88cc:	e5974000 	ldr	r4, [r7]
    88d0:	e3540000 	cmp	r4, #0
    88d4:	1afffff2 	bne	88a4 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    88d8:	e5973004 	ldr	r3, [r7, #4]
    88dc:	e3530000 	cmp	r3, #0
    88e0:	1a000010 	bne	8928 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    88e4:	e3a00000 	mov	r0, #0
    88e8:	e28dd00c 	add	sp, sp, #12
    88ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    88f0:	e5973004 	ldr	r3, [r7, #4]
    88f4:	e5940008 	ldr	r0, [r4, #8]
    88f8:	e3530000 	cmp	r3, #0
    88fc:	1a00000b 	bne	8930 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
    8900:	e3500000 	cmp	r0, #0
    8904:	0a00000d 	beq	8940 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    8908:	e28dd00c 	add	sp, sp, #12
    890c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8910:	e3041a24 	movw	r1, #18980	; 0x4a24
    8914:	e3401001 	movt	r1, #1
    8918:	e3040a48 	movw	r0, #19016	; 0x4a48
    891c:	e3400001 	movt	r0, #1
    8920:	e3a0208b 	mov	r2, #139	; 0x8b
    8924:	eb00261d 	bl	121a0 <assertion_failed>
    8928:	eb002475 	bl	11b04 <LeaveCritical>
    892c:	eaffffec 	b	88e4 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    8930:	e58d0004 	str	r0, [sp, #4]
    8934:	eb002472 	bl	11b04 <LeaveCritical>
    8938:	e59d0004 	ldr	r0, [sp, #4]
    893c:	eaffffef 	b	8900 <CDeviceNameService::GetDevice(char const*, bool)+0xb8>
    8940:	e3041a24 	movw	r1, #18980	; 0x4a24
    8944:	e3401001 	movt	r1, #1
    8948:	e3040a78 	movw	r0, #19064	; 0x4a78
    894c:	e3400001 	movt	r0, #1
    8950:	e3a0209a 	mov	r2, #154	; 0x9a
    8954:	eb002611 	bl	121a0 <assertion_failed>

00008958 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
    8958:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    895c:	e1a08000 	mov	r8, r0
    8960:	e5900004 	ldr	r0, [r0, #4]
    8964:	e1a06001 	mov	r6, r1
    8968:	e1a07002 	mov	r7, r2
    896c:	e3500000 	cmp	r0, #0
    8970:	1a000013 	bne	89c4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x6c>
    8974:	e5984000 	ldr	r4, [r8]
    8978:	e3540000 	cmp	r4, #0
    897c:	1a000003 	bne	8990 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    8980:	ea000015 	b	89dc <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x84>
    8984:	e5944000 	ldr	r4, [r4]
    8988:	e3540000 	cmp	r4, #0
    898c:	0a000010 	beq	89d4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x7c>
    8990:	e1a03007 	mov	r3, r7
    8994:	e5d4200c 	ldrb	r2, [r4, #12]
    8998:	e5941004 	ldr	r1, [r4, #4]
    899c:	e5940008 	ldr	r0, [r4, #8]
    89a0:	e12fff36 	blx	r6
    89a4:	e2505000 	subs	r5, r0, #0
    89a8:	1afffff5 	bne	8984 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x2c>
    89ac:	e5983004 	ldr	r3, [r8, #4]
    89b0:	e3530000 	cmp	r3, #0
    89b4:	0a000000 	beq	89bc <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>
    89b8:	eb002451 	bl	11b04 <LeaveCritical>
    89bc:	e1a00005 	mov	r0, r5
    89c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    89c4:	eb002421 	bl	11a50 <EnterCritical>
    89c8:	e5984000 	ldr	r4, [r8]
    89cc:	e3540000 	cmp	r4, #0
    89d0:	1affffee 	bne	8990 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    89d4:	e3a05001 	mov	r5, #1
    89d8:	eafffff3 	b	89ac <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
    89dc:	e3a05001 	mov	r5, #1
    89e0:	eafffff5 	b	89bc <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>

000089e4 <CDeviceNameService::Get()>:
    89e4:	e3073244 	movw	r3, #29252	; 0x7244
    89e8:	e3403001 	movt	r3, #1
    89ec:	e5930000 	ldr	r0, [r3]
    89f0:	e3500000 	cmp	r0, #0
    89f4:	0a000000 	beq	89fc <CDeviceNameService::Get()+0x18>
    89f8:	e12fff1e 	bx	lr
    89fc:	e3041a24 	movw	r1, #18980	; 0x4a24
    8a00:	e3401001 	movt	r1, #1
    8a04:	e3040a88 	movw	r0, #19080	; 0x4a88
    8a08:	e3400001 	movt	r0, #1
    8a0c:	e92d4010 	push	{r4, lr}
    8a10:	e3a020e5 	mov	r2, #229	; 0xe5
    8a14:	eb0025e1 	bl	121a0 <assertion_failed>

00008a18 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    8a18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a1c:	e1a07001 	mov	r7, r1
    8a20:	e1a08002 	mov	r8, r2
    8a24:	e24dd010 	sub	sp, sp, #16
    8a28:	e1a04000 	mov	r4, r0
    8a2c:	e1a0000d 	mov	r0, sp
    8a30:	e1a05003 	mov	r5, r3
    8a34:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    8a38:	eb0013db 	bl	d9ac <CString::CString()>
    8a3c:	e1a03008 	mov	r3, r8
    8a40:	e1a02007 	mov	r2, r7
    8a44:	e1a0000d 	mov	r0, sp
    8a48:	e3041a94 	movw	r1, #19092	; 0x4a94
    8a4c:	e3401001 	movt	r1, #1
    8a50:	eb001904 	bl	ee68 <CString::Format(char const*, ...)>
    8a54:	e1a0000d 	mov	r0, sp
    8a58:	eb00140b 	bl	da8c <CString::operator char const*() const>
    8a5c:	e1a03006 	mov	r3, r6
    8a60:	e1a01000 	mov	r1, r0
    8a64:	e1a02005 	mov	r2, r5
    8a68:	e1a00004 	mov	r0, r4
    8a6c:	ebfffefb 	bl	8660 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8a70:	e1a0000d 	mov	r0, sp
    8a74:	eb001399 	bl	d8e0 <CString::~CString()>
    8a78:	e28dd010 	add	sp, sp, #16
    8a7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8a80:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8a84:	e1a06001 	mov	r6, r1
    8a88:	e1a07002 	mov	r7, r2
    8a8c:	e24dd014 	sub	sp, sp, #20
    8a90:	e1a04000 	mov	r4, r0
    8a94:	e1a0000d 	mov	r0, sp
    8a98:	e1a05003 	mov	r5, r3
    8a9c:	eb0013c2 	bl	d9ac <CString::CString()>
    8aa0:	e1a03007 	mov	r3, r7
    8aa4:	e1a02006 	mov	r2, r6
    8aa8:	e1a0000d 	mov	r0, sp
    8aac:	e3041a94 	movw	r1, #19092	; 0x4a94
    8ab0:	e3401001 	movt	r1, #1
    8ab4:	eb0018eb 	bl	ee68 <CString::Format(char const*, ...)>
    8ab8:	e1a0000d 	mov	r0, sp
    8abc:	eb0013f2 	bl	da8c <CString::operator char const*() const>
    8ac0:	e1a02005 	mov	r2, r5
    8ac4:	e1a01000 	mov	r1, r0
    8ac8:	e1a00004 	mov	r0, r4
    8acc:	ebffff11 	bl	8718 <CDeviceNameService::RemoveDevice(char const*, bool)>
    8ad0:	e1a0000d 	mov	r0, sp
    8ad4:	eb001381 	bl	d8e0 <CString::~CString()>
    8ad8:	e28dd014 	add	sp, sp, #20
    8adc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008ae0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    8ae0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8ae4:	e1a06001 	mov	r6, r1
    8ae8:	e1a07002 	mov	r7, r2
    8aec:	e24dd014 	sub	sp, sp, #20
    8af0:	e1a04000 	mov	r4, r0
    8af4:	e1a0000d 	mov	r0, sp
    8af8:	e1a05003 	mov	r5, r3
    8afc:	eb0013aa 	bl	d9ac <CString::CString()>
    8b00:	e1a03007 	mov	r3, r7
    8b04:	e1a02006 	mov	r2, r6
    8b08:	e1a0000d 	mov	r0, sp
    8b0c:	e3041a94 	movw	r1, #19092	; 0x4a94
    8b10:	e3401001 	movt	r1, #1
    8b14:	eb0018d3 	bl	ee68 <CString::Format(char const*, ...)>
    8b18:	e1a0000d 	mov	r0, sp
    8b1c:	eb0013da 	bl	da8c <CString::operator char const*() const>
    8b20:	e1a02005 	mov	r2, r5
    8b24:	e1a01000 	mov	r1, r0
    8b28:	e1a00004 	mov	r0, r4
    8b2c:	ebffff45 	bl	8848 <CDeviceNameService::GetDevice(char const*, bool)>
    8b30:	e1a04000 	mov	r4, r0
    8b34:	e1a0000d 	mov	r0, sp
    8b38:	eb001368 	bl	d8e0 <CString::~CString()>
    8b3c:	e1a00004 	mov	r0, r4
    8b40:	e28dd014 	add	sp, sp, #20
    8b44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008b48 <CDeviceNameService::ListDevices(CDevice*)>:
    8b48:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8b4c:	e2516000 	subs	r6, r1, #0
    8b50:	e24dd018 	sub	sp, sp, #24
    8b54:	0a000038 	beq	8c3c <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8b58:	e5904000 	ldr	r4, [r0]
    8b5c:	e3540000 	cmp	r4, #0
    8b60:	0a000033 	beq	8c34 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8b64:	e3049aac 	movw	r9, #19116	; 0x4aac
    8b68:	e3409001 	movt	r9, #1
    8b6c:	e3a05000 	mov	r5, #0
    8b70:	ea00001b 	b	8be4 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
    8b74:	e5d4200c 	ldrb	r2, [r4, #12]
    8b78:	e2855001 	add	r5, r5, #1
    8b7c:	e1a01009 	mov	r1, r9
    8b80:	e28d0008 	add	r0, sp, #8
    8b84:	e3520000 	cmp	r2, #0
    8b88:	03a02063 	moveq	r2, #99	; 0x63
    8b8c:	13a02062 	movne	r2, #98	; 0x62
    8b90:	e215a003 	ands	sl, r5, #3
    8b94:	13a0c020 	movne	ip, #32
    8b98:	03a0c00a 	moveq	ip, #10
    8b9c:	e58dc000 	str	ip, [sp]
    8ba0:	eb0018b0 	bl	ee68 <CString::Format(char const*, ...)>
    8ba4:	e5963000 	ldr	r3, [r6]
    8ba8:	e28d0008 	add	r0, sp, #8
    8bac:	e593700c 	ldr	r7, [r3, #12]
    8bb0:	eb0013b5 	bl	da8c <CString::operator char const*() const>
    8bb4:	e1a08000 	mov	r8, r0
    8bb8:	e28d0008 	add	r0, sp, #8
    8bbc:	eb0013f0 	bl	db84 <CString::GetLength() const>
    8bc0:	e1a01008 	mov	r1, r8
    8bc4:	e1a02000 	mov	r2, r0
    8bc8:	e1a00006 	mov	r0, r6
    8bcc:	e12fff37 	blx	r7
    8bd0:	e5944000 	ldr	r4, [r4]
    8bd4:	e28d0008 	add	r0, sp, #8
    8bd8:	eb001340 	bl	d8e0 <CString::~CString()>
    8bdc:	e3540000 	cmp	r4, #0
    8be0:	0a00000a 	beq	8c10 <CDeviceNameService::ListDevices(CDevice*)+0xc8>
    8be4:	e28d0008 	add	r0, sp, #8
    8be8:	eb00136f 	bl	d9ac <CString::CString()>
    8bec:	e5943004 	ldr	r3, [r4, #4]
    8bf0:	e3530000 	cmp	r3, #0
    8bf4:	1affffde 	bne	8b74 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    8bf8:	e3041a24 	movw	r1, #18980	; 0x4a24
    8bfc:	e3401001 	movt	r1, #1
    8c00:	e3040a64 	movw	r0, #19044	; 0x4a64
    8c04:	e3400001 	movt	r0, #1
    8c08:	e3a020d2 	mov	r2, #210	; 0xd2
    8c0c:	eb002563 	bl	121a0 <assertion_failed>
    8c10:	e35a0000 	cmp	sl, #0
    8c14:	0a000006 	beq	8c34 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8c18:	e5963000 	ldr	r3, [r6]
    8c1c:	e3041a20 	movw	r1, #18976	; 0x4a20
    8c20:	e3401001 	movt	r1, #1
    8c24:	e1a00006 	mov	r0, r6
    8c28:	e3a02001 	mov	r2, #1
    8c2c:	e593300c 	ldr	r3, [r3, #12]
    8c30:	e12fff33 	blx	r3
    8c34:	e28dd018 	add	sp, sp, #24
    8c38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c3c:	e3041a24 	movw	r1, #18980	; 0x4a24
    8c40:	e3401001 	movt	r1, #1
    8c44:	e3040a9c 	movw	r0, #19100	; 0x4a9c
    8c48:	e3400001 	movt	r0, #1
    8c4c:	e3a020c9 	mov	r2, #201	; 0xc9
    8c50:	eb002552 	bl	121a0 <assertion_failed>

00008c54 <CGPIOPin::CGPIOPin()>:
    8c54:	e92d4010 	push	{r4, lr}
    8c58:	e3a01000 	mov	r1, #0
    8c5c:	e59f4024 	ldr	r4, [pc, #36]	; 8c88 <CGPIOPin::CGPIOPin()+0x34>
    8c60:	e3a02006 	mov	r2, #6
    8c64:	e3a0e036 	mov	lr, #54	; 0x36
    8c68:	e3a0c00a 	mov	ip, #10
    8c6c:	e8804010 	stm	r0, {r4, lr}
    8c70:	e5c0c010 	strb	ip, [r0, #16]
    8c74:	e5801018 	str	r1, [r0, #24]
    8c78:	e580101c 	str	r1, [r0, #28]
    8c7c:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    8c80:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    8c84:	e8bd8010 	pop	{r4, pc}
    8c88:	00014ac0 	.word	0x00014ac0

00008c8c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    8c8c:	e92d4070 	push	{r4, r5, r6, lr}
    8c90:	e3a0c00a 	mov	ip, #10
    8c94:	e59f6044 	ldr	r6, [pc, #68]	; 8ce0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    8c98:	e3a0e036 	mov	lr, #54	; 0x36
    8c9c:	e1a05002 	mov	r5, r2
    8ca0:	e5803018 	str	r3, [r0, #24]
    8ca4:	e3a02000 	mov	r2, #0
    8ca8:	e3a03006 	mov	r3, #6
    8cac:	e1a04000 	mov	r4, r0
    8cb0:	e8804040 	stm	r0, {r6, lr}
    8cb4:	e5c0c010 	strb	ip, [r0, #16]
    8cb8:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    8cbc:	e5c03026 	strb	r3, [r0, #38]	; 0x26
    8cc0:	e580201c 	str	r2, [r0, #28]
    8cc4:	eb00000d 	bl	8d00 <CGPIOPin::AssignPin(unsigned int)>
    8cc8:	e1a00004 	mov	r0, r4
    8ccc:	e1a01005 	mov	r1, r5
    8cd0:	e3a02001 	mov	r2, #1
    8cd4:	eb00002a 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    8cd8:	e1a00004 	mov	r0, r4
    8cdc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ce0:	00014ac0 	.word	0x00014ac0

00008ce4 <CGPIOPin::~CGPIOPin()>:
    8ce4:	e12fff1e 	bx	lr

00008ce8 <CGPIOPin::~CGPIOPin()>:
    8ce8:	e92d4010 	push	{r4, lr}
    8cec:	e3a01028 	mov	r1, #40	; 0x28
    8cf0:	e1a04000 	mov	r4, r0
    8cf4:	eb001fa8 	bl	10b9c <operator delete(void*, unsigned int)>
    8cf8:	e1a00004 	mov	r0, r4
    8cfc:	e8bd8010 	pop	{r4, pc}

00008d00 <CGPIOPin::AssignPin(unsigned int)>:
    8d00:	e5903004 	ldr	r3, [r0, #4]
    8d04:	e92d4070 	push	{r4, r5, r6, lr}
    8d08:	e3530036 	cmp	r3, #54	; 0x36
    8d0c:	1a000017 	bne	8d70 <CGPIOPin::AssignPin(unsigned int)+0x70>
    8d10:	e1a05000 	mov	r5, r0
    8d14:	e3510035 	cmp	r1, #53	; 0x35
    8d18:	e1a04001 	mov	r4, r1
    8d1c:	e5851004 	str	r1, [r5, #4]
    8d20:	8a000007 	bhi	8d44 <CGPIOPin::AssignPin(unsigned int)+0x44>
    8d24:	e204201f 	and	r2, r4, #31
    8d28:	e3a03001 	mov	r3, #1
    8d2c:	e1a042a4 	lsr	r4, r4, #5
    8d30:	e1a03213 	lsl	r3, r3, r2
    8d34:	e1a04104 	lsl	r4, r4, #2
    8d38:	e5854008 	str	r4, [r5, #8]
    8d3c:	e585300c 	str	r3, [r5, #12]
    8d40:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d44:	eb00093d 	bl	b240 <CMachineInfo::Get()>
    8d48:	e6ef1074 	uxtb	r1, r4
    8d4c:	eb0008a2 	bl	afdc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8d50:	e3500035 	cmp	r0, #53	; 0x35
    8d54:	e1a04000 	mov	r4, r0
    8d58:	e5850004 	str	r0, [r5, #4]
    8d5c:	9afffff0 	bls	8d24 <CGPIOPin::AssignPin(unsigned int)+0x24>
    8d60:	e59f1018 	ldr	r1, [pc, #24]	; 8d80 <CGPIOPin::AssignPin(unsigned int)+0x80>
    8d64:	e3a02047 	mov	r2, #71	; 0x47
    8d68:	e2810020 	add	r0, r1, #32
    8d6c:	eb00250b 	bl	121a0 <assertion_failed>
    8d70:	e59f1008 	ldr	r1, [pc, #8]	; 8d80 <CGPIOPin::AssignPin(unsigned int)+0x80>
    8d74:	e3a02040 	mov	r2, #64	; 0x40
    8d78:	e281000c 	add	r0, r1, #12
    8d7c:	eb002507 	bl	121a0 <assertion_failed>
    8d80:	00014ac8 	.word	0x00014ac8

00008d84 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    8d84:	e3510009 	cmp	r1, #9
    8d88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d8c:	ca000043 	bgt	8ea0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x11c>
    8d90:	e2413004 	sub	r3, r1, #4
    8d94:	e1a05000 	mov	r5, r0
    8d98:	e3530005 	cmp	r3, #5
    8d9c:	e1a06002 	mov	r6, r2
    8da0:	e1a02001 	mov	r2, r1
    8da4:	e5c51010 	strb	r1, [r5, #16]
    8da8:	8a000008 	bhi	8dd0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
    8dac:	e3560000 	cmp	r6, #0
    8db0:	0a000002 	beq	8dc0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x3c>
    8db4:	e3a01000 	mov	r1, #0
    8db8:	eb0001f1 	bl	9584 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    8dbc:	e5d52010 	ldrb	r2, [r5, #16]
    8dc0:	e1a00005 	mov	r0, r5
    8dc4:	e2421004 	sub	r1, r2, #4
    8dc8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8dcc:	ea000211 	b	9618 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8dd0:	e3510001 	cmp	r1, #1
    8dd4:	13a01000 	movne	r1, #0
    8dd8:	02061001 	andeq	r1, r6, #1
    8ddc:	e3510000 	cmp	r1, #0
    8de0:	1a000042 	bne	8ef0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
    8de4:	e5952004 	ldr	r2, [r5, #4]
    8de8:	e3520035 	cmp	r2, #53	; 0x35
    8dec:	8a000042 	bhi	8efc <CGPIOPin::SetMode(TGPIOMode, bool)+0x178>
    8df0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    8df4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    8df8:	e3077248 	movw	r7, #29256	; 0x7248
    8dfc:	e3407001 	movt	r7, #1
    8e00:	e3a0100a 	mov	r1, #10
    8e04:	e0843293 	umull	r3, r4, r3, r2
    8e08:	e5970000 	ldr	r0, [r7]
    8e0c:	e1a041a4 	lsr	r4, r4, #3
    8e10:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    8e14:	e3500000 	cmp	r0, #0
    8e18:	e2833702 	add	r3, r3, #524288	; 0x80000
    8e1c:	e0642491 	mls	r4, r1, r4, r2
    8e20:	e1a08103 	lsl	r8, r3, #2
    8e24:	e0844084 	add	r4, r4, r4, lsl #1
    8e28:	1a00001a 	bne	8e98 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
    8e2c:	e5d52010 	ldrb	r2, [r5, #16]
    8e30:	e3a01007 	mov	r1, #7
    8e34:	e5983000 	ldr	r3, [r8]
    8e38:	e2422001 	sub	r2, r2, #1
    8e3c:	e16f2f12 	clz	r2, r2
    8e40:	e1c33411 	bic	r3, r3, r1, lsl r4
    8e44:	e1a022a2 	lsr	r2, r2, #5
    8e48:	e1834412 	orr	r4, r3, r2, lsl r4
    8e4c:	e5884000 	str	r4, [r8]
    8e50:	e5973000 	ldr	r3, [r7]
    8e54:	e3530000 	cmp	r3, #0
    8e58:	1a00000a 	bne	8e88 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
    8e5c:	e3560000 	cmp	r6, #0
    8e60:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8e64:	e5d53010 	ldrb	r3, [r5, #16]
    8e68:	e3530003 	cmp	r3, #3
    8e6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8e70:	ea000003 	b	8e84 <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
    8e74:	00008ec0 	.word	0x00008ec0
    8e78:	00008ed0 	.word	0x00008ed0
    8e7c:	00008ee0 	.word	0x00008ee0
    8e80:	00008eb0 	.word	0x00008eb0
    8e84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e88:	eb00231d 	bl	11b04 <LeaveCritical>
    8e8c:	e3560000 	cmp	r6, #0
    8e90:	1afffff3 	bne	8e64 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
    8e94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8e98:	eb0022ec 	bl	11a50 <EnterCritical>
    8e9c:	eaffffe2 	b	8e2c <CGPIOPin::SetMode(TGPIOMode, bool)+0xa8>
    8ea0:	e59f1064 	ldr	r1, [pc, #100]	; 8f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
    8ea4:	e3a0204f 	mov	r2, #79	; 0x4f
    8ea8:	e2810034 	add	r0, r1, #52	; 0x34
    8eac:	eb0024bb 	bl	121a0 <assertion_failed>
    8eb0:	e1a00005 	mov	r0, r5
    8eb4:	e3a01001 	mov	r1, #1
    8eb8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8ebc:	ea0001b0 	b	9584 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    8ec0:	e1a00005 	mov	r0, r5
    8ec4:	e3a01000 	mov	r1, #0
    8ec8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8ecc:	ea0001ac 	b	9584 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    8ed0:	e1a00005 	mov	r0, r5
    8ed4:	e3a01000 	mov	r1, #0
    8ed8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8edc:	ea00000b 	b	8f10 <CGPIOPin::Write(unsigned int)>
    8ee0:	e1a00005 	mov	r0, r5
    8ee4:	e3a01002 	mov	r1, #2
    8ee8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8eec:	ea0001a4 	b	9584 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    8ef0:	e3a01000 	mov	r1, #0
    8ef4:	eb0001a2 	bl	9584 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    8ef8:	eaffffb9 	b	8de4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x60>
    8efc:	e59f1008 	ldr	r1, [pc, #8]	; 8f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
    8f00:	e3a02068 	mov	r2, #104	; 0x68
    8f04:	e2810020 	add	r0, r1, #32
    8f08:	eb0024a4 	bl	121a0 <assertion_failed>
    8f0c:	00014ac8 	.word	0x00014ac8

00008f10 <CGPIOPin::Write(unsigned int)>:
    8f10:	e5903004 	ldr	r3, [r0, #4]
    8f14:	e92d4010 	push	{r4, lr}
    8f18:	e3530035 	cmp	r3, #53	; 0x35
    8f1c:	8a00000f 	bhi	8f60 <CGPIOPin::Write(unsigned int)+0x50>
    8f20:	e5d03010 	ldrb	r3, [r0, #16]
    8f24:	e3530003 	cmp	r3, #3
    8f28:	ca000010 	bgt	8f70 <CGPIOPin::Write(unsigned int)+0x60>
    8f2c:	e3510001 	cmp	r1, #1
    8f30:	8a000012 	bhi	8f80 <CGPIOPin::Write(unsigned int)+0x70>
    8f34:	e3a02028 	mov	r2, #40	; 0x28
    8f38:	e3432f20 	movt	r2, #16160	; 0x3f20
    8f3c:	e590c008 	ldr	ip, [r0, #8]
    8f40:	e3510000 	cmp	r1, #0
    8f44:	e3a0301c 	mov	r3, #28
    8f48:	e3433f20 	movt	r3, #16160	; 0x3f20
    8f4c:	01a03002 	moveq	r3, r2
    8f50:	e590200c 	ldr	r2, [r0, #12]
    8f54:	e5801014 	str	r1, [r0, #20]
    8f58:	e783200c 	str	r2, [r3, ip]
    8f5c:	e8bd8010 	pop	{r4, pc}
    8f60:	e59f1028 	ldr	r1, [pc, #40]	; 8f90 <CGPIOPin::Write(unsigned int)+0x80>
    8f64:	e3a02091 	mov	r2, #145	; 0x91
    8f68:	e2810020 	add	r0, r1, #32
    8f6c:	eb00248b 	bl	121a0 <assertion_failed>
    8f70:	e59f1018 	ldr	r1, [pc, #24]	; 8f90 <CGPIOPin::Write(unsigned int)+0x80>
    8f74:	e3a02094 	mov	r2, #148	; 0x94
    8f78:	e281004c 	add	r0, r1, #76	; 0x4c
    8f7c:	eb002487 	bl	121a0 <assertion_failed>
    8f80:	e59f1008 	ldr	r1, [pc, #8]	; 8f90 <CGPIOPin::Write(unsigned int)+0x80>
    8f84:	e3a02098 	mov	r2, #152	; 0x98
    8f88:	e2810070 	add	r0, r1, #112	; 0x70
    8f8c:	eb002483 	bl	121a0 <assertion_failed>
    8f90:	00014ac8 	.word	0x00014ac8

00008f94 <CGPIOPin::Read() const>:
    8f94:	e5903004 	ldr	r3, [r0, #4]
    8f98:	e92d4010 	push	{r4, lr}
    8f9c:	e3530035 	cmp	r3, #53	; 0x35
    8fa0:	8a00000d 	bhi	8fdc <CGPIOPin::Read() const+0x48>
    8fa4:	e5d03010 	ldrb	r3, [r0, #16]
    8fa8:	e2432002 	sub	r2, r3, #2
    8fac:	e3530000 	cmp	r3, #0
    8fb0:	13520001 	cmpne	r2, #1
    8fb4:	8a00000c 	bhi	8fec <CGPIOPin::Read() const+0x58>
    8fb8:	e5901008 	ldr	r1, [r0, #8]
    8fbc:	e3a03034 	mov	r3, #52	; 0x34
    8fc0:	e3433f20 	movt	r3, #16160	; 0x3f20
    8fc4:	e590200c 	ldr	r2, [r0, #12]
    8fc8:	e7913003 	ldr	r3, [r1, r3]
    8fcc:	e1130002 	tst	r3, r2
    8fd0:	13a00001 	movne	r0, #1
    8fd4:	03a00000 	moveq	r0, #0
    8fd8:	e8bd8010 	pop	{r4, pc}
    8fdc:	e59f1018 	ldr	r1, [pc, #24]	; 8ffc <CGPIOPin::Read() const+0x68>
    8fe0:	e3a020a4 	mov	r2, #164	; 0xa4
    8fe4:	e2810020 	add	r0, r1, #32
    8fe8:	eb00246c 	bl	121a0 <assertion_failed>
    8fec:	e59f1008 	ldr	r1, [pc, #8]	; 8ffc <CGPIOPin::Read() const+0x68>
    8ff0:	e3a020a8 	mov	r2, #168	; 0xa8
    8ff4:	e2810090 	add	r0, r1, #144	; 0x90
    8ff8:	eb002468 	bl	121a0 <assertion_failed>
    8ffc:	00014ac8 	.word	0x00014ac8

00009000 <CGPIOPin::Invert()>:
    9000:	e5d02010 	ldrb	r2, [r0, #16]
    9004:	e3520001 	cmp	r2, #1
    9008:	1a000002 	bne	9018 <CGPIOPin::Invert()+0x18>
    900c:	e5901014 	ldr	r1, [r0, #20]
    9010:	e2211001 	eor	r1, r1, #1
    9014:	eaffffbd 	b	8f10 <CGPIOPin::Write(unsigned int)>
    9018:	e59f100c 	ldr	r1, [pc, #12]	; 902c <CGPIOPin::Invert()+0x2c>
    901c:	e3a020b5 	mov	r2, #181	; 0xb5
    9020:	e92d4010 	push	{r4, lr}
    9024:	e28100ec 	add	r0, r1, #236	; 0xec
    9028:	eb00245c 	bl	121a0 <assertion_failed>
    902c:	00014ac8 	.word	0x00014ac8

00009030 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    9030:	e5d0c010 	ldrb	ip, [r0, #16]
    9034:	e92d4010 	push	{r4, lr}
    9038:	e24ce002 	sub	lr, ip, #2
    903c:	e35c0000 	cmp	ip, #0
    9040:	135e0001 	cmpne	lr, #1
    9044:	8a000028 	bhi	90ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    9048:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
    904c:	e35c0006 	cmp	ip, #6
    9050:	1a000011 	bne	909c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    9054:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
    9058:	e35c0006 	cmp	ip, #6
    905c:	1a000012 	bne	90ac <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    9060:	e3510000 	cmp	r1, #0
    9064:	0a000014 	beq	90bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    9068:	e590c01c 	ldr	ip, [r0, #28]
    906c:	e35c0000 	cmp	ip, #0
    9070:	1a000015 	bne	90cc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    9074:	e590c018 	ldr	ip, [r0, #24]
    9078:	e580101c 	str	r1, [r0, #28]
    907c:	e35c0000 	cmp	ip, #0
    9080:	e5802020 	str	r2, [r0, #32]
    9084:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    9088:	0a000013 	beq	90dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    908c:	e1a01000 	mov	r1, r0
    9090:	e1a0000c 	mov	r0, ip
    9094:	e8bd4010 	pop	{r4, lr}
    9098:	ea002ad1 	b	13be4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    909c:	e59f1058 	ldr	r1, [pc, #88]	; 90fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    90a0:	e3a020c0 	mov	r2, #192	; 0xc0
    90a4:	e2810f42 	add	r0, r1, #264	; 0x108
    90a8:	eb00243c 	bl	121a0 <assertion_failed>
    90ac:	e59f1048 	ldr	r1, [pc, #72]	; 90fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    90b0:	e3a020c1 	mov	r2, #193	; 0xc1
    90b4:	e2810f4b 	add	r0, r1, #300	; 0x12c
    90b8:	eb002438 	bl	121a0 <assertion_failed>
    90bc:	e59f1038 	ldr	r1, [pc, #56]	; 90fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    90c0:	e3a020c3 	mov	r2, #195	; 0xc3
    90c4:	e2810f55 	add	r0, r1, #340	; 0x154
    90c8:	eb002434 	bl	121a0 <assertion_failed>
    90cc:	e59f1028 	ldr	r1, [pc, #40]	; 90fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    90d0:	e3a020c4 	mov	r2, #196	; 0xc4
    90d4:	e2810f59 	add	r0, r1, #356	; 0x164
    90d8:	eb002430 	bl	121a0 <assertion_failed>
    90dc:	e59f1018 	ldr	r1, [pc, #24]	; 90fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    90e0:	e3a020cb 	mov	r2, #203	; 0xcb
    90e4:	e2810f5d 	add	r0, r1, #372	; 0x174
    90e8:	eb00242c 	bl	121a0 <assertion_failed>
    90ec:	e59f1008 	ldr	r1, [pc, #8]	; 90fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    90f0:	e3a020be 	mov	r2, #190	; 0xbe
    90f4:	e2810090 	add	r0, r1, #144	; 0x90
    90f8:	eb002428 	bl	121a0 <assertion_failed>
    90fc:	00014ac8 	.word	0x00014ac8

00009100 <CGPIOPin::DisconnectInterrupt()>:
    9100:	e5d03010 	ldrb	r3, [r0, #16]
    9104:	e92d4010 	push	{r4, lr}
    9108:	e2432002 	sub	r2, r3, #2
    910c:	e3530000 	cmp	r3, #0
    9110:	13520001 	cmpne	r2, #1
    9114:	8a000020 	bhi	919c <CGPIOPin::DisconnectInterrupt()+0x9c>
    9118:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    911c:	e1a01000 	mov	r1, r0
    9120:	e3530006 	cmp	r3, #6
    9124:	1a00000c 	bne	915c <CGPIOPin::DisconnectInterrupt()+0x5c>
    9128:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    912c:	e3530006 	cmp	r3, #6
    9130:	1a00000d 	bne	916c <CGPIOPin::DisconnectInterrupt()+0x6c>
    9134:	e590301c 	ldr	r3, [r0, #28]
    9138:	e3530000 	cmp	r3, #0
    913c:	0a00000e 	beq	917c <CGPIOPin::DisconnectInterrupt()+0x7c>
    9140:	e5900018 	ldr	r0, [r0, #24]
    9144:	e3a03000 	mov	r3, #0
    9148:	e581301c 	str	r3, [r1, #28]
    914c:	e1500003 	cmp	r0, r3
    9150:	0a00000d 	beq	918c <CGPIOPin::DisconnectInterrupt()+0x8c>
    9154:	e8bd4010 	pop	{r4, lr}
    9158:	ea002ac8 	b	13c80 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    915c:	e59f1048 	ldr	r1, [pc, #72]	; 91ac <CGPIOPin::DisconnectInterrupt()+0xac>
    9160:	e3a020d5 	mov	r2, #213	; 0xd5
    9164:	e2810f42 	add	r0, r1, #264	; 0x108
    9168:	eb00240c 	bl	121a0 <assertion_failed>
    916c:	e59f1038 	ldr	r1, [pc, #56]	; 91ac <CGPIOPin::DisconnectInterrupt()+0xac>
    9170:	e3a020d6 	mov	r2, #214	; 0xd6
    9174:	e2810f4b 	add	r0, r1, #300	; 0x12c
    9178:	eb002408 	bl	121a0 <assertion_failed>
    917c:	e59f1028 	ldr	r1, [pc, #40]	; 91ac <CGPIOPin::DisconnectInterrupt()+0xac>
    9180:	e3a020d8 	mov	r2, #216	; 0xd8
    9184:	e2810f61 	add	r0, r1, #388	; 0x184
    9188:	eb002404 	bl	121a0 <assertion_failed>
    918c:	e59f1018 	ldr	r1, [pc, #24]	; 91ac <CGPIOPin::DisconnectInterrupt()+0xac>
    9190:	e3a020db 	mov	r2, #219	; 0xdb
    9194:	e2810f5d 	add	r0, r1, #372	; 0x174
    9198:	eb002400 	bl	121a0 <assertion_failed>
    919c:	e59f1008 	ldr	r1, [pc, #8]	; 91ac <CGPIOPin::DisconnectInterrupt()+0xac>
    91a0:	e3a020d3 	mov	r2, #211	; 0xd3
    91a4:	e2810090 	add	r0, r1, #144	; 0x90
    91a8:	eb0023fc 	bl	121a0 <assertion_failed>
    91ac:	00014ac8 	.word	0x00014ac8

000091b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    91b0:	e5d03010 	ldrb	r3, [r0, #16]
    91b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91b8:	e2432002 	sub	r2, r3, #2
    91bc:	e3530000 	cmp	r3, #0
    91c0:	13520001 	cmpne	r2, #1
    91c4:	8a000032 	bhi	9294 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
    91c8:	e590301c 	ldr	r3, [r0, #28]
    91cc:	e1a04000 	mov	r4, r0
    91d0:	e3530000 	cmp	r3, #0
    91d4:	0a00001e 	beq	9254 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
    91d8:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    91dc:	e3530006 	cmp	r3, #6
    91e0:	1a00001f 	bne	9264 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
    91e4:	e3510005 	cmp	r1, #5
    91e8:	ca000021 	bgt	9274 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    91ec:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    91f0:	e1530001 	cmp	r3, r1
    91f4:	0a000022 	beq	9284 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
    91f8:	e3076248 	movw	r6, #29256	; 0x7248
    91fc:	e3406001 	movt	r6, #1
    9200:	e5903008 	ldr	r3, [r0, #8]
    9204:	e3a0700c 	mov	r7, #12
    9208:	e3a0504c 	mov	r5, #76	; 0x4c
    920c:	e3435f20 	movt	r5, #16160	; 0x3f20
    9210:	e5960000 	ldr	r0, [r6]
    9214:	e0835005 	add	r5, r3, r5
    9218:	e5c41025 	strb	r1, [r4, #37]	; 0x25
    921c:	e0070197 	mul	r7, r7, r1
    9220:	e3500000 	cmp	r0, #0
    9224:	1a000008 	bne	924c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    9228:	e594200c 	ldr	r2, [r4, #12]
    922c:	e7953007 	ldr	r3, [r5, r7]
    9230:	e1833002 	orr	r3, r3, r2
    9234:	e7853007 	str	r3, [r5, r7]
    9238:	e5963000 	ldr	r3, [r6]
    923c:	e3530000 	cmp	r3, #0
    9240:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9244:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9248:	ea00222d 	b	11b04 <LeaveCritical>
    924c:	eb0021ff 	bl	11a50 <EnterCritical>
    9250:	eafffff4 	b	9228 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    9254:	e59f1048 	ldr	r1, [pc, #72]	; 92a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9258:	e3a020e4 	mov	r2, #228	; 0xe4
    925c:	e2810f61 	add	r0, r1, #388	; 0x184
    9260:	eb0023ce 	bl	121a0 <assertion_failed>
    9264:	e59f1038 	ldr	r1, [pc, #56]	; 92a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9268:	e3a020e6 	mov	r2, #230	; 0xe6
    926c:	e2810f42 	add	r0, r1, #264	; 0x108
    9270:	eb0023ca 	bl	121a0 <assertion_failed>
    9274:	e59f1028 	ldr	r1, [pc, #40]	; 92a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9278:	e3a020e7 	mov	r2, #231	; 0xe7
    927c:	e2810f65 	add	r0, r1, #404	; 0x194
    9280:	eb0023c6 	bl	121a0 <assertion_failed>
    9284:	e59f1018 	ldr	r1, [pc, #24]	; 92a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9288:	e3a020e8 	mov	r2, #232	; 0xe8
    928c:	e2810f6e 	add	r0, r1, #440	; 0x1b8
    9290:	eb0023c2 	bl	121a0 <assertion_failed>
    9294:	e59f1008 	ldr	r1, [pc, #8]	; 92a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9298:	e3a020e3 	mov	r2, #227	; 0xe3
    929c:	e2810090 	add	r0, r1, #144	; 0x90
    92a0:	eb0023be 	bl	121a0 <assertion_failed>
    92a4:	00014ac8 	.word	0x00014ac8

000092a8 <CGPIOPin::DisableInterrupt()>:
    92a8:	e5d03010 	ldrb	r3, [r0, #16]
    92ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    92b0:	e2432002 	sub	r2, r3, #2
    92b4:	e3530000 	cmp	r3, #0
    92b8:	13520001 	cmpne	r2, #1
    92bc:	8a00001f 	bhi	9340 <CGPIOPin::DisableInterrupt()+0x98>
    92c0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    92c4:	e1a04000 	mov	r4, r0
    92c8:	e3530005 	cmp	r3, #5
    92cc:	ca000017 	bgt	9330 <CGPIOPin::DisableInterrupt()+0x88>
    92d0:	e3076248 	movw	r6, #29256	; 0x7248
    92d4:	e3406001 	movt	r6, #1
    92d8:	e5902008 	ldr	r2, [r0, #8]
    92dc:	e3a0700c 	mov	r7, #12
    92e0:	e3a0504c 	mov	r5, #76	; 0x4c
    92e4:	e3435f20 	movt	r5, #16160	; 0x3f20
    92e8:	e5960000 	ldr	r0, [r6]
    92ec:	e0825005 	add	r5, r2, r5
    92f0:	e0070397 	mul	r7, r7, r3
    92f4:	e3500000 	cmp	r0, #0
    92f8:	1a00000a 	bne	9328 <CGPIOPin::DisableInterrupt()+0x80>
    92fc:	e7953007 	ldr	r3, [r5, r7]
    9300:	e594200c 	ldr	r2, [r4, #12]
    9304:	e1c33002 	bic	r3, r3, r2
    9308:	e7853007 	str	r3, [r5, r7]
    930c:	e5963000 	ldr	r3, [r6]
    9310:	e3530000 	cmp	r3, #0
    9314:	0a000000 	beq	931c <CGPIOPin::DisableInterrupt()+0x74>
    9318:	eb0021f9 	bl	11b04 <LeaveCritical>
    931c:	e3a03006 	mov	r3, #6
    9320:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9324:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9328:	eb0021c8 	bl	11a50 <EnterCritical>
    932c:	eafffff2 	b	92fc <CGPIOPin::DisableInterrupt()+0x54>
    9330:	e59f1018 	ldr	r1, [pc, #24]	; 9350 <CGPIOPin::DisableInterrupt()+0xa8>
    9334:	e3a020fb 	mov	r2, #251	; 0xfb
    9338:	e2810f75 	add	r0, r1, #468	; 0x1d4
    933c:	eb002397 	bl	121a0 <assertion_failed>
    9340:	e59f1008 	ldr	r1, [pc, #8]	; 9350 <CGPIOPin::DisableInterrupt()+0xa8>
    9344:	e3a020f9 	mov	r2, #249	; 0xf9
    9348:	e2810090 	add	r0, r1, #144	; 0x90
    934c:	eb002393 	bl	121a0 <assertion_failed>
    9350:	00014ac8 	.word	0x00014ac8

00009354 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    9354:	e5d03010 	ldrb	r3, [r0, #16]
    9358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    935c:	e2432002 	sub	r2, r3, #2
    9360:	e3530000 	cmp	r3, #0
    9364:	13520001 	cmpne	r2, #1
    9368:	8a000032 	bhi	9438 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
    936c:	e590301c 	ldr	r3, [r0, #28]
    9370:	e1a04000 	mov	r4, r0
    9374:	e3530000 	cmp	r3, #0
    9378:	0a00001e 	beq	93f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
    937c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9380:	e3530006 	cmp	r3, #6
    9384:	1a00001f 	bne	9408 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
    9388:	e3510005 	cmp	r1, #5
    938c:	ca000021 	bgt	9418 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    9390:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9394:	e1530001 	cmp	r3, r1
    9398:	0a000022 	beq	9428 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
    939c:	e3076248 	movw	r6, #29256	; 0x7248
    93a0:	e3406001 	movt	r6, #1
    93a4:	e5903008 	ldr	r3, [r0, #8]
    93a8:	e3a0700c 	mov	r7, #12
    93ac:	e3a0504c 	mov	r5, #76	; 0x4c
    93b0:	e3435f20 	movt	r5, #16160	; 0x3f20
    93b4:	e5960000 	ldr	r0, [r6]
    93b8:	e0835005 	add	r5, r3, r5
    93bc:	e5c41026 	strb	r1, [r4, #38]	; 0x26
    93c0:	e0070197 	mul	r7, r7, r1
    93c4:	e3500000 	cmp	r0, #0
    93c8:	1a000008 	bne	93f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    93cc:	e594200c 	ldr	r2, [r4, #12]
    93d0:	e7953007 	ldr	r3, [r5, r7]
    93d4:	e1833002 	orr	r3, r3, r2
    93d8:	e7853007 	str	r3, [r5, r7]
    93dc:	e5963000 	ldr	r3, [r6]
    93e0:	e3530000 	cmp	r3, #0
    93e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    93e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    93ec:	ea0021c4 	b	11b04 <LeaveCritical>
    93f0:	eb002196 	bl	11a50 <EnterCritical>
    93f4:	eafffff4 	b	93cc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    93f8:	e59f1048 	ldr	r1, [pc, #72]	; 9448 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    93fc:	e300210d 	movw	r2, #269	; 0x10d
    9400:	e2810f61 	add	r0, r1, #388	; 0x184
    9404:	eb002365 	bl	121a0 <assertion_failed>
    9408:	e59f1038 	ldr	r1, [pc, #56]	; 9448 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    940c:	e300210f 	movw	r2, #271	; 0x10f
    9410:	e2810f4b 	add	r0, r1, #300	; 0x12c
    9414:	eb002361 	bl	121a0 <assertion_failed>
    9418:	e59f1028 	ldr	r1, [pc, #40]	; 9448 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    941c:	e3a02e11 	mov	r2, #272	; 0x110
    9420:	e2810f65 	add	r0, r1, #404	; 0x194
    9424:	eb00235d 	bl	121a0 <assertion_failed>
    9428:	e59f1018 	ldr	r1, [pc, #24]	; 9448 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    942c:	e3002111 	movw	r2, #273	; 0x111
    9430:	e2810f7e 	add	r0, r1, #504	; 0x1f8
    9434:	eb002359 	bl	121a0 <assertion_failed>
    9438:	e59f1008 	ldr	r1, [pc, #8]	; 9448 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    943c:	e3a02f43 	mov	r2, #268	; 0x10c
    9440:	e2810090 	add	r0, r1, #144	; 0x90
    9444:	eb002355 	bl	121a0 <assertion_failed>
    9448:	00014ac8 	.word	0x00014ac8

0000944c <CGPIOPin::DisableInterrupt2()>:
    944c:	e5d03010 	ldrb	r3, [r0, #16]
    9450:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9454:	e2432002 	sub	r2, r3, #2
    9458:	e3530000 	cmp	r3, #0
    945c:	13520001 	cmpne	r2, #1
    9460:	8a00001f 	bhi	94e4 <CGPIOPin::DisableInterrupt2()+0x98>
    9464:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9468:	e1a04000 	mov	r4, r0
    946c:	e3530005 	cmp	r3, #5
    9470:	ca000017 	bgt	94d4 <CGPIOPin::DisableInterrupt2()+0x88>
    9474:	e3076248 	movw	r6, #29256	; 0x7248
    9478:	e3406001 	movt	r6, #1
    947c:	e5902008 	ldr	r2, [r0, #8]
    9480:	e3a0700c 	mov	r7, #12
    9484:	e3a0504c 	mov	r5, #76	; 0x4c
    9488:	e3435f20 	movt	r5, #16160	; 0x3f20
    948c:	e5960000 	ldr	r0, [r6]
    9490:	e0825005 	add	r5, r2, r5
    9494:	e0070397 	mul	r7, r7, r3
    9498:	e3500000 	cmp	r0, #0
    949c:	1a00000a 	bne	94cc <CGPIOPin::DisableInterrupt2()+0x80>
    94a0:	e7953007 	ldr	r3, [r5, r7]
    94a4:	e594200c 	ldr	r2, [r4, #12]
    94a8:	e1c33002 	bic	r3, r3, r2
    94ac:	e7853007 	str	r3, [r5, r7]
    94b0:	e5963000 	ldr	r3, [r6]
    94b4:	e3530000 	cmp	r3, #0
    94b8:	0a000000 	beq	94c0 <CGPIOPin::DisableInterrupt2()+0x74>
    94bc:	eb002190 	bl	11b04 <LeaveCritical>
    94c0:	e3a03006 	mov	r3, #6
    94c4:	e5c43026 	strb	r3, [r4, #38]	; 0x26
    94c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    94cc:	eb00215f 	bl	11a50 <EnterCritical>
    94d0:	eafffff2 	b	94a0 <CGPIOPin::DisableInterrupt2()+0x54>
    94d4:	e59f1018 	ldr	r1, [pc, #24]	; 94f4 <CGPIOPin::DisableInterrupt2()+0xa8>
    94d8:	e3a02f49 	mov	r2, #292	; 0x124
    94dc:	e2810f85 	add	r0, r1, #532	; 0x214
    94e0:	eb00232e 	bl	121a0 <assertion_failed>
    94e4:	e59f1008 	ldr	r1, [pc, #8]	; 94f4 <CGPIOPin::DisableInterrupt2()+0xa8>
    94e8:	e3002122 	movw	r2, #290	; 0x122
    94ec:	e2810090 	add	r0, r1, #144	; 0x90
    94f0:	eb00232a 	bl	121a0 <assertion_failed>
    94f4:	00014ac8 	.word	0x00014ac8

000094f8 <CGPIOPin::AcknowledgeInterrupt()>:
    94f8:	e590301c 	ldr	r3, [r0, #28]
    94fc:	e92d4010 	push	{r4, lr}
    9500:	e3530000 	cmp	r3, #0
    9504:	0a000008 	beq	952c <CGPIOPin::AcknowledgeInterrupt()+0x34>
    9508:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
    950c:	e3530000 	cmp	r3, #0
    9510:	1a000009 	bne	953c <CGPIOPin::AcknowledgeInterrupt()+0x44>
    9514:	e5902008 	ldr	r2, [r0, #8]
    9518:	e3a03040 	mov	r3, #64	; 0x40
    951c:	e3433f20 	movt	r3, #16160	; 0x3f20
    9520:	e590100c 	ldr	r1, [r0, #12]
    9524:	e7821003 	str	r1, [r2, r3]
    9528:	e8bd8010 	pop	{r4, pc}
    952c:	e59f1018 	ldr	r1, [pc, #24]	; 954c <CGPIOPin::AcknowledgeInterrupt()+0x54>
    9530:	e3002133 	movw	r2, #307	; 0x133
    9534:	e2810f61 	add	r0, r1, #388	; 0x184
    9538:	eb002318 	bl	121a0 <assertion_failed>
    953c:	e59f1008 	ldr	r1, [pc, #8]	; 954c <CGPIOPin::AcknowledgeInterrupt()+0x54>
    9540:	e3a02f4d 	mov	r2, #308	; 0x134
    9544:	e2810f8e 	add	r0, r1, #568	; 0x238
    9548:	eb002314 	bl	121a0 <assertion_failed>
    954c:	00014ac8 	.word	0x00014ac8

00009550 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    9550:	e1d12000 	bics	r2, r1, r0
    9554:	13a03000 	movne	r3, #0
    9558:	13433f20 	movtne	r3, #16160	; 0x3f20
    955c:	15832028 	strne	r2, [r3, #40]	; 0x28
    9560:	e0100001 	ands	r0, r0, r1
    9564:	13a03000 	movne	r3, #0
    9568:	13433f20 	movtne	r3, #16160	; 0x3f20
    956c:	1583001c 	strne	r0, [r3, #28]
    9570:	e12fff1e 	bx	lr

00009574 <CGPIOPin::ReadAll()>:
    9574:	e3a03000 	mov	r3, #0
    9578:	e3433f20 	movt	r3, #16160	; 0x3f20
    957c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    9580:	e12fff1e 	bx	lr

00009584 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    9584:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9588:	e3074248 	movw	r4, #29256	; 0x7248
    958c:	e3404001 	movt	r4, #1
    9590:	e1a07000 	mov	r7, r0
    9594:	e1a08001 	mov	r8, r1
    9598:	e5940000 	ldr	r0, [r4]
    959c:	e3500000 	cmp	r0, #0
    95a0:	1a000015 	bne	95fc <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
    95a4:	e3580002 	cmp	r8, #2
    95a8:	e3a05098 	mov	r5, #152	; 0x98
    95ac:	e3435f20 	movt	r5, #16160	; 0x3f20
    95b0:	e5979008 	ldr	r9, [r7, #8]
    95b4:	ca000012 	bgt	9604 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
    95b8:	e3a06000 	mov	r6, #0
    95bc:	e3436f20 	movt	r6, #16160	; 0x3f20
    95c0:	e3a00005 	mov	r0, #5
    95c4:	e5868094 	str	r8, [r6, #148]	; 0x94
    95c8:	eb0019c1 	bl	fcd4 <CTimer::SimpleusDelay(unsigned int)>
    95cc:	e597300c 	ldr	r3, [r7, #12]
    95d0:	e3a00005 	mov	r0, #5
    95d4:	e7893005 	str	r3, [r9, r5]
    95d8:	eb0019bd 	bl	fcd4 <CTimer::SimpleusDelay(unsigned int)>
    95dc:	e3a03000 	mov	r3, #0
    95e0:	e5863094 	str	r3, [r6, #148]	; 0x94
    95e4:	e7893005 	str	r3, [r9, r5]
    95e8:	e5943000 	ldr	r3, [r4]
    95ec:	e3530000 	cmp	r3, #0
    95f0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    95f4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    95f8:	ea002141 	b	11b04 <LeaveCritical>
    95fc:	eb002113 	bl	11a50 <EnterCritical>
    9600:	eaffffe7 	b	95a4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
    9604:	e59f1008 	ldr	r1, [pc, #8]	; 9614 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
    9608:	e3002165 	movw	r2, #357	; 0x165
    960c:	e2810f91 	add	r0, r1, #580	; 0x244
    9610:	eb0022e2 	bl	121a0 <assertion_failed>
    9614:	00014ac8 	.word	0x00014ac8

00009618 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9618:	e5900004 	ldr	r0, [r0, #4]
    961c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9620:	e3500035 	cmp	r0, #53	; 0x35
    9624:	8a000021 	bhi	96b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
    9628:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    962c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    9630:	e1a06001 	mov	r6, r1
    9634:	e3510005 	cmp	r1, #5
    9638:	e3a0200a 	mov	r2, #10
    963c:	e0831093 	umull	r1, r3, r3, r0
    9640:	e1a031a3 	lsr	r3, r3, #3
    9644:	e283c53f 	add	ip, r3, #264241152	; 0xfc00000
    9648:	e28cc702 	add	ip, ip, #524288	; 0x80000
    964c:	e0630392 	mls	r3, r2, r3, r0
    9650:	e1a0710c 	lsl	r7, ip, #2
    9654:	e0834083 	add	r4, r3, r3, lsl #1
    9658:	8a000018 	bhi	96c0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
    965c:	e3075248 	movw	r5, #29256	; 0x7248
    9660:	e3405001 	movt	r5, #1
    9664:	e5950000 	ldr	r0, [r5]
    9668:	e3500000 	cmp	r0, #0
    966c:	1a00000d 	bne	96a8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
    9670:	e3042ab8 	movw	r2, #19128	; 0x4ab8
    9674:	e3402001 	movt	r2, #1
    9678:	e5973000 	ldr	r3, [r7]
    967c:	e3a01007 	mov	r1, #7
    9680:	e0822106 	add	r2, r2, r6, lsl #2
    9684:	e1c33411 	bic	r3, r3, r1, lsl r4
    9688:	e5922260 	ldr	r2, [r2, #608]	; 0x260
    968c:	e1833412 	orr	r3, r3, r2, lsl r4
    9690:	e5873000 	str	r3, [r7]
    9694:	e5953000 	ldr	r3, [r5]
    9698:	e3530000 	cmp	r3, #0
    969c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    96a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96a4:	ea002116 	b	11b04 <LeaveCritical>
    96a8:	eb0020e8 	bl	11a50 <EnterCritical>
    96ac:	eaffffef 	b	9670 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    96b0:	e59f1018 	ldr	r1, [pc, #24]	; 96d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    96b4:	e3002181 	movw	r2, #385	; 0x181
    96b8:	e2810020 	add	r0, r1, #32
    96bc:	eb0022b7 	bl	121a0 <assertion_failed>
    96c0:	e59f1008 	ldr	r1, [pc, #8]	; 96d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    96c4:	e3002185 	movw	r2, #389	; 0x185
    96c8:	e2810f9a 	add	r0, r1, #616	; 0x268
    96cc:	eb0022b3 	bl	121a0 <assertion_failed>
    96d0:	00014ac8 	.word	0x00014ac8

000096d4 <CGPIOPin::InterruptHandler()>:
    96d4:	e5d03010 	ldrb	r3, [r0, #16]
    96d8:	e92d4010 	push	{r4, lr}
    96dc:	e2432002 	sub	r2, r3, #2
    96e0:	e3530000 	cmp	r3, #0
    96e4:	13520001 	cmpne	r2, #1
    96e8:	8a000013 	bhi	973c <CGPIOPin::InterruptHandler()+0x68>
    96ec:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    96f0:	e3530005 	cmp	r3, #5
    96f4:	ca000005 	bgt	9710 <CGPIOPin::InterruptHandler()+0x3c>
    96f8:	e590301c 	ldr	r3, [r0, #28]
    96fc:	e3530000 	cmp	r3, #0
    9700:	0a000009 	beq	972c <CGPIOPin::InterruptHandler()+0x58>
    9704:	e5900020 	ldr	r0, [r0, #32]
    9708:	e8bd4010 	pop	{r4, lr}
    970c:	e12fff13 	bx	r3
    9710:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9714:	e3530005 	cmp	r3, #5
    9718:	dafffff6 	ble	96f8 <CGPIOPin::InterruptHandler()+0x24>
    971c:	e59f1028 	ldr	r1, [pc, #40]	; 974c <CGPIOPin::InterruptHandler()+0x78>
    9720:	e3002196 	movw	r2, #406	; 0x196
    9724:	e2810f9e 	add	r0, r1, #632	; 0x278
    9728:	eb00229c 	bl	121a0 <assertion_failed>
    972c:	e59f1018 	ldr	r1, [pc, #24]	; 974c <CGPIOPin::InterruptHandler()+0x78>
    9730:	e3a02f66 	mov	r2, #408	; 0x198
    9734:	e2810f61 	add	r0, r1, #388	; 0x184
    9738:	eb002298 	bl	121a0 <assertion_failed>
    973c:	e59f1008 	ldr	r1, [pc, #8]	; 974c <CGPIOPin::InterruptHandler()+0x78>
    9740:	e3a02f65 	mov	r2, #404	; 0x194
    9744:	e2810090 	add	r0, r1, #144	; 0x90
    9748:	eb002294 	bl	121a0 <assertion_failed>
    974c:	00014ac8 	.word	0x00014ac8

00009750 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9750:	e3500035 	cmp	r0, #53	; 0x35
    9754:	e92d4070 	push	{r4, r5, r6, lr}
    9758:	8a00001b 	bhi	97cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
    975c:	e3076248 	movw	r6, #29256	; 0x7248
    9760:	e3406001 	movt	r6, #1
    9764:	e3a04013 	mov	r4, #19
    9768:	e3404fc8 	movt	r4, #4040	; 0xfc8
    976c:	e200501f 	and	r5, r0, #31
    9770:	e3a02001 	mov	r2, #1
    9774:	e5963000 	ldr	r3, [r6]
    9778:	e08442a0 	add	r4, r4, r0, lsr #5
    977c:	e3530000 	cmp	r3, #0
    9780:	e1a04104 	lsl	r4, r4, #2
    9784:	e1a05512 	lsl	r5, r2, r5
    9788:	1a00000c 	bne	97c0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    978c:	e3a0108b 	mov	r1, #139	; 0x8b
    9790:	e3431f20 	movt	r1, #16160	; 0x3f20
    9794:	e1e02005 	mvn	r2, r5
    9798:	e5943000 	ldr	r3, [r4]
    979c:	e0033002 	and	r3, r3, r2
    97a0:	e484300c 	str	r3, [r4], #12
    97a4:	e1540001 	cmp	r4, r1
    97a8:	9afffffa 	bls	9798 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    97ac:	e5963000 	ldr	r3, [r6]
    97b0:	e3530000 	cmp	r3, #0
    97b4:	08bd8070 	popeq	{r4, r5, r6, pc}
    97b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    97bc:	ea0020d0 	b	11b04 <LeaveCritical>
    97c0:	e1a00003 	mov	r0, r3
    97c4:	eb0020a1 	bl	11a50 <EnterCritical>
    97c8:	eaffffef 	b	978c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    97cc:	e59f1008 	ldr	r1, [pc, #8]	; 97dc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    97d0:	e300219e 	movw	r2, #414	; 0x19e
    97d4:	e2810fb1 	add	r0, r1, #708	; 0x2c4
    97d8:	eb002270 	bl	121a0 <assertion_failed>
    97dc:	00014ac8 	.word	0x00014ac8

000097e0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    97e0:	e3073248 	movw	r3, #29256	; 0x7248
    97e4:	e3403001 	movt	r3, #1
    97e8:	e3a02001 	mov	r2, #1
    97ec:	e5832000 	str	r2, [r3]
    97f0:	e12fff1e 	bx	lr

000097f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>:
    97f4:	e3a01000 	mov	r1, #0
    97f8:	e3a0c00a 	mov	ip, #10
    97fc:	ea000009 	b	9828 <CKernelOptions::GetDecimal(char const*) [clone .part.0]+0x34>
    9800:	e3530009 	cmp	r3, #9
    9804:	8a00000f 	bhi	9848 <CKernelOptions::GetDecimal(char const*) [clone .part.0]+0x54>
    9808:	e3720001 	cmn	r2, #1
    980c:	13a03000 	movne	r3, #0
    9810:	03a03001 	moveq	r3, #1
    9814:	e1510002 	cmp	r1, r2
    9818:	83833001 	orrhi	r3, r3, #1
    981c:	e1a01002 	mov	r1, r2
    9820:	e3530000 	cmp	r3, #0
    9824:	1a000007 	bne	9848 <CKernelOptions::GetDecimal(char const*) [clone .part.0]+0x54>
    9828:	e0d020d1 	ldrsb	r2, [r0], #1
    982c:	e3520000 	cmp	r2, #0
    9830:	e2423030 	sub	r3, r2, #48	; 0x30
    9834:	e022319c 	mla	r2, ip, r1, r3
    9838:	e6ef3073 	uxtb	r3, r3
    983c:	1affffef 	bne	9800 <CKernelOptions::GetDecimal(char const*) [clone .part.0]+0xc>
    9840:	e1a00001 	mov	r0, r1
    9844:	e12fff1e 	bx	lr
    9848:	e3e01000 	mvn	r1, #0
    984c:	e1a00001 	mov	r0, r1
    9850:	e12fff1e 	bx	lr

00009854 <CKernelOptions::~CKernelOptions()>:
    9854:	e92d4070 	push	{r4, r5, r6, lr}
    9858:	e1a05000 	mov	r5, r0
    985c:	e5904890 	ldr	r4, [r0, #2192]	; 0x890
    9860:	e3540000 	cmp	r4, #0
    9864:	0a00000f 	beq	98a8 <CKernelOptions::~CKernelOptions()+0x54>
    9868:	e5940008 	ldr	r0, [r4, #8]
    986c:	e5943000 	ldr	r3, [r4]
    9870:	e3500000 	cmp	r0, #0
    9874:	e5853890 	str	r3, [r5, #2192]	; 0x890
    9878:	0a000000 	beq	9880 <CKernelOptions::~CKernelOptions()+0x2c>
    987c:	eb001cc0 	bl	10b84 <operator delete[](void*)>
    9880:	e5940004 	ldr	r0, [r4, #4]
    9884:	e3500000 	cmp	r0, #0
    9888:	0a000000 	beq	9890 <CKernelOptions::~CKernelOptions()+0x3c>
    988c:	eb001cbc 	bl	10b84 <operator delete[](void*)>
    9890:	e1a00004 	mov	r0, r4
    9894:	e3a0100c 	mov	r1, #12
    9898:	eb001cbf 	bl	10b9c <operator delete(void*, unsigned int)>
    989c:	e5954890 	ldr	r4, [r5, #2192]	; 0x890
    98a0:	e3540000 	cmp	r4, #0
    98a4:	1affffef 	bne	9868 <CKernelOptions::~CKernelOptions()+0x14>
    98a8:	e307324c 	movw	r3, #29260	; 0x724c
    98ac:	e3403001 	movt	r3, #1
    98b0:	e3a02000 	mov	r2, #0
    98b4:	e1a00005 	mov	r0, r5
    98b8:	e5832000 	str	r2, [r3]
    98bc:	e8bd8070 	pop	{r4, r5, r6, pc}

000098c0 <CKernelOptions::GetWidth() const>:
    98c0:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    98c4:	e12fff1e 	bx	lr

000098c8 <CKernelOptions::GetHeight() const>:
    98c8:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    98cc:	e12fff1e 	bx	lr

000098d0 <CKernelOptions::GetLogDevice() const>:
    98d0:	e2800e81 	add	r0, r0, #2064	; 0x810
    98d4:	e2800008 	add	r0, r0, #8
    98d8:	e12fff1e 	bx	lr

000098dc <CKernelOptions::GetLogLevel() const>:
    98dc:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    98e0:	e12fff1e 	bx	lr

000098e4 <CKernelOptions::GetKeyMap() const>:
    98e4:	e2800e83 	add	r0, r0, #2096	; 0x830
    98e8:	e12fff1e 	bx	lr

000098ec <CKernelOptions::GetUSBPowerDelay() const>:
    98ec:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    98f0:	e12fff1e 	bx	lr

000098f4 <CKernelOptions::GetUSBFullSpeed() const>:
    98f4:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    98f8:	e12fff1e 	bx	lr

000098fc <CKernelOptions::GetUSBBoost() const>:
    98fc:	e5d00839 	ldrb	r0, [r0, #2105]	; 0x839
    9900:	e12fff1e 	bx	lr

00009904 <CKernelOptions::GetUSBIgnore() const>:
    9904:	e2800e83 	add	r0, r0, #2096	; 0x830
    9908:	e280000a 	add	r0, r0, #10
    990c:	e12fff1e 	bx	lr

00009910 <CKernelOptions::GetUSBSoundChannels() const>:
    9910:	e2800e85 	add	r0, r0, #2128	; 0x850
    9914:	e12fff1e 	bx	lr

00009918 <CKernelOptions::GetSoundDevice() const>:
    9918:	e2800e85 	add	r0, r0, #2128	; 0x850
    991c:	e2800008 	add	r0, r0, #8
    9920:	e12fff1e 	bx	lr

00009924 <CKernelOptions::GetSoundOption() const>:
    9924:	e590086c 	ldr	r0, [r0, #2156]	; 0x86c
    9928:	e12fff1e 	bx	lr

0000992c <CKernelOptions::GetCPUSpeed() const>:
    992c:	e5d00870 	ldrb	r0, [r0, #2160]	; 0x870
    9930:	e12fff1e 	bx	lr

00009934 <CKernelOptions::GetSoCMaxTemp() const>:
    9934:	e5900874 	ldr	r0, [r0, #2164]	; 0x874
    9938:	e12fff1e 	bx	lr

0000993c <CKernelOptions::GetGPIOFanPin() const>:
    993c:	e5900878 	ldr	r0, [r0, #2168]	; 0x878
    9940:	e12fff1e 	bx	lr

00009944 <CKernelOptions::GetTouchScreen() const>:
    9944:	e5d0387c 	ldrb	r3, [r0, #2172]	; 0x87c
    9948:	e3530000 	cmp	r3, #0
    994c:	12800d22 	addne	r0, r0, #2176	; 0x880
    9950:	01a00003 	moveq	r0, r3
    9954:	e12fff1e 	bx	lr

00009958 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
    9958:	e92d4070 	push	{r4, r5, r6, lr}
    995c:	e1a06002 	mov	r6, r2
    9960:	e5904890 	ldr	r4, [r0, #2192]	; 0x890
    9964:	e3540000 	cmp	r4, #0
    9968:	11a05001 	movne	r5, r1
    996c:	1a000003 	bne	9980 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x28>
    9970:	ea000009 	b	999c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
    9974:	e5944000 	ldr	r4, [r4]
    9978:	e3540000 	cmp	r4, #0
    997c:	0a000006 	beq	999c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
    9980:	e1a01005 	mov	r1, r5
    9984:	e5940004 	ldr	r0, [r4, #4]
    9988:	eb001941 	bl	fe94 <strcmp>
    998c:	e3500000 	cmp	r0, #0
    9990:	1afffff7 	bne	9974 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x1c>
    9994:	e5940008 	ldr	r0, [r4, #8]
    9998:	e8bd8070 	pop	{r4, r5, r6, pc}
    999c:	e1a00006 	mov	r0, r6
    99a0:	e8bd8070 	pop	{r4, r5, r6, pc}

000099a4 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
    99a4:	e92d4070 	push	{r4, r5, r6, lr}
    99a8:	e1a06002 	mov	r6, r2
    99ac:	e5904890 	ldr	r4, [r0, #2192]	; 0x890
    99b0:	e3540000 	cmp	r4, #0
    99b4:	0a000012 	beq	9a04 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
    99b8:	e1a05001 	mov	r5, r1
    99bc:	ea000002 	b	99cc <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x28>
    99c0:	e5944000 	ldr	r4, [r4]
    99c4:	e3540000 	cmp	r4, #0
    99c8:	0a00000d 	beq	9a04 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
    99cc:	e1a01005 	mov	r1, r5
    99d0:	e5940004 	ldr	r0, [r4, #4]
    99d4:	eb00192e 	bl	fe94 <strcmp>
    99d8:	e3500000 	cmp	r0, #0
    99dc:	1afffff7 	bne	99c0 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x1c>
    99e0:	e5940008 	ldr	r0, [r4, #8]
    99e4:	e3500000 	cmp	r0, #0
    99e8:	0a000005 	beq	9a04 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
    99ec:	e1d030d0 	ldrsb	r3, [r0]
    99f0:	e3530000 	cmp	r3, #0
    99f4:	0a000002 	beq	9a04 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
    99f8:	ebffff7d 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    99fc:	e3700001 	cmn	r0, #1
    9a00:	18bd8070 	popne	{r4, r5, r6, pc}
    9a04:	e1a00006 	mov	r0, r6
    9a08:	e8bd8070 	pop	{r4, r5, r6, pc}

00009a0c <CKernelOptions::Get()>:
    9a0c:	e307324c 	movw	r3, #29260	; 0x724c
    9a10:	e3403001 	movt	r3, #1
    9a14:	e5930000 	ldr	r0, [r3]
    9a18:	e12fff1e 	bx	lr

00009a1c <CKernelOptions::GetToken()>:
    9a1c:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    9a20:	e1d320d0 	ldrsb	r2, [r3]
    9a24:	e3520000 	cmp	r2, #0
    9a28:	1a000005 	bne	9a44 <CKernelOptions::GetToken()+0x28>
    9a2c:	ea000016 	b	9a8c <CKernelOptions::GetToken()+0x70>
    9a30:	e2833001 	add	r3, r3, #1
    9a34:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    9a38:	e1d320d0 	ldrsb	r2, [r3]
    9a3c:	e3520000 	cmp	r2, #0
    9a40:	0a000011 	beq	9a8c <CKernelOptions::GetToken()+0x70>
    9a44:	e3520020 	cmp	r2, #32
    9a48:	0afffff8 	beq	9a30 <CKernelOptions::GetToken()+0x14>
    9a4c:	e1a02003 	mov	r2, r3
    9a50:	ea000000 	b	9a58 <CKernelOptions::GetToken()+0x3c>
    9a54:	e1a02001 	mov	r2, r1
    9a58:	e2821001 	add	r1, r2, #1
    9a5c:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    9a60:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    9a64:	e35c0000 	cmp	ip, #0
    9a68:	0a000008 	beq	9a90 <CKernelOptions::GetToken()+0x74>
    9a6c:	e35c0020 	cmp	ip, #32
    9a70:	1afffff7 	bne	9a54 <CKernelOptions::GetToken()+0x38>
    9a74:	e2822002 	add	r2, r2, #2
    9a78:	e3a0c000 	mov	ip, #0
    9a7c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    9a80:	e1a00003 	mov	r0, r3
    9a84:	e5c1c000 	strb	ip, [r1]
    9a88:	e12fff1e 	bx	lr
    9a8c:	e3a03000 	mov	r3, #0
    9a90:	e1a00003 	mov	r0, r3
    9a94:	e12fff1e 	bx	lr

00009a98 <CKernelOptions::GetOptionValue(char*)>:
    9a98:	e1d030d0 	ldrsb	r3, [r0]
    9a9c:	e3530000 	cmp	r3, #0
    9aa0:	1a000003 	bne	9ab4 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9aa4:	ea000007 	b	9ac8 <CKernelOptions::GetOptionValue(char*)+0x30>
    9aa8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9aac:	e3530000 	cmp	r3, #0
    9ab0:	0a000004 	beq	9ac8 <CKernelOptions::GetOptionValue(char*)+0x30>
    9ab4:	e353003d 	cmp	r3, #61	; 0x3d
    9ab8:	1afffffa 	bne	9aa8 <CKernelOptions::GetOptionValue(char*)+0x10>
    9abc:	e3a02000 	mov	r2, #0
    9ac0:	e2803001 	add	r3, r0, #1
    9ac4:	e5c02000 	strb	r2, [r0]
    9ac8:	e1a00003 	mov	r0, r3
    9acc:	e12fff1e 	bx	lr

00009ad0 <CKernelOptions::GetDecimal(char const*)>:
    9ad0:	e2503000 	subs	r3, r0, #0
    9ad4:	0a000002 	beq	9ae4 <CKernelOptions::GetDecimal(char const*)+0x14>
    9ad8:	e1d330d0 	ldrsb	r3, [r3]
    9adc:	e3530000 	cmp	r3, #0
    9ae0:	1a000001 	bne	9aec <CKernelOptions::GetDecimal(char const*)+0x1c>
    9ae4:	e3e00000 	mvn	r0, #0
    9ae8:	e12fff1e 	bx	lr
    9aec:	eaffff40 	b	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>

00009af0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
    9af0:	e3520000 	cmp	r2, #0
    9af4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9af8:	e24dd00c 	sub	sp, sp, #12
    9afc:	0a000024 	beq	9b94 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
    9b00:	e3046da0 	movw	r6, #19872	; 0x4da0
    9b04:	e3406001 	movt	r6, #1
    9b08:	e2425001 	sub	r5, r2, #1
    9b0c:	e1a04001 	mov	r4, r1
    9b10:	e28d7004 	add	r7, sp, #4
    9b14:	e1a02007 	mov	r2, r7
    9b18:	e1a01006 	mov	r1, r6
    9b1c:	eb0019ed 	bl	102d8 <strtok_r>
    9b20:	e2503000 	subs	r3, r0, #0
    9b24:	0a000002 	beq	9b34 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x44>
    9b28:	e1d330d0 	ldrsb	r3, [r3]
    9b2c:	e3530000 	cmp	r3, #0
    9b30:	1a000002 	bne	9b40 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x50>
    9b34:	e1a00003 	mov	r0, r3
    9b38:	e28dd00c 	add	sp, sp, #12
    9b3c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9b40:	ebffff2b 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    9b44:	e3700001 	cmn	r0, #1
    9b48:	e1a03000 	mov	r3, r0
    9b4c:	e2455001 	sub	r5, r5, #1
    9b50:	e3a00000 	mov	r0, #0
    9b54:	0a00000c 	beq	9b8c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x9c>
    9b58:	e3750001 	cmn	r5, #1
    9b5c:	e4843004 	str	r3, [r4], #4
    9b60:	1affffeb 	bne	9b14 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x24>
    9b64:	e1a02007 	mov	r2, r7
    9b68:	e3041da0 	movw	r1, #19872	; 0x4da0
    9b6c:	e3401001 	movt	r1, #1
    9b70:	e3a00000 	mov	r0, #0
    9b74:	eb0019d7 	bl	102d8 <strtok_r>
    9b78:	e16f3f10 	clz	r3, r0
    9b7c:	e1a032a3 	lsr	r3, r3, #5
    9b80:	e1a00003 	mov	r0, r3
    9b84:	e28dd00c 	add	sp, sp, #12
    9b88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9b8c:	e3a03000 	mov	r3, #0
    9b90:	eaffffe7 	b	9b34 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x44>
    9b94:	e28d7004 	add	r7, sp, #4
    9b98:	eafffff1 	b	9b64 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x74>

00009b9c <CKernelOptions::CKernelOptions()>:
    9b9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ba0:	e1a05000 	mov	r5, r0
    9ba4:	e2807e81 	add	r7, r0, #2064	; 0x810
    9ba8:	e3a04000 	mov	r4, #0
    9bac:	e3a02004 	mov	r2, #4
    9bb0:	e3a0303c 	mov	r3, #60	; 0x3c
    9bb4:	e2877008 	add	r7, r7, #8
    9bb8:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9bbc:	e24dd01c 	sub	sp, sp, #28
    9bc0:	e5853874 	str	r3, [r5, #2164]	; 0x874
    9bc4:	e1a00007 	mov	r0, r7
    9bc8:	e3041da4 	movw	r1, #19876	; 0x4da4
    9bcc:	e3401001 	movt	r1, #1
    9bd0:	e5854810 	str	r4, [r5, #2064]	; 0x810
    9bd4:	e2859e83 	add	r9, r5, #2096	; 0x830
    9bd8:	e5854814 	str	r4, [r5, #2068]	; 0x814
    9bdc:	e5854834 	str	r4, [r5, #2100]	; 0x834
    9be0:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    9be4:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
    9be8:	e5854850 	str	r4, [r5, #2128]	; 0x850
    9bec:	e5854854 	str	r4, [r5, #2132]	; 0x854
    9bf0:	e585486c 	str	r4, [r5, #2156]	; 0x86c
    9bf4:	e5c54870 	strb	r4, [r5, #2160]	; 0x870
    9bf8:	e5854878 	str	r4, [r5, #2168]	; 0x878
    9bfc:	e5c5487c 	strb	r4, [r5, #2172]	; 0x87c
    9c00:	e5854890 	str	r4, [r5, #2192]	; 0x890
    9c04:	eb001957 	bl	10168 <strcpy>
    9c08:	e1a00009 	mov	r0, r9
    9c0c:	e3041dac 	movw	r1, #19884	; 0x4dac
    9c10:	e3401001 	movt	r1, #1
    9c14:	eb001953 	bl	10168 <strcpy>
    9c18:	e307324c 	movw	r3, #29260	; 0x724c
    9c1c:	e3403001 	movt	r3, #1
    9c20:	e1a01004 	mov	r1, r4
    9c24:	e5c5483a 	strb	r4, [r5, #2106]	; 0x83a
    9c28:	e5c54858 	strb	r4, [r5, #2136]	; 0x858
    9c2c:	e28d0010 	add	r0, sp, #16
    9c30:	e5835000 	str	r5, [r3]
    9c34:	eb0022c1 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9c38:	e58d4000 	str	r4, [sp]
    9c3c:	e1a02005 	mov	r2, r5
    9c40:	e28d0010 	add	r0, sp, #16
    9c44:	e3a01001 	mov	r1, #1
    9c48:	e3401005 	movt	r1, #5
    9c4c:	e300380c 	movw	r3, #2060	; 0x80c
    9c50:	eb0022c6 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9c54:	e1500004 	cmp	r0, r4
    9c58:	0a00003d 	beq	9d54 <CKernelOptions::CKernelOptions()+0x1b8>
    9c5c:	e5953008 	ldr	r3, [r5, #8]
    9c60:	e3530b02 	cmp	r3, #2048	; 0x800
    9c64:	2a00003a 	bcs	9d54 <CKernelOptions::CKernelOptions()+0x1b8>
    9c68:	e0853003 	add	r3, r5, r3
    9c6c:	e285200c 	add	r2, r5, #12
    9c70:	e3046e70 	movw	r6, #20080	; 0x4e70
    9c74:	e3406001 	movt	r6, #1
    9c78:	e3048db0 	movw	r8, #19888	; 0x4db0
    9c7c:	e3408001 	movt	r8, #1
    9c80:	e5c3400c 	strb	r4, [r3, #12]
    9c84:	e3043db8 	movw	r3, #19896	; 0x4db8
    9c88:	e3403001 	movt	r3, #1
    9c8c:	e58d300c 	str	r3, [sp, #12]
    9c90:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    9c94:	e1a00005 	mov	r0, r5
    9c98:	ebffff5f 	bl	9a1c <CKernelOptions::GetToken()>
    9c9c:	e250b000 	subs	fp, r0, #0
    9ca0:	0a00002b 	beq	9d54 <CKernelOptions::CKernelOptions()+0x1b8>
    9ca4:	e1db30d0 	ldrsb	r3, [fp]
    9ca8:	e3530000 	cmp	r3, #0
    9cac:	0a000008 	beq	9cd4 <CKernelOptions::CKernelOptions()+0x138>
    9cb0:	e353003d 	cmp	r3, #61	; 0x3d
    9cb4:	e1a0400b 	mov	r4, fp
    9cb8:	1a000002 	bne	9cc8 <CKernelOptions::CKernelOptions()+0x12c>
    9cbc:	ea000029 	b	9d68 <CKernelOptions::CKernelOptions()+0x1cc>
    9cc0:	e353003d 	cmp	r3, #61	; 0x3d
    9cc4:	0a000027 	beq	9d68 <CKernelOptions::CKernelOptions()+0x1cc>
    9cc8:	e1f430d1 	ldrsb	r3, [r4, #1]!
    9ccc:	e3530000 	cmp	r3, #0
    9cd0:	1afffffa 	bne	9cc0 <CKernelOptions::CKernelOptions()+0x124>
    9cd4:	e1a01006 	mov	r1, r6
    9cd8:	e1a0000b 	mov	r0, fp
    9cdc:	eb00186c 	bl	fe94 <strcmp>
    9ce0:	e3500000 	cmp	r0, #0
    9ce4:	0affffea 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9ce8:	e1a01008 	mov	r1, r8
    9cec:	e1a0000b 	mov	r0, fp
    9cf0:	eb001867 	bl	fe94 <strcmp>
    9cf4:	e3500000 	cmp	r0, #0
    9cf8:	13a0a000 	movne	sl, #0
    9cfc:	0affffe4 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9d00:	e59d100c 	ldr	r1, [sp, #12]
    9d04:	e1a0000b 	mov	r0, fp
    9d08:	eb001861 	bl	fe94 <strcmp>
    9d0c:	e2504000 	subs	r4, r0, #0
    9d10:	0a000026 	beq	9db0 <CKernelOptions::CKernelOptions()+0x214>
    9d14:	e3041dc0 	movw	r1, #19904	; 0x4dc0
    9d18:	e3401001 	movt	r1, #1
    9d1c:	e1a0000b 	mov	r0, fp
    9d20:	eb00185b 	bl	fe94 <strcmp>
    9d24:	e3500000 	cmp	r0, #0
    9d28:	1a000026 	bne	9dc8 <CKernelOptions::CKernelOptions()+0x22c>
    9d2c:	e35a0000 	cmp	sl, #0
    9d30:	0affffd7 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9d34:	e1da20d0 	ldrsb	r2, [sl]
    9d38:	e3520000 	cmp	r2, #0
    9d3c:	0affffd4 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9d40:	e1a0000a 	mov	r0, sl
    9d44:	ebfffeaa 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    9d48:	e3500004 	cmp	r0, #4
    9d4c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    9d50:	eaffffcf 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9d54:	e28d0010 	add	r0, sp, #16
    9d58:	eb00227f 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
    9d5c:	e1a00005 	mov	r0, r5
    9d60:	e28dd01c 	add	sp, sp, #28
    9d64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d68:	e3a03000 	mov	r3, #0
    9d6c:	e1a01006 	mov	r1, r6
    9d70:	e5c43000 	strb	r3, [r4]
    9d74:	e1a0000b 	mov	r0, fp
    9d78:	eb001845 	bl	fe94 <strcmp>
    9d7c:	e3500000 	cmp	r0, #0
    9d80:	e284a001 	add	sl, r4, #1
    9d84:	1a000049 	bne	9eb0 <CKernelOptions::CKernelOptions()+0x314>
    9d88:	e35a0000 	cmp	sl, #0
    9d8c:	0affffc0 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9d90:	e1d420d1 	ldrsb	r2, [r4, #1]
    9d94:	e3520000 	cmp	r2, #0
    9d98:	0affffbd 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9d9c:	e1a0000a 	mov	r0, sl
    9da0:	ebfffe93 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    9da4:	e3700001 	cmn	r0, #1
    9da8:	15850810 	strne	r0, [r5, #2064]	; 0x810
    9dac:	eaffffb8 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9db0:	e1a0100a 	mov	r1, sl
    9db4:	e3a02013 	mov	r2, #19
    9db8:	e1a00007 	mov	r0, r7
    9dbc:	eb0018f4 	bl	10194 <strncpy>
    9dc0:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    9dc4:	eaffffb2 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9dc8:	e3041dcc 	movw	r1, #19916	; 0x4dcc
    9dcc:	e3401001 	movt	r1, #1
    9dd0:	e1a0000b 	mov	r0, fp
    9dd4:	eb00182e 	bl	fe94 <strcmp>
    9dd8:	e2504000 	subs	r4, r0, #0
    9ddc:	1a000005 	bne	9df8 <CKernelOptions::CKernelOptions()+0x25c>
    9de0:	e1a0100a 	mov	r1, sl
    9de4:	e3a02002 	mov	r2, #2
    9de8:	e1a00009 	mov	r0, r9
    9dec:	eb0018e8 	bl	10194 <strncpy>
    9df0:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    9df4:	eaffffa6 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9df8:	e3041dd4 	movw	r1, #19924	; 0x4dd4
    9dfc:	e3401001 	movt	r1, #1
    9e00:	e1a0000b 	mov	r0, fp
    9e04:	eb001822 	bl	fe94 <strcmp>
    9e08:	e3500000 	cmp	r0, #0
    9e0c:	1a00000b 	bne	9e40 <CKernelOptions::CKernelOptions()+0x2a4>
    9e10:	e35a0000 	cmp	sl, #0
    9e14:	0affff9e 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9e18:	e1da20d0 	ldrsb	r2, [sl]
    9e1c:	e3520000 	cmp	r2, #0
    9e20:	0affff9b 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9e24:	e1a0000a 	mov	r0, sl
    9e28:	ebfffe71 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    9e2c:	e3013e78 	movw	r3, #7800	; 0x1e78
    9e30:	e24020c8 	sub	r2, r0, #200	; 0xc8
    9e34:	e1520003 	cmp	r2, r3
    9e38:	95850834 	strls	r0, [r5, #2100]	; 0x834
    9e3c:	eaffff94 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9e40:	e3041de4 	movw	r1, #19940	; 0x4de4
    9e44:	e3401001 	movt	r1, #1
    9e48:	e1a0000b 	mov	r0, fp
    9e4c:	eb001810 	bl	fe94 <strcmp>
    9e50:	e3500000 	cmp	r0, #0
    9e54:	1a000007 	bne	9e78 <CKernelOptions::CKernelOptions()+0x2dc>
    9e58:	e1a0000a 	mov	r0, sl
    9e5c:	e3041df0 	movw	r1, #19952	; 0x4df0
    9e60:	e3401001 	movt	r1, #1
    9e64:	eb00180a 	bl	fe94 <strcmp>
    9e68:	e3500000 	cmp	r0, #0
    9e6c:	03a03001 	moveq	r3, #1
    9e70:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    9e74:	eaffff86 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9e78:	e3041df8 	movw	r1, #19960	; 0x4df8
    9e7c:	e3401001 	movt	r1, #1
    9e80:	e1a0000b 	mov	r0, fp
    9e84:	eb001802 	bl	fe94 <strcmp>
    9e88:	e3500000 	cmp	r0, #0
    9e8c:	1a000016 	bne	9eec <CKernelOptions::CKernelOptions()+0x350>
    9e90:	e1a0000a 	mov	r0, sl
    9e94:	e3041e04 	movw	r1, #19972	; 0x4e04
    9e98:	e3401001 	movt	r1, #1
    9e9c:	eb0017fc 	bl	fe94 <strcmp>
    9ea0:	e3500000 	cmp	r0, #0
    9ea4:	03a03001 	moveq	r3, #1
    9ea8:	05c53839 	strbeq	r3, [r5, #2105]	; 0x839
    9eac:	eaffff78 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9eb0:	e1a01008 	mov	r1, r8
    9eb4:	e1a0000b 	mov	r0, fp
    9eb8:	eb0017f5 	bl	fe94 <strcmp>
    9ebc:	e3500000 	cmp	r0, #0
    9ec0:	1affff8e 	bne	9d00 <CKernelOptions::CKernelOptions()+0x164>
    9ec4:	e35a0000 	cmp	sl, #0
    9ec8:	0affff71 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9ecc:	e1d420d1 	ldrsb	r2, [r4, #1]
    9ed0:	e3520000 	cmp	r2, #0
    9ed4:	0affff6e 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9ed8:	e1a0000a 	mov	r0, sl
    9edc:	ebfffe44 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    9ee0:	e3700001 	cmn	r0, #1
    9ee4:	15850814 	strne	r0, [r5, #2068]	; 0x814
    9ee8:	eaffff69 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9eec:	e3041e0c 	movw	r1, #19980	; 0x4e0c
    9ef0:	e3401001 	movt	r1, #1
    9ef4:	e1a0000b 	mov	r0, fp
    9ef8:	eb0017e5 	bl	fe94 <strcmp>
    9efc:	e2504000 	subs	r4, r0, #0
    9f00:	1a000006 	bne	9f20 <CKernelOptions::CKernelOptions()+0x384>
    9f04:	e2850e83 	add	r0, r5, #2096	; 0x830
    9f08:	e1a0100a 	mov	r1, sl
    9f0c:	e280000a 	add	r0, r0, #10
    9f10:	e3a02013 	mov	r2, #19
    9f14:	eb00189e 	bl	10194 <strncpy>
    9f18:	e5c5484d 	strb	r4, [r5, #2125]	; 0x84d
    9f1c:	eaffff5c 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9f20:	e3041e18 	movw	r1, #19992	; 0x4e18
    9f24:	e3401001 	movt	r1, #1
    9f28:	e1a0000b 	mov	r0, fp
    9f2c:	eb0017d8 	bl	fe94 <strcmp>
    9f30:	e3500000 	cmp	r0, #0
    9f34:	1a000007 	bne	9f58 <CKernelOptions::CKernelOptions()+0x3bc>
    9f38:	e1a0000a 	mov	r0, sl
    9f3c:	e3a02002 	mov	r2, #2
    9f40:	e2851e85 	add	r1, r5, #2128	; 0x850
    9f44:	ebfffee9 	bl	9af0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    9f48:	e3500000 	cmp	r0, #0
    9f4c:	05850850 	streq	r0, [r5, #2128]	; 0x850
    9f50:	05850854 	streq	r0, [r5, #2132]	; 0x854
    9f54:	eaffff4e 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9f58:	e3041e2c 	movw	r1, #20012	; 0x4e2c
    9f5c:	e3401001 	movt	r1, #1
    9f60:	e1a0000b 	mov	r0, fp
    9f64:	eb0017ca 	bl	fe94 <strcmp>
    9f68:	e2504000 	subs	r4, r0, #0
    9f6c:	1a000006 	bne	9f8c <CKernelOptions::CKernelOptions()+0x3f0>
    9f70:	e2850e85 	add	r0, r5, #2128	; 0x850
    9f74:	e1a0100a 	mov	r1, sl
    9f78:	e2800008 	add	r0, r0, #8
    9f7c:	e3a02013 	mov	r2, #19
    9f80:	eb001883 	bl	10194 <strncpy>
    9f84:	e5c5486b 	strb	r4, [r5, #2155]	; 0x86b
    9f88:	eaffff41 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9f8c:	e3041e38 	movw	r1, #20024	; 0x4e38
    9f90:	e3401001 	movt	r1, #1
    9f94:	e1a0000b 	mov	r0, fp
    9f98:	eb0017bd 	bl	fe94 <strcmp>
    9f9c:	e3500000 	cmp	r0, #0
    9fa0:	1a00000d 	bne	9fdc <CKernelOptions::CKernelOptions()+0x440>
    9fa4:	e35a0000 	cmp	sl, #0
    9fa8:	0affff39 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9fac:	e1da20d0 	ldrsb	r2, [sl]
    9fb0:	e3520000 	cmp	r2, #0
    9fb4:	0affff36 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9fb8:	e1a0000a 	mov	r0, sl
    9fbc:	ebfffe0c 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    9fc0:	e3700001 	cmn	r0, #1
    9fc4:	0affff32 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9fc8:	e3c03008 	bic	r3, r0, #8
    9fcc:	e3530010 	cmp	r3, #16
    9fd0:	13500002 	cmpne	r0, #2
    9fd4:	9585086c 	strls	r0, [r5, #2156]	; 0x86c
    9fd8:	eaffff2d 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    9fdc:	e3041e44 	movw	r1, #20036	; 0x4e44
    9fe0:	e3401001 	movt	r1, #1
    9fe4:	e1a0000b 	mov	r0, fp
    9fe8:	eb0017a9 	bl	fe94 <strcmp>
    9fec:	e3500000 	cmp	r0, #0
    9ff0:	1a000007 	bne	a014 <CKernelOptions::CKernelOptions()+0x478>
    9ff4:	e1a0000a 	mov	r0, sl
    9ff8:	e3041e04 	movw	r1, #19972	; 0x4e04
    9ffc:	e3401001 	movt	r1, #1
    a000:	eb0017a3 	bl	fe94 <strcmp>
    a004:	e3500000 	cmp	r0, #0
    a008:	03a03001 	moveq	r3, #1
    a00c:	05c53870 	strbeq	r3, [r5, #2160]	; 0x870
    a010:	eaffff1f 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a014:	e3041e4c 	movw	r1, #20044	; 0x4e4c
    a018:	e3401001 	movt	r1, #1
    a01c:	e1a0000b 	mov	r0, fp
    a020:	eb00179b 	bl	fe94 <strcmp>
    a024:	e3500000 	cmp	r0, #0
    a028:	1a00000a 	bne	a058 <CKernelOptions::CKernelOptions()+0x4bc>
    a02c:	e35a0000 	cmp	sl, #0
    a030:	0affff17 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a034:	e1da20d0 	ldrsb	r2, [sl]
    a038:	e3520000 	cmp	r2, #0
    a03c:	0affff14 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a040:	e1a0000a 	mov	r0, sl
    a044:	ebfffdea 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    a048:	e2403028 	sub	r3, r0, #40	; 0x28
    a04c:	e3530026 	cmp	r3, #38	; 0x26
    a050:	95850874 	strls	r0, [r5, #2164]	; 0x874
    a054:	eaffff0e 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a058:	e3041e58 	movw	r1, #20056	; 0x4e58
    a05c:	e3401001 	movt	r1, #1
    a060:	e1a0000b 	mov	r0, fp
    a064:	eb00178a 	bl	fe94 <strcmp>
    a068:	e3500000 	cmp	r0, #0
    a06c:	1a00000a 	bne	a09c <CKernelOptions::CKernelOptions()+0x500>
    a070:	e35a0000 	cmp	sl, #0
    a074:	0affff06 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a078:	e1da20d0 	ldrsb	r2, [sl]
    a07c:	e3520000 	cmp	r2, #0
    a080:	0affff03 	beq	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a084:	e1a0000a 	mov	r0, sl
    a088:	ebfffdd9 	bl	97f4 <CKernelOptions::GetDecimal(char const*) [clone .part.0]>
    a08c:	e2403002 	sub	r3, r0, #2
    a090:	e3530019 	cmp	r3, #25
    a094:	95850878 	strls	r0, [r5, #2168]	; 0x878
    a098:	eafffefd 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a09c:	e3041e64 	movw	r1, #20068	; 0x4e64
    a0a0:	e3401001 	movt	r1, #1
    a0a4:	e1a0000b 	mov	r0, fp
    a0a8:	eb001779 	bl	fe94 <strcmp>
    a0ac:	e3500000 	cmp	r0, #0
    a0b0:	1a000005 	bne	a0cc <CKernelOptions::CKernelOptions()+0x530>
    a0b4:	e1a0000a 	mov	r0, sl
    a0b8:	e3a02004 	mov	r2, #4
    a0bc:	e2851d22 	add	r1, r5, #2176	; 0x880
    a0c0:	ebfffe8a 	bl	9af0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    a0c4:	e5c5087c 	strb	r0, [r5, #2172]	; 0x87c
    a0c8:	eafffef1 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>
    a0cc:	e3a0000c 	mov	r0, #12
    a0d0:	eb001aa3 	bl	10b64 <operator new(unsigned int)>
    a0d4:	e1a04000 	mov	r4, r0
    a0d8:	e1a0000b 	mov	r0, fp
    a0dc:	eb001762 	bl	fe6c <strlen>
    a0e0:	e2800001 	add	r0, r0, #1
    a0e4:	eb001a9f 	bl	10b68 <operator new[](unsigned int)>
    a0e8:	e1a0100b 	mov	r1, fp
    a0ec:	e5840004 	str	r0, [r4, #4]
    a0f0:	eb00181c 	bl	10168 <strcpy>
    a0f4:	e1a0000a 	mov	r0, sl
    a0f8:	eb00175b 	bl	fe6c <strlen>
    a0fc:	e2800001 	add	r0, r0, #1
    a100:	eb001a98 	bl	10b68 <operator new[](unsigned int)>
    a104:	e1a0100a 	mov	r1, sl
    a108:	e5840008 	str	r0, [r4, #8]
    a10c:	eb001815 	bl	10168 <strcpy>
    a110:	e5953890 	ldr	r3, [r5, #2192]	; 0x890
    a114:	e5854890 	str	r4, [r5, #2192]	; 0x890
    a118:	e5843000 	str	r3, [r4]
    a11c:	eafffedc 	b	9c94 <CKernelOptions::CKernelOptions()+0xf8>

0000a120 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    a120:	e92d4010 	push	{r4, lr}
    a124:	e1a04000 	mov	r4, r0
    a128:	e3a0c000 	mov	ip, #0
    a12c:	e3a0e001 	mov	lr, #1
    a130:	e3a00901 	mov	r0, #16384	; 0x4000
    a134:	e5c43008 	strb	r3, [r4, #8]
    a138:	e8840006 	stm	r4, {r1, r2}
    a13c:	e584c00c 	str	ip, [r4, #12]
    a140:	e584c010 	str	ip, [r4, #16]
    a144:	e584c014 	str	ip, [r4, #20]
    a148:	e584c018 	str	ip, [r4, #24]
    a14c:	e584c0e8 	str	ip, [r4, #232]	; 0xe8
    a150:	e584c0ec 	str	ip, [r4, #236]	; 0xec
    a154:	e584c0f4 	str	ip, [r4, #244]	; 0xf4
    a158:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
    a15c:	e584e01c 	str	lr, [r4, #28]
    a160:	e584e0f0 	str	lr, [r4, #240]	; 0xf0
    a164:	eb001a7f 	bl	10b68 <operator new[](unsigned int)>
    a168:	e3073250 	movw	r3, #29264	; 0x7250
    a16c:	e3403001 	movt	r3, #1
    a170:	e5840010 	str	r0, [r4, #16]
    a174:	e1a00004 	mov	r0, r4
    a178:	e5834000 	str	r4, [r3]
    a17c:	e8bd8010 	pop	{r4, pc}

0000a180 <CLogger::~CLogger()>:
    a180:	e3072250 	movw	r2, #29264	; 0x7250
    a184:	e3402001 	movt	r2, #1
    a188:	e3a01000 	mov	r1, #0
    a18c:	e92d4070 	push	{r4, r5, r6, lr}
    a190:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
    a194:	e1a04000 	mov	r4, r0
    a198:	e1a05001 	mov	r5, r1
    a19c:	e5821000 	str	r1, [r2]
    a1a0:	ea000007 	b	a1c4 <CLogger::~CLogger()+0x44>
    a1a4:	e7940100 	ldr	r0, [r4, r0, lsl #2]
    a1a8:	eb001a7b 	bl	10b9c <operator delete(void*, unsigned int)>
    a1ac:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a1b0:	e2833001 	add	r3, r3, #1
    a1b4:	e3530032 	cmp	r3, #50	; 0x32
    a1b8:	e58430ec 	str	r3, [r4, #236]	; 0xec
    a1bc:	03a03000 	moveq	r3, #0
    a1c0:	058450ec 	streq	r5, [r4, #236]	; 0xec
    a1c4:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    a1c8:	e2830008 	add	r0, r3, #8
    a1cc:	e3a01f42 	mov	r1, #264	; 0x108
    a1d0:	e1520003 	cmp	r2, r3
    a1d4:	1afffff2 	bne	a1a4 <CLogger::~CLogger()+0x24>
    a1d8:	e5940010 	ldr	r0, [r4, #16]
    a1dc:	e3500000 	cmp	r0, #0
    a1e0:	0a000000 	beq	a1e8 <CLogger::~CLogger()+0x68>
    a1e4:	eb001a66 	bl	10b84 <operator delete[](void*)>
    a1e8:	e1a00004 	mov	r0, r4
    a1ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a1f0 <CLogger::Initialize(CDevice*)>:
    a1f0:	e92d4010 	push	{r4, lr}
    a1f4:	e1a04000 	mov	r4, r0
    a1f8:	e24dd008 	sub	sp, sp, #8
    a1fc:	e580100c 	str	r1, [r0, #12]
    a200:	eb00040e 	bl	b240 <CMachineInfo::Get()>
    a204:	eb000308 	bl	ae2c <CMachineInfo::GetMachineName() const>
    a208:	e3043e78 	movw	r3, #20088	; 0x4e78
    a20c:	e3403001 	movt	r3, #1
    a210:	e3072278 	movw	r2, #29304	; 0x7278
    a214:	e3402001 	movt	r2, #1
    a218:	e58d0004 	str	r0, [sp, #4]
    a21c:	e2831018 	add	r1, r3, #24
    a220:	e1a00004 	mov	r0, r4
    a224:	e58d2000 	str	r2, [sp]
    a228:	e3a02003 	mov	r2, #3
    a22c:	eb000004 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a230:	e3a00001 	mov	r0, #1
    a234:	e28dd008 	add	sp, sp, #8
    a238:	e8bd8010 	pop	{r4, pc}

0000a23c <CLogger::SetNewTarget(CDevice*)>:
    a23c:	e580100c 	str	r1, [r0, #12]
    a240:	e12fff1e 	bx	lr

0000a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    a244:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    a248:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a24c:	e24dd010 	sub	sp, sp, #16
    a250:	e28dc018 	add	ip, sp, #24
    a254:	e59d3014 	ldr	r3, [sp, #20]
    a258:	e58dc000 	str	ip, [sp]
    a25c:	e58dc00c 	str	ip, [sp, #12]
    a260:	eb000003 	bl	a274 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    a264:	e28dd010 	add	sp, sp, #16
    a268:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a26c:	e28dd004 	add	sp, sp, #4
    a270:	e12fff1e 	bx	lr

0000a274 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    a274:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a278:	e1a07003 	mov	r7, r3
    a27c:	e1a04000 	mov	r4, r0
    a280:	e24dd024 	sub	sp, sp, #36	; 0x24
    a284:	e1a05002 	mov	r5, r2
    a288:	e1a0000d 	mov	r0, sp
    a28c:	e1a06001 	mov	r6, r1
    a290:	eb000dc5 	bl	d9ac <CString::CString()>
    a294:	e1a01007 	mov	r1, r7
    a298:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    a29c:	e1a0000d 	mov	r0, sp
    a2a0:	eb000fee 	bl	e260 <CString::FormatV(char const*, std::__va_list)>
    a2a4:	e1a0000d 	mov	r0, sp
    a2a8:	eb000df7 	bl	da8c <CString::operator char const*() const>
    a2ac:	e1a02005 	mov	r2, r5
    a2b0:	e1a03000 	mov	r3, r0
    a2b4:	e1a01006 	mov	r1, r6
    a2b8:	e1a00004 	mov	r0, r4
    a2bc:	eb000127 	bl	a760 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    a2c0:	e5943000 	ldr	r3, [r4]
    a2c4:	e1550003 	cmp	r5, r3
    a2c8:	8a00002c 	bhi	a380 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    a2cc:	e28d0010 	add	r0, sp, #16
    a2d0:	eb000db5 	bl	d9ac <CString::CString()>
    a2d4:	e3550000 	cmp	r5, #0
    a2d8:	0a00002c 	beq	a390 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
    a2dc:	e5940004 	ldr	r0, [r4, #4]
    a2e0:	e3500000 	cmp	r0, #0
    a2e4:	0a00004c 	beq	a41c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
    a2e8:	eb001450 	bl	f430 <CTimer::GetTimeString()>
    a2ec:	e2507000 	subs	r7, r0, #0
    a2f0:	0a000049 	beq	a41c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
    a2f4:	e1a00007 	mov	r0, r7
    a2f8:	eb000de3 	bl	da8c <CString::operator char const*() const>
    a2fc:	e1a01000 	mov	r1, r0
    a300:	e28d0010 	add	r0, sp, #16
    a304:	eb000e22 	bl	db94 <CString::Append(char const*)>
    a308:	e59f114c 	ldr	r1, [pc, #332]	; a45c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    a30c:	e28d0010 	add	r0, sp, #16
    a310:	eb000e1f 	bl	db94 <CString::Append(char const*)>
    a314:	e5973000 	ldr	r3, [r7]
    a318:	e1a00007 	mov	r0, r7
    a31c:	e5933004 	ldr	r3, [r3, #4]
    a320:	e12fff33 	blx	r3
    a324:	e1a01006 	mov	r1, r6
    a328:	e28d0010 	add	r0, sp, #16
    a32c:	eb000e18 	bl	db94 <CString::Append(char const*)>
    a330:	e59f1128 	ldr	r1, [pc, #296]	; a460 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    a334:	e28d0010 	add	r0, sp, #16
    a338:	eb000e15 	bl	db94 <CString::Append(char const*)>
    a33c:	e1a0000d 	mov	r0, sp
    a340:	eb000dd1 	bl	da8c <CString::operator char const*() const>
    a344:	e1a01000 	mov	r1, r0
    a348:	e28d0010 	add	r0, sp, #16
    a34c:	eb000e10 	bl	db94 <CString::Append(char const*)>
    a350:	e3550000 	cmp	r5, #0
    a354:	0a00001e 	beq	a3d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    a358:	e59f1104 	ldr	r1, [pc, #260]	; a464 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    a35c:	e28d0010 	add	r0, sp, #16
    a360:	eb000e0b 	bl	db94 <CString::Append(char const*)>
    a364:	e28d0010 	add	r0, sp, #16
    a368:	eb000dc7 	bl	da8c <CString::operator char const*() const>
    a36c:	e1a01000 	mov	r1, r0
    a370:	e1a00004 	mov	r0, r4
    a374:	eb000095 	bl	a5d0 <CLogger::Write(char const*)>
    a378:	e28d0010 	add	r0, sp, #16
    a37c:	eb000d57 	bl	d8e0 <CString::~CString()>
    a380:	e1a0000d 	mov	r0, sp
    a384:	eb000d55 	bl	d8e0 <CString::~CString()>
    a388:	e28dd024 	add	sp, sp, #36	; 0x24
    a38c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a390:	e59f10d0 	ldr	r1, [pc, #208]	; a468 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
    a394:	e28d0010 	add	r0, sp, #16
    a398:	eb000dc1 	bl	daa4 <CString::operator=(char const*)>
    a39c:	e5940004 	ldr	r0, [r4, #4]
    a3a0:	e3500000 	cmp	r0, #0
    a3a4:	1a000028 	bne	a44c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a3a8:	e1a01006 	mov	r1, r6
    a3ac:	e28d0010 	add	r0, sp, #16
    a3b0:	eb000df7 	bl	db94 <CString::Append(char const*)>
    a3b4:	e59f10a4 	ldr	r1, [pc, #164]	; a460 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    a3b8:	e28d0010 	add	r0, sp, #16
    a3bc:	eb000df4 	bl	db94 <CString::Append(char const*)>
    a3c0:	e1a0000d 	mov	r0, sp
    a3c4:	eb000db0 	bl	da8c <CString::operator char const*() const>
    a3c8:	e1a01000 	mov	r1, r0
    a3cc:	e28d0010 	add	r0, sp, #16
    a3d0:	eb000def 	bl	db94 <CString::Append(char const*)>
    a3d4:	e59f1090 	ldr	r1, [pc, #144]	; a46c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f8>
    a3d8:	e28d0010 	add	r0, sp, #16
    a3dc:	eb000dec 	bl	db94 <CString::Append(char const*)>
    a3e0:	e59f107c 	ldr	r1, [pc, #124]	; a464 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    a3e4:	e28d0010 	add	r0, sp, #16
    a3e8:	eb000de9 	bl	db94 <CString::Append(char const*)>
    a3ec:	e28d0010 	add	r0, sp, #16
    a3f0:	eb000da5 	bl	da8c <CString::operator char const*() const>
    a3f4:	e1a01000 	mov	r1, r0
    a3f8:	e1a00004 	mov	r0, r4
    a3fc:	eb000073 	bl	a5d0 <CLogger::Write(char const*)>
    a400:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    a404:	e3530000 	cmp	r3, #0
    a408:	0a000000 	beq	a410 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
    a40c:	e12fff33 	blx	r3
    a410:	e3a000ff 	mov	r0, #255	; 0xff
    a414:	eb0012a3 	bl	eea8 <set_qemu_exit_status>
    a418:	eb0012a6 	bl	eeb8 <halt>
    a41c:	e1a01006 	mov	r1, r6
    a420:	e28d0010 	add	r0, sp, #16
    a424:	eb000dda 	bl	db94 <CString::Append(char const*)>
    a428:	e59f1030 	ldr	r1, [pc, #48]	; a460 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    a42c:	e28d0010 	add	r0, sp, #16
    a430:	eb000dd7 	bl	db94 <CString::Append(char const*)>
    a434:	e1a0000d 	mov	r0, sp
    a438:	eb000d93 	bl	da8c <CString::operator char const*() const>
    a43c:	e1a01000 	mov	r1, r0
    a440:	e28d0010 	add	r0, sp, #16
    a444:	eb000dd2 	bl	db94 <CString::Append(char const*)>
    a448:	eaffffc2 	b	a358 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    a44c:	eb0013f7 	bl	f430 <CTimer::GetTimeString()>
    a450:	e2507000 	subs	r7, r0, #0
    a454:	1affffa6 	bne	a2f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
    a458:	eaffffd2 	b	a3a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    a45c:	00014ea0 	.word	0x00014ea0
    a460:	00014ea4 	.word	0x00014ea4
    a464:	00014eb0 	.word	0x00014eb0
    a468:	00014e98 	.word	0x00014e98
    a46c:	00014ea8 	.word	0x00014ea8

0000a470 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    a470:	e92d4070 	push	{r4, r5, r6, lr}
    a474:	e590e000 	ldr	lr, [r0]
    a478:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    a47c:	e152000e 	cmp	r2, lr
    a480:	8a000013 	bhi	a4d4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
    a484:	e3520000 	cmp	r2, #0
    a488:	e1a05003 	mov	r5, r3
    a48c:	e3a03000 	mov	r3, #0
    a490:	e1a04000 	mov	r4, r0
    a494:	e5cd3000 	strb	r3, [sp]
    a498:	0a00000f 	beq	a4dc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    a49c:	e1a0000d 	mov	r0, sp
    a4a0:	eb00174e 	bl	101e0 <strcat>
    a4a4:	e59f1094 	ldr	r1, [pc, #148]	; a540 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    a4a8:	e1a0000d 	mov	r0, sp
    a4ac:	eb00174b 	bl	101e0 <strcat>
    a4b0:	e1a01005 	mov	r1, r5
    a4b4:	e1a0000d 	mov	r0, sp
    a4b8:	eb001748 	bl	101e0 <strcat>
    a4bc:	e59f1080 	ldr	r1, [pc, #128]	; a544 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a4c0:	e1a0000d 	mov	r0, sp
    a4c4:	eb001745 	bl	101e0 <strcat>
    a4c8:	e1a0100d 	mov	r1, sp
    a4cc:	e1a00004 	mov	r0, r4
    a4d0:	eb00003e 	bl	a5d0 <CLogger::Write(char const*)>
    a4d4:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    a4d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4dc:	e1a06001 	mov	r6, r1
    a4e0:	e1a0000d 	mov	r0, sp
    a4e4:	e59f105c 	ldr	r1, [pc, #92]	; a548 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a4e8:	eb00171e 	bl	10168 <strcpy>
    a4ec:	e1a01006 	mov	r1, r6
    a4f0:	e1a0000d 	mov	r0, sp
    a4f4:	eb001739 	bl	101e0 <strcat>
    a4f8:	e59f1040 	ldr	r1, [pc, #64]	; a540 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    a4fc:	e1a0000d 	mov	r0, sp
    a500:	eb001736 	bl	101e0 <strcat>
    a504:	e1a01005 	mov	r1, r5
    a508:	e1a0000d 	mov	r0, sp
    a50c:	eb001733 	bl	101e0 <strcat>
    a510:	e59f1034 	ldr	r1, [pc, #52]	; a54c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    a514:	e1a0000d 	mov	r0, sp
    a518:	eb001730 	bl	101e0 <strcat>
    a51c:	e59f1020 	ldr	r1, [pc, #32]	; a544 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a520:	e1a0000d 	mov	r0, sp
    a524:	eb00172d 	bl	101e0 <strcat>
    a528:	e1a0100d 	mov	r1, sp
    a52c:	e1a00004 	mov	r0, r4
    a530:	eb000026 	bl	a5d0 <CLogger::Write(char const*)>
    a534:	e3a000ff 	mov	r0, #255	; 0xff
    a538:	eb00125a 	bl	eea8 <set_qemu_exit_status>
    a53c:	eb00125d 	bl	eeb8 <halt>
    a540:	00014ea4 	.word	0x00014ea4
    a544:	00014eb0 	.word	0x00014eb0
    a548:	00014e98 	.word	0x00014e98
    a54c:	00014ea8 	.word	0x00014ea8

0000a550 <CLogger::Get()>:
    a550:	e92d4070 	push	{r4, r5, r6, lr}
    a554:	e3075250 	movw	r5, #29264	; 0x7250
    a558:	e3405001 	movt	r5, #1
    a55c:	e5954000 	ldr	r4, [r5]
    a560:	e3540000 	cmp	r4, #0
    a564:	0a000001 	beq	a570 <CLogger::Get()+0x20>
    a568:	e1a00004 	mov	r0, r4
    a56c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a570:	e3a000fc 	mov	r0, #252	; 0xfc
    a574:	eb00197a 	bl	10b64 <operator new(unsigned int)>
    a578:	e1a06000 	mov	r6, r0
    a57c:	e3a03001 	mov	r3, #1
    a580:	e3a00901 	mov	r0, #16384	; 0x4000
    a584:	e5864000 	str	r4, [r6]
    a588:	e5864004 	str	r4, [r6, #4]
    a58c:	e586400c 	str	r4, [r6, #12]
    a590:	e5864010 	str	r4, [r6, #16]
    a594:	e5864014 	str	r4, [r6, #20]
    a598:	e5864018 	str	r4, [r6, #24]
    a59c:	e58640e8 	str	r4, [r6, #232]	; 0xe8
    a5a0:	e58640ec 	str	r4, [r6, #236]	; 0xec
    a5a4:	e58640f4 	str	r4, [r6, #244]	; 0xf4
    a5a8:	e58640f8 	str	r4, [r6, #248]	; 0xf8
    a5ac:	e1a04006 	mov	r4, r6
    a5b0:	e5c63008 	strb	r3, [r6, #8]
    a5b4:	e586301c 	str	r3, [r6, #28]
    a5b8:	e58630f0 	str	r3, [r6, #240]	; 0xf0
    a5bc:	eb001969 	bl	10b68 <operator new[](unsigned int)>
    a5c0:	e5856000 	str	r6, [r5]
    a5c4:	e5860010 	str	r0, [r6, #16]
    a5c8:	e1a00004 	mov	r0, r4
    a5cc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a5d0 <CLogger::Write(char const*)>:
    a5d0:	e92d4070 	push	{r4, r5, r6, lr}
    a5d4:	e1a04000 	mov	r4, r0
    a5d8:	e1a00001 	mov	r0, r1
    a5dc:	e1a05001 	mov	r5, r1
    a5e0:	eb001621 	bl	fe6c <strlen>
    a5e4:	e1a06000 	mov	r6, r0
    a5e8:	e594000c 	ldr	r0, [r4, #12]
    a5ec:	e3500000 	cmp	r0, #0
    a5f0:	0a000004 	beq	a608 <CLogger::Write(char const*)+0x38>
    a5f4:	e5903000 	ldr	r3, [r0]
    a5f8:	e1a02006 	mov	r2, r6
    a5fc:	e1a01005 	mov	r1, r5
    a600:	e593300c 	ldr	r3, [r3, #12]
    a604:	e12fff33 	blx	r3
    a608:	e594001c 	ldr	r0, [r4, #28]
    a60c:	e3500000 	cmp	r0, #0
    a610:	1a00001c 	bne	a688 <CLogger::Write(char const*)+0xb8>
    a614:	e0850006 	add	r0, r5, r6
    a618:	e1550000 	cmp	r5, r0
    a61c:	0a000014 	beq	a674 <CLogger::Write(char const*)+0xa4>
    a620:	e0d530d1 	ldrsb	r3, [r5], #1
    a624:	e353000d 	cmp	r3, #13
    a628:	0afffffa 	beq	a618 <CLogger::Write(char const*)+0x48>
    a62c:	e5942014 	ldr	r2, [r4, #20]
    a630:	e5941010 	ldr	r1, [r4, #16]
    a634:	e7c13002 	strb	r3, [r1, r2]
    a638:	e5943014 	ldr	r3, [r4, #20]
    a63c:	e5942018 	ldr	r2, [r4, #24]
    a640:	e2833001 	add	r3, r3, #1
    a644:	e7ed3053 	ubfx	r3, r3, #0, #14
    a648:	e1530002 	cmp	r3, r2
    a64c:	e5843014 	str	r3, [r4, #20]
    a650:	1afffff0 	bne	a618 <CLogger::Write(char const*)+0x48>
    a654:	e5d41008 	ldrb	r1, [r4, #8]
    a658:	e2832001 	add	r2, r3, #1
    a65c:	e7ed2052 	ubfx	r2, r2, #0, #14
    a660:	e3510000 	cmp	r1, #0
    a664:	0a000009 	beq	a690 <CLogger::Write(char const*)+0xc0>
    a668:	e1550000 	cmp	r5, r0
    a66c:	e5842018 	str	r2, [r4, #24]
    a670:	1affffea 	bne	a620 <CLogger::Write(char const*)+0x50>
    a674:	e594301c 	ldr	r3, [r4, #28]
    a678:	e3530000 	cmp	r3, #0
    a67c:	08bd8070 	popeq	{r4, r5, r6, pc}
    a680:	e8bd4070 	pop	{r4, r5, r6, lr}
    a684:	ea001d1e 	b	11b04 <LeaveCritical>
    a688:	eb001cf0 	bl	11a50 <EnterCritical>
    a68c:	eaffffe0 	b	a614 <CLogger::Write(char const*)+0x44>
    a690:	e2433001 	sub	r3, r3, #1
    a694:	e7ed3053 	ubfx	r3, r3, #0, #14
    a698:	e5843014 	str	r3, [r4, #20]
    a69c:	eafffff4 	b	a674 <CLogger::Write(char const*)+0xa4>

0000a6a0 <CLogger::Read(void*, unsigned int, bool)>:
    a6a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a6a4:	e1a05000 	mov	r5, r0
    a6a8:	e590001c 	ldr	r0, [r0, #28]
    a6ac:	e1a04001 	mov	r4, r1
    a6b0:	e1a06002 	mov	r6, r2
    a6b4:	e3500000 	cmp	r0, #0
    a6b8:	e1a07003 	mov	r7, r3
    a6bc:	1a00001b 	bne	a730 <CLogger::Read(void*, unsigned int, bool)+0x90>
    a6c0:	e595c018 	ldr	ip, [r5, #24]
    a6c4:	e5953014 	ldr	r3, [r5, #20]
    a6c8:	e153000c 	cmp	r3, ip
    a6cc:	0a000020 	beq	a754 <CLogger::Read(void*, unsigned int, bool)+0xb4>
    a6d0:	e1a01004 	mov	r1, r4
    a6d4:	e3a04000 	mov	r4, #0
    a6d8:	ea000007 	b	a6fc <CLogger::Read(void*, unsigned int, bool)+0x5c>
    a6dc:	e595e010 	ldr	lr, [r5, #16]
    a6e0:	e2844001 	add	r4, r4, #1
    a6e4:	e19ee0dc 	ldrsb	lr, [lr, ip]
    a6e8:	e7edc050 	ubfx	ip, r0, #0, #14
    a6ec:	e4c1e001 	strb	lr, [r1], #1
    a6f0:	e5950014 	ldr	r0, [r5, #20]
    a6f4:	e15c0000 	cmp	ip, r0
    a6f8:	0a000002 	beq	a708 <CLogger::Read(void*, unsigned int, bool)+0x68>
    a6fc:	e1540006 	cmp	r4, r6
    a700:	e28c0001 	add	r0, ip, #1
    a704:	1afffff4 	bne	a6dc <CLogger::Read(void*, unsigned int, bool)+0x3c>
    a708:	e595301c 	ldr	r3, [r5, #28]
    a70c:	e3570000 	cmp	r7, #0
    a710:	1585c018 	strne	ip, [r5, #24]
    a714:	e3530000 	cmp	r3, #0
    a718:	1a000001 	bne	a724 <CLogger::Read(void*, unsigned int, bool)+0x84>
    a71c:	e1a00004 	mov	r0, r4
    a720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a724:	eb001cf6 	bl	11b04 <LeaveCritical>
    a728:	e1a00004 	mov	r0, r4
    a72c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a730:	eb001cc6 	bl	11a50 <EnterCritical>
    a734:	e595c018 	ldr	ip, [r5, #24]
    a738:	e5953014 	ldr	r3, [r5, #20]
    a73c:	e153000c 	cmp	r3, ip
    a740:	1affffe2 	bne	a6d0 <CLogger::Read(void*, unsigned int, bool)+0x30>
    a744:	e595301c 	ldr	r3, [r5, #28]
    a748:	e3530000 	cmp	r3, #0
    a74c:	0a000000 	beq	a754 <CLogger::Read(void*, unsigned int, bool)+0xb4>
    a750:	eb001ceb 	bl	11b04 <LeaveCritical>
    a754:	e3e04000 	mvn	r4, #0
    a758:	e1a00004 	mov	r0, r4
    a75c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a760 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    a760:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a764:	e1a05000 	mov	r5, r0
    a768:	e3a00f42 	mov	r0, #264	; 0x108
    a76c:	e24dd008 	sub	sp, sp, #8
    a770:	e1a07003 	mov	r7, r3
    a774:	e1a06001 	mov	r6, r1
    a778:	e1a08002 	mov	r8, r2
    a77c:	eb0018f8 	bl	10b64 <operator new(unsigned int)>
    a780:	e1a04000 	mov	r4, r0
    a784:	e1a01006 	mov	r1, r6
    a788:	e3a02032 	mov	r2, #50	; 0x32
    a78c:	e3a06000 	mov	r6, #0
    a790:	e4c08001 	strb	r8, [r0], #1
    a794:	eb00167e 	bl	10194 <strncpy>
    a798:	e1a01007 	mov	r1, r7
    a79c:	e2840033 	add	r0, r4, #51	; 0x33
    a7a0:	e3a020c8 	mov	r2, #200	; 0xc8
    a7a4:	e5c46032 	strb	r6, [r4, #50]	; 0x32
    a7a8:	eb001679 	bl	10194 <strncpy>
    a7ac:	e5950004 	ldr	r0, [r5, #4]
    a7b0:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
    a7b4:	e1500006 	cmp	r0, r6
    a7b8:	0a000004 	beq	a7d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    a7bc:	e28d2004 	add	r2, sp, #4
    a7c0:	e1a0100d 	mov	r1, sp
    a7c4:	eb0012ae 	bl	f284 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    a7c8:	e1500006 	cmp	r0, r6
    a7cc:	1a000021 	bne	a858 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    a7d0:	e59500f0 	ldr	r0, [r5, #240]	; 0xf0
    a7d4:	e3a03000 	mov	r3, #0
    a7d8:	e58430fc 	str	r3, [r4, #252]	; 0xfc
    a7dc:	e3500000 	cmp	r0, #0
    a7e0:	e5843100 	str	r3, [r4, #256]	; 0x100
    a7e4:	e5843104 	str	r3, [r4, #260]	; 0x104
    a7e8:	1a000028 	bne	a890 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x130>
    a7ec:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
    a7f0:	e2823001 	add	r3, r2, #1
    a7f4:	e2822008 	add	r2, r2, #8
    a7f8:	e3530032 	cmp	r3, #50	; 0x32
    a7fc:	e7854102 	str	r4, [r5, r2, lsl #2]
    a800:	03a02000 	moveq	r2, #0
    a804:	01a03002 	moveq	r3, r2
    a808:	058520e8 	streq	r2, [r5, #232]	; 0xe8
    a80c:	e59520ec 	ldr	r2, [r5, #236]	; 0xec
    a810:	158530e8 	strne	r3, [r5, #232]	; 0xe8
    a814:	e1520003 	cmp	r2, r3
    a818:	0a00001f 	beq	a89c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x13c>
    a81c:	e3500000 	cmp	r0, #0
    a820:	13a04000 	movne	r4, #0
    a824:	0a000005 	beq	a840 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    a828:	eb001cb5 	bl	11b04 <LeaveCritical>
    a82c:	e3540000 	cmp	r4, #0
    a830:	0a000002 	beq	a840 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
    a834:	e1a00004 	mov	r0, r4
    a838:	e3a01f42 	mov	r1, #264	; 0x108
    a83c:	eb0018d6 	bl	10b9c <operator delete(void*, unsigned int)>
    a840:	e59530f4 	ldr	r3, [r5, #244]	; 0xf4
    a844:	e3530000 	cmp	r3, #0
    a848:	0a000000 	beq	a850 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    a84c:	e12fff33 	blx	r3
    a850:	e28dd008 	add	sp, sp, #8
    a854:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a858:	e59d3004 	ldr	r3, [sp, #4]
    a85c:	e3012759 	movw	r2, #5977	; 0x1759
    a860:	e34d21b7 	movt	r2, #53687	; 0xd1b7
    a864:	e59d1000 	ldr	r1, [sp]
    a868:	e5950004 	ldr	r0, [r5, #4]
    a86c:	e0832392 	umull	r2, r3, r2, r3
    a870:	e58410fc 	str	r1, [r4, #252]	; 0xfc
    a874:	e1a036a3 	lsr	r3, r3, #13
    a878:	e5843100 	str	r3, [r4, #256]	; 0x100
    a87c:	eb001249 	bl	f1a8 <CTimer::GetTimeZone() const>
    a880:	e5840104 	str	r0, [r4, #260]	; 0x104
    a884:	e59500f0 	ldr	r0, [r5, #240]	; 0xf0
    a888:	e3500000 	cmp	r0, #0
    a88c:	0affffd6 	beq	a7ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    a890:	eb001c6e 	bl	11a50 <EnterCritical>
    a894:	e59500f0 	ldr	r0, [r5, #240]	; 0xf0
    a898:	eaffffd3 	b	a7ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    a89c:	e2832001 	add	r2, r3, #1
    a8a0:	e2833008 	add	r3, r3, #8
    a8a4:	e3520032 	cmp	r2, #50	; 0x32
    a8a8:	e7954103 	ldr	r4, [r5, r3, lsl #2]
    a8ac:	03a03000 	moveq	r3, #0
    a8b0:	158520ec 	strne	r2, [r5, #236]	; 0xec
    a8b4:	058530ec 	streq	r3, [r5, #236]	; 0xec
    a8b8:	e3500000 	cmp	r0, #0
    a8bc:	0affffda 	beq	a82c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    a8c0:	eaffffd8 	b	a828 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>

0000a8c4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    a8c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a8c8:	e1a04000 	mov	r4, r0
    a8cc:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
    a8d0:	e1a07001 	mov	r7, r1
    a8d4:	e1a08002 	mov	r8, r2
    a8d8:	e3500000 	cmp	r0, #0
    a8dc:	e1a06003 	mov	r6, r3
    a8e0:	1a000022 	bne	a970 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    a8e4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a8e8:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    a8ec:	e1530002 	cmp	r3, r2
    a8f0:	0a000028 	beq	a998 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    a8f4:	e283c001 	add	ip, r3, #1
    a8f8:	e2833008 	add	r3, r3, #8
    a8fc:	e35c0032 	cmp	ip, #50	; 0x32
    a900:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    a904:	03a03000 	moveq	r3, #0
    a908:	1584c0ec 	strne	ip, [r4, #236]	; 0xec
    a90c:	058430ec 	streq	r3, [r4, #236]	; 0xec
    a910:	e3500000 	cmp	r0, #0
    a914:	1a000021 	bne	a9a0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    a918:	e1a01005 	mov	r1, r5
    a91c:	e1a00008 	mov	r0, r8
    a920:	e4d12001 	ldrb	r2, [r1], #1
    a924:	e5c72000 	strb	r2, [r7]
    a928:	eb00160e 	bl	10168 <strcpy>
    a92c:	e2851033 	add	r1, r5, #51	; 0x33
    a930:	e1a00006 	mov	r0, r6
    a934:	eb00160b 	bl	10168 <strcpy>
    a938:	e59d1018 	ldr	r1, [sp, #24]
    a93c:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    a940:	e1a00005 	mov	r0, r5
    a944:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    a948:	e5812000 	str	r2, [r1]
    a94c:	e3a01f42 	mov	r1, #264	; 0x108
    a950:	e59d201c 	ldr	r2, [sp, #28]
    a954:	e5823000 	str	r3, [r2]
    a958:	e59d2020 	ldr	r2, [sp, #32]
    a95c:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    a960:	e5823000 	str	r3, [r2]
    a964:	eb00188c 	bl	10b9c <operator delete(void*, unsigned int)>
    a968:	e3a00001 	mov	r0, #1
    a96c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a970:	eb001c36 	bl	11a50 <EnterCritical>
    a974:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a978:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    a97c:	e1520003 	cmp	r2, r3
    a980:	159400f0 	ldrne	r0, [r4, #240]	; 0xf0
    a984:	1affffda 	bne	a8f4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    a988:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    a98c:	e3530000 	cmp	r3, #0
    a990:	0a000000 	beq	a998 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    a994:	eb001c5a 	bl	11b04 <LeaveCritical>
    a998:	e3a00000 	mov	r0, #0
    a99c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a9a0:	eb001c57 	bl	11b04 <LeaveCritical>
    a9a4:	eaffffdb 	b	a918 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000a9a8 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    a9a8:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    a9ac:	e12fff1e 	bx	lr

0000a9b0 <CLogger::RegisterPanicHandler(void (*)())>:
    a9b0:	e58010f8 	str	r1, [r0, #248]	; 0xf8
    a9b4:	e12fff1e 	bx	lr

0000a9b8 <CMachineInfo::CMachineInfo()>:
    a9b8:	e92d4810 	push	{r4, fp, lr}
    a9bc:	e28db008 	add	fp, sp, #8
    a9c0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a9c4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    a9c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9cc:	e3a02000 	mov	r2, #0
    a9d0:	e5832000 	str	r2, [r3]
    a9d4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9d8:	e3a02014 	mov	r2, #20
    a9dc:	e5c32008 	strb	r2, [r3, #8]
    a9e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9e4:	e3a02000 	mov	r2, #0
    a9e8:	e5832010 	str	r2, [r3, #16]
    a9ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9f0:	e3a02000 	mov	r2, #0
    a9f4:	e5832018 	str	r2, [r3, #24]
    a9f8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9fc:	e3a02004 	mov	r2, #4
    aa00:	e5c32020 	strb	r2, [r3, #32]
    aa04:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa08:	e3a02000 	mov	r2, #0
    aa0c:	e5832028 	str	r2, [r3, #40]	; 0x28
    aa10:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa14:	e3012f35 	movw	r2, #7989	; 0x1f35
    aa18:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    aa1c:	e3073254 	movw	r3, #29268	; 0x7254
    aa20:	e3403001 	movt	r3, #1
    aa24:	e5933000 	ldr	r3, [r3]
    aa28:	e3530000 	cmp	r3, #0
    aa2c:	0a000024 	beq	aac4 <CMachineInfo::CMachineInfo()+0x10c>
    aa30:	e3073254 	movw	r3, #29268	; 0x7254
    aa34:	e3403001 	movt	r3, #1
    aa38:	e5933000 	ldr	r3, [r3]
    aa3c:	e5932000 	ldr	r2, [r3]
    aa40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa44:	e5832000 	str	r2, [r3]
    aa48:	e3073254 	movw	r3, #29268	; 0x7254
    aa4c:	e3403001 	movt	r3, #1
    aa50:	e5933000 	ldr	r3, [r3]
    aa54:	e5d32008 	ldrb	r2, [r3, #8]
    aa58:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa5c:	e5c32008 	strb	r2, [r3, #8]
    aa60:	e3073254 	movw	r3, #29268	; 0x7254
    aa64:	e3403001 	movt	r3, #1
    aa68:	e5933000 	ldr	r3, [r3]
    aa6c:	e5932010 	ldr	r2, [r3, #16]
    aa70:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa74:	e5832010 	str	r2, [r3, #16]
    aa78:	e3073254 	movw	r3, #29268	; 0x7254
    aa7c:	e3403001 	movt	r3, #1
    aa80:	e5933000 	ldr	r3, [r3]
    aa84:	e5932018 	ldr	r2, [r3, #24]
    aa88:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa8c:	e5832018 	str	r2, [r3, #24]
    aa90:	e3073254 	movw	r3, #29268	; 0x7254
    aa94:	e3403001 	movt	r3, #1
    aa98:	e5933000 	ldr	r3, [r3]
    aa9c:	e5d32020 	ldrb	r2, [r3, #32]
    aaa0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aaa4:	e5c32020 	strb	r2, [r3, #32]
    aaa8:	e3073254 	movw	r3, #29268	; 0x7254
    aaac:	e3403001 	movt	r3, #1
    aab0:	e5933000 	ldr	r3, [r3]
    aab4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
    aab8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aabc:	e5832028 	str	r2, [r3, #40]	; 0x28
    aac0:	ea0000ca 	b	adf0 <CMachineInfo::CMachineInfo()+0x438>
    aac4:	e3073254 	movw	r3, #29268	; 0x7254
    aac8:	e3403001 	movt	r3, #1
    aacc:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
    aad0:	e5832000 	str	r2, [r3]
    aad4:	e24b3020 	sub	r3, fp, #32
    aad8:	e3a01001 	mov	r1, #1
    aadc:	e1a00003 	mov	r0, r3
    aae0:	eb001f16 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    aae4:	e24b2030 	sub	r2, fp, #48	; 0x30
    aae8:	e24b0020 	sub	r0, fp, #32
    aaec:	e3a03000 	mov	r3, #0
    aaf0:	e58d3000 	str	r3, [sp]
    aaf4:	e3a03010 	mov	r3, #16
    aaf8:	e3a01001 	mov	r1, #1
    aafc:	e3401006 	movt	r1, #6
    ab00:	eb001f1a 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ab04:	e1a03000 	mov	r3, r0
    ab08:	e3530000 	cmp	r3, #0
    ab0c:	0a000003 	beq	ab20 <CMachineInfo::CMachineInfo()+0x168>
    ab10:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    ab14:	e6ff2073 	uxth	r2, r3
    ab18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab1c:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    ab20:	e24b2040 	sub	r2, fp, #64	; 0x40
    ab24:	e24b0020 	sub	r0, fp, #32
    ab28:	e3a03000 	mov	r3, #0
    ab2c:	e58d3000 	str	r3, [sp]
    ab30:	e3a03010 	mov	r3, #16
    ab34:	e3a01002 	mov	r1, #2
    ab38:	e3401001 	movt	r1, #1
    ab3c:	eb001f0b 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ab40:	e1a03000 	mov	r3, r0
    ab44:	e2233001 	eor	r3, r3, #1
    ab48:	e6ef3073 	uxtb	r3, r3
    ab4c:	e3530000 	cmp	r3, #0
    ab50:	0a000001 	beq	ab5c <CMachineInfo::CMachineInfo()+0x1a4>
    ab54:	e3a04000 	mov	r4, #0
    ab58:	ea00009f 	b	addc <CMachineInfo::CMachineInfo()+0x424>
    ab5c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    ab60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab64:	e5832000 	str	r2, [r3]
    ab68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab6c:	e5933000 	ldr	r3, [r3]
    ab70:	e2033502 	and	r3, r3, #8388608	; 0x800000
    ab74:	e3530000 	cmp	r3, #0
    ab78:	0a000061 	beq	ad04 <CMachineInfo::CMachineInfo()+0x34c>
    ab7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab80:	e5933000 	ldr	r3, [r3]
    ab84:	e1a03223 	lsr	r3, r3, #4
    ab88:	e6ef3073 	uxtb	r3, r3
    ab8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ab90:	e3a03000 	mov	r3, #0
    ab94:	e50b3010 	str	r3, [fp, #-16]
    ab98:	e51b3010 	ldr	r3, [fp, #-16]
    ab9c:	e3530011 	cmp	r3, #17
    aba0:	8a00000e 	bhi	abe0 <CMachineInfo::CMachineInfo()+0x228>
    aba4:	e3073028 	movw	r3, #28712	; 0x7028
    aba8:	e3403001 	movt	r3, #1
    abac:	e51b2010 	ldr	r2, [fp, #-16]
    abb0:	e3a0100c 	mov	r1, #12
    abb4:	e0020291 	mul	r2, r1, r2
    abb8:	e0833002 	add	r3, r3, r2
    abbc:	e5932000 	ldr	r2, [r3]
    abc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    abc4:	e1520003 	cmp	r2, r3
    abc8:	0a000003 	beq	abdc <CMachineInfo::CMachineInfo()+0x224>
    abcc:	e51b3010 	ldr	r3, [fp, #-16]
    abd0:	e2833001 	add	r3, r3, #1
    abd4:	e50b3010 	str	r3, [fp, #-16]
    abd8:	eaffffee 	b	ab98 <CMachineInfo::CMachineInfo()+0x1e0>
    abdc:	e320f000 	nop	{0}
    abe0:	e51b3010 	ldr	r3, [fp, #-16]
    abe4:	e3530011 	cmp	r3, #17
    abe8:	9a000001 	bls	abf4 <CMachineInfo::CMachineInfo()+0x23c>
    abec:	e3a04000 	mov	r4, #0
    abf0:	ea000079 	b	addc <CMachineInfo::CMachineInfo()+0x424>
    abf4:	e3073028 	movw	r3, #28712	; 0x7028
    abf8:	e3403001 	movt	r3, #1
    abfc:	e51b2010 	ldr	r2, [fp, #-16]
    ac00:	e3a0100c 	mov	r1, #12
    ac04:	e0020291 	mul	r2, r1, r2
    ac08:	e0833002 	add	r3, r3, r2
    ac0c:	e2833004 	add	r3, r3, #4
    ac10:	e5d32000 	ldrb	r2, [r3]
    ac14:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac18:	e5c32008 	strb	r2, [r3, #8]
    ac1c:	e3073028 	movw	r3, #28712	; 0x7028
    ac20:	e3403001 	movt	r3, #1
    ac24:	e51b2010 	ldr	r2, [fp, #-16]
    ac28:	e3a0100c 	mov	r1, #12
    ac2c:	e0020291 	mul	r2, r1, r2
    ac30:	e0833002 	add	r3, r3, r2
    ac34:	e2833008 	add	r3, r3, #8
    ac38:	e5932000 	ldr	r2, [r3]
    ac3c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac40:	e5832010 	str	r2, [r3, #16]
    ac44:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac48:	e5933000 	ldr	r3, [r3]
    ac4c:	e203300f 	and	r3, r3, #15
    ac50:	e2832001 	add	r2, r3, #1
    ac54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac58:	e5832018 	str	r2, [r3, #24]
    ac5c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac60:	e5933000 	ldr	r3, [r3]
    ac64:	e1a03623 	lsr	r3, r3, #12
    ac68:	e6ef3073 	uxtb	r3, r3
    ac6c:	e203300f 	and	r3, r3, #15
    ac70:	e6ef2073 	uxtb	r2, r3
    ac74:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac78:	e5c32020 	strb	r2, [r3, #32]
    ac7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac80:	e5933000 	ldr	r3, [r3]
    ac84:	e1a03a23 	lsr	r3, r3, #20
    ac88:	e2033007 	and	r3, r3, #7
    ac8c:	e3a02c01 	mov	r2, #256	; 0x100
    ac90:	e1a03312 	lsl	r3, r2, r3
    ac94:	e1a02003 	mov	r2, r3
    ac98:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac9c:	e5832028 	str	r2, [r3, #40]	; 0x28
    aca0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aca4:	e5d33020 	ldrb	r3, [r3, #32]
    aca8:	e3530003 	cmp	r3, #3
    acac:	da000002 	ble	acbc <CMachineInfo::CMachineInfo()+0x304>
    acb0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acb4:	e3a02004 	mov	r2, #4
    acb8:	e5c32020 	strb	r2, [r3, #32]
    acbc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acc0:	e5d33008 	ldrb	r3, [r3, #8]
    acc4:	e3530003 	cmp	r3, #3
    acc8:	1a000042 	bne	add8 <CMachineInfo::CMachineInfo()+0x420>
    accc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acd0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    acd4:	e3530c01 	cmp	r3, #256	; 0x100
    acd8:	1a00003e 	bne	add8 <CMachineInfo::CMachineInfo()+0x420>
    acdc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ace0:	e5933018 	ldr	r3, [r3, #24]
    ace4:	e3530001 	cmp	r3, #1
    ace8:	1a000001 	bne	acf4 <CMachineInfo::CMachineInfo()+0x33c>
    acec:	e3a02001 	mov	r2, #1
    acf0:	ea000000 	b	acf8 <CMachineInfo::CMachineInfo()+0x340>
    acf4:	e3a02002 	mov	r2, #2
    acf8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acfc:	e5c32008 	strb	r2, [r3, #8]
    ad00:	ea000034 	b	add8 <CMachineInfo::CMachineInfo()+0x420>
    ad04:	e3a03000 	mov	r3, #0
    ad08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ad0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ad10:	e3530010 	cmp	r3, #16
    ad14:	8a00000c 	bhi	ad4c <CMachineInfo::CMachineInfo()+0x394>
    ad18:	e3063f18 	movw	r3, #28440	; 0x6f18
    ad1c:	e3403001 	movt	r3, #1
    ad20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    ad24:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    ad28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad2c:	e5933000 	ldr	r3, [r3]
    ad30:	e1520003 	cmp	r2, r3
    ad34:	0a000003 	beq	ad48 <CMachineInfo::CMachineInfo()+0x390>
    ad38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ad3c:	e2833001 	add	r3, r3, #1
    ad40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ad44:	eafffff0 	b	ad0c <CMachineInfo::CMachineInfo()+0x354>
    ad48:	e320f000 	nop	{0}
    ad4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ad50:	e3530010 	cmp	r3, #16
    ad54:	9a000001 	bls	ad60 <CMachineInfo::CMachineInfo()+0x3a8>
    ad58:	e3a04000 	mov	r4, #0
    ad5c:	ea00001e 	b	addc <CMachineInfo::CMachineInfo()+0x424>
    ad60:	e3062f18 	movw	r2, #28440	; 0x6f18
    ad64:	e3402001 	movt	r2, #1
    ad68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ad6c:	e1a03203 	lsl	r3, r3, #4
    ad70:	e0823003 	add	r3, r2, r3
    ad74:	e5d32004 	ldrb	r2, [r3, #4]
    ad78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad7c:	e5c32008 	strb	r2, [r3, #8]
    ad80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad84:	e3a02001 	mov	r2, #1
    ad88:	e5832010 	str	r2, [r3, #16]
    ad8c:	e3062f18 	movw	r2, #28440	; 0x6f18
    ad90:	e3402001 	movt	r2, #1
    ad94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ad98:	e1a03203 	lsl	r3, r3, #4
    ad9c:	e0823003 	add	r3, r2, r3
    ada0:	e5932008 	ldr	r2, [r3, #8]
    ada4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ada8:	e5832018 	str	r2, [r3, #24]
    adac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    adb0:	e3a02000 	mov	r2, #0
    adb4:	e5c32020 	strb	r2, [r3, #32]
    adb8:	e3062f18 	movw	r2, #28440	; 0x6f18
    adbc:	e3402001 	movt	r2, #1
    adc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    adc4:	e1a03203 	lsl	r3, r3, #4
    adc8:	e0823003 	add	r3, r2, r3
    adcc:	e593200c 	ldr	r2, [r3, #12]
    add0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    add4:	e5832028 	str	r2, [r3, #40]	; 0x28
    add8:	e3a04001 	mov	r4, #1
    addc:	e24b3020 	sub	r3, fp, #32
    ade0:	e1a00003 	mov	r0, r3
    ade4:	eb001e5c 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
    ade8:	e3540001 	cmp	r4, #1
    adec:	e320f000 	nop	{0}
    adf0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    adf4:	e1a00003 	mov	r0, r3
    adf8:	e24bd008 	sub	sp, fp, #8
    adfc:	e8bd8810 	pop	{r4, fp, pc}

0000ae00 <CMachineInfo::~CMachineInfo()>:
    ae00:	e3073254 	movw	r3, #29268	; 0x7254
    ae04:	e3403001 	movt	r3, #1
    ae08:	e3a01014 	mov	r1, #20
    ae0c:	e5c01008 	strb	r1, [r0, #8]
    ae10:	e5932000 	ldr	r2, [r3]
    ae14:	e1500002 	cmp	r0, r2
    ae18:	03a02000 	moveq	r2, #0
    ae1c:	05832000 	streq	r2, [r3]
    ae20:	e12fff1e 	bx	lr

0000ae24 <CMachineInfo::GetMachineModel() const>:
    ae24:	e5d00008 	ldrb	r0, [r0, #8]
    ae28:	e12fff1e 	bx	lr

0000ae2c <CMachineInfo::GetMachineName() const>:
    ae2c:	e5d02008 	ldrb	r2, [r0, #8]
    ae30:	e3063f18 	movw	r3, #28440	; 0x6f18
    ae34:	e3403001 	movt	r3, #1
    ae38:	e0833102 	add	r3, r3, r2, lsl #2
    ae3c:	e59301e8 	ldr	r0, [r3, #488]	; 0x1e8
    ae40:	e12fff1e 	bx	lr

0000ae44 <CMachineInfo::GetModelMajor() const>:
    ae44:	e5900010 	ldr	r0, [r0, #16]
    ae48:	e12fff1e 	bx	lr

0000ae4c <CMachineInfo::GetModelRevision() const>:
    ae4c:	e5900018 	ldr	r0, [r0, #24]
    ae50:	e12fff1e 	bx	lr

0000ae54 <CMachineInfo::GetSoCType() const>:
    ae54:	e5d00020 	ldrb	r0, [r0, #32]
    ae58:	e12fff1e 	bx	lr

0000ae5c <CMachineInfo::GetRAMSize() const>:
    ae5c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    ae60:	e12fff1e 	bx	lr

0000ae64 <CMachineInfo::GetSoCName() const>:
    ae64:	e5d02020 	ldrb	r2, [r0, #32]
    ae68:	e3063f18 	movw	r3, #28440	; 0x6f18
    ae6c:	e3403001 	movt	r3, #1
    ae70:	e0833102 	add	r3, r3, r2, lsl #2
    ae74:	e593023c 	ldr	r0, [r3, #572]	; 0x23c
    ae78:	e12fff1e 	bx	lr

0000ae7c <CMachineInfo::GetRevisionRaw() const>:
    ae7c:	e5900000 	ldr	r0, [r0]
    ae80:	e12fff1e 	bx	lr

0000ae84 <CMachineInfo::GetActLEDInfo() const>:
    ae84:	e5d02008 	ldrb	r2, [r0, #8]
    ae88:	e3063f18 	movw	r3, #28440	; 0x6f18
    ae8c:	e3403001 	movt	r3, #1
    ae90:	e0833102 	add	r3, r3, r2, lsl #2
    ae94:	e5930250 	ldr	r0, [r3, #592]	; 0x250
    ae98:	e12fff1e 	bx	lr

0000ae9c <CMachineInfo::GetClockRate(unsigned int) const>:
    ae9c:	e92d4070 	push	{r4, r5, r6, lr}
    aea0:	e1a04001 	mov	r4, r1
    aea4:	e1a06000 	mov	r6, r0
    aea8:	e24dd028 	sub	sp, sp, #40	; 0x28
    aeac:	e3a01000 	mov	r1, #0
    aeb0:	e28d000c 	add	r0, sp, #12
    aeb4:	eb001e21 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    aeb8:	e3a03004 	mov	r3, #4
    aebc:	e58d3000 	str	r3, [sp]
    aec0:	e28d000c 	add	r0, sp, #12
    aec4:	e28d2014 	add	r2, sp, #20
    aec8:	e3a01002 	mov	r1, #2
    aecc:	e3401003 	movt	r1, #3
    aed0:	e3a03014 	mov	r3, #20
    aed4:	e58d4020 	str	r4, [sp, #32]
    aed8:	eb001e24 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aedc:	e3500000 	cmp	r0, #0
    aee0:	0a000007 	beq	af04 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    aee4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    aee8:	e3550000 	cmp	r5, #0
    aeec:	0a000004 	beq	af04 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    aef0:	e28d000c 	add	r0, sp, #12
    aef4:	eb001e18 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
    aef8:	e1a00005 	mov	r0, r5
    aefc:	e28dd028 	add	sp, sp, #40	; 0x28
    af00:	e8bd8070 	pop	{r4, r5, r6, pc}
    af04:	e3a03004 	mov	r3, #4
    af08:	e28d2014 	add	r2, sp, #20
    af0c:	e58d3000 	str	r3, [sp]
    af10:	e3a01047 	mov	r1, #71	; 0x47
    af14:	e3401003 	movt	r1, #3
    af18:	e3a03014 	mov	r3, #20
    af1c:	e28d000c 	add	r0, sp, #12
    af20:	e58d4020 	str	r4, [sp, #32]
    af24:	eb001e11 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    af28:	e3500000 	cmp	r0, #0
    af2c:	0a000002 	beq	af3c <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
    af30:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    af34:	e3550000 	cmp	r5, #0
    af38:	1affffec 	bne	aef0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    af3c:	e2444001 	sub	r4, r4, #1
    af40:	e354000d 	cmp	r4, #13
    af44:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    af48:	ea00001e 	b	afc8 <CMachineInfo::GetClockRate(unsigned int) const+0x12c>
    af4c:	0000af9c 	.word	0x0000af9c
    af50:	0000af90 	.word	0x0000af90
    af54:	0000afc8 	.word	0x0000afc8
    af58:	0000afa8 	.word	0x0000afa8
    af5c:	0000afc8 	.word	0x0000afc8
    af60:	0000afc8 	.word	0x0000afc8
    af64:	0000afc8 	.word	0x0000afc8
    af68:	0000afc8 	.word	0x0000afc8
    af6c:	0000afc8 	.word	0x0000afc8
    af70:	0000afc8 	.word	0x0000afc8
    af74:	0000afc8 	.word	0x0000afc8
    af78:	0000af9c 	.word	0x0000af9c
    af7c:	0000afc8 	.word	0x0000afc8
    af80:	0000af84 	.word	0x0000af84
    af84:	e30658c0 	movw	r5, #26816	; 0x68c0
    af88:	e3405478 	movt	r5, #1144	; 0x478
    af8c:	eaffffd7 	b	aef0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    af90:	e3a05b1b 	mov	r5, #27648	; 0x6c00
    af94:	e34052dc 	movt	r5, #732	; 0x2dc
    af98:	eaffffd4 	b	aef0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    af9c:	e3a05ce1 	mov	r5, #57600	; 0xe100
    afa0:	e34055f5 	movt	r5, #1525	; 0x5f5
    afa4:	eaffffd1 	b	aef0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    afa8:	e5962010 	ldr	r2, [r6, #16]
    afac:	e3a03ca3 	mov	r3, #41728	; 0xa300
    afb0:	e34131e1 	movt	r3, #4577	; 0x11e1
    afb4:	e3520002 	cmp	r2, #2
    afb8:	e30b5280 	movw	r5, #45696	; 0xb280
    afbc:	e3405ee6 	movt	r5, #3814	; 0xee6
    afc0:	81a05003 	movhi	r5, r3
    afc4:	eaffffc9 	b	aef0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    afc8:	e59f1008 	ldr	r1, [pc, #8]	; afd8 <CMachineInfo::GetClockRate(unsigned int) const+0x13c>
    afcc:	e3002161 	movw	r2, #353	; 0x161
    afd0:	e2810010 	add	r0, r1, #16
    afd4:	eb001c71 	bl	121a0 <assertion_failed>
    afd8:	00015080 	.word	0x00015080

0000afdc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    afdc:	e3510036 	cmp	r1, #54	; 0x36
    afe0:	0a00000b 	beq	b014 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x38>
    afe4:	e3510037 	cmp	r1, #55	; 0x37
    afe8:	1a000004 	bne	b000 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    afec:	e5d03008 	ldrb	r3, [r0, #8]
    aff0:	e3530003 	cmp	r3, #3
    aff4:	c3a00028 	movgt	r0, #40	; 0x28
    aff8:	d3a0002d 	movle	r0, #45	; 0x2d
    affc:	e12fff1e 	bx	lr
    b000:	e59f1030 	ldr	r1, [pc, #48]	; b038 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    b004:	e3a02f69 	mov	r2, #420	; 0x1a4
    b008:	e92d4010 	push	{r4, lr}
    b00c:	e2810010 	add	r0, r1, #16
    b010:	eb001c62 	bl	121a0 <assertion_failed>
    b014:	e5d03008 	ldrb	r3, [r0, #8]
    b018:	e3530003 	cmp	r3, #3
    b01c:	d3a00028 	movle	r0, #40	; 0x28
    b020:	dafffff5 	ble	affc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x20>
    b024:	e5903010 	ldr	r3, [r0, #16]
    b028:	e3530003 	cmp	r3, #3
    b02c:	33a0002d 	movcc	r0, #45	; 0x2d
    b030:	23a00029 	movcs	r0, #41	; 0x29
    b034:	e12fff1e 	bx	lr
    b038:	00015080 	.word	0x00015080

0000b03c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    b03c:	e5903010 	ldr	r3, [r0, #16]
    b040:	e3530003 	cmp	r3, #3
    b044:	8a000006 	bhi	b064 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    b048:	e3510001 	cmp	r1, #1
    b04c:	0a00000e 	beq	b08c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    b050:	e3510006 	cmp	r1, #6
    b054:	e3a00c65 	mov	r0, #25856	; 0x6500
    b058:	e3410dcd 	movt	r0, #7629	; 0x1dcd
    b05c:	13a00000 	movne	r0, #0
    b060:	e12fff1e 	bx	lr
    b064:	e3510001 	cmp	r1, #1
    b068:	0a000004 	beq	b080 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    b06c:	e3510006 	cmp	r1, #6
    b070:	e3a00d5e 	mov	r0, #6016	; 0x1780
    b074:	e3420cb4 	movt	r0, #11444	; 0x2cb4
    b078:	13a00000 	movne	r0, #0
    b07c:	e12fff1e 	bx	lr
    b080:	e30f0980 	movw	r0, #63872	; 0xf980
    b084:	e3400337 	movt	r0, #823	; 0x337
    b088:	e12fff1e 	bx	lr
    b08c:	e3a00b3e 	mov	r0, #63488	; 0xf800
    b090:	e3400124 	movt	r0, #292	; 0x124
    b094:	e12fff1e 	bx	lr

0000b098 <CMachineInfo::GetDevice(TDeviceId) const>:
    b098:	e3510000 	cmp	r1, #0
    b09c:	1a000003 	bne	b0b0 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    b0a0:	e5d00008 	ldrb	r0, [r0, #8]
    b0a4:	e2500001 	subs	r0, r0, #1
    b0a8:	13a00001 	movne	r0, #1
    b0ac:	e12fff1e 	bx	lr
    b0b0:	e59f100c 	ldr	r1, [pc, #12]	; b0c4 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    b0b4:	e30021df 	movw	r2, #479	; 0x1df
    b0b8:	e92d4010 	push	{r4, lr}
    b0bc:	e2810010 	add	r0, r1, #16
    b0c0:	eb001c36 	bl	121a0 <assertion_failed>
    b0c4:	00015080 	.word	0x00015080

0000b0c8 <CMachineInfo::ArePWMChannelsSwapped() const>:
    b0c8:	e5d00008 	ldrb	r0, [r0, #8]
    b0cc:	e2403004 	sub	r3, r0, #4
    b0d0:	e2400006 	sub	r0, r0, #6
    b0d4:	e6ef3073 	uxtb	r3, r3
    b0d8:	e35300fb 	cmp	r3, #251	; 0xfb
    b0dc:	93a02001 	movls	r2, #1
    b0e0:	83a02000 	movhi	r2, #0
    b0e4:	e3500002 	cmp	r0, #2
    b0e8:	93a02000 	movls	r2, #0
    b0ec:	e1a00002 	mov	r0, r2
    b0f0:	e12fff1e 	bx	lr

0000b0f4 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    b0f4:	e3073254 	movw	r3, #29268	; 0x7254
    b0f8:	e3403001 	movt	r3, #1
    b0fc:	e92d4010 	push	{r4, lr}
    b100:	e5933000 	ldr	r3, [r3]
    b104:	ea000002 	b	b114 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
    b108:	e1500003 	cmp	r0, r3
    b10c:	0a000006 	beq	b12c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x38>
    b110:	e1a00003 	mov	r0, r3
    b114:	e3530000 	cmp	r3, #0
    b118:	1afffffa 	bne	b108 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x14>
    b11c:	e59f1094 	ldr	r1, [pc, #148]	; b1b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
    b120:	e3a02e1f 	mov	r2, #496	; 0x1f0
    b124:	e2810014 	add	r0, r1, #20
    b128:	eb001c1c 	bl	121a0 <assertion_failed>
    b12c:	e3d1300f 	bics	r3, r1, #15
    b130:	1a000008 	bne	b158 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x64>
    b134:	e351000b 	cmp	r1, #11
    b138:	8a00001a 	bhi	b1a8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb4>
    b13c:	e1d033b0 	ldrh	r3, [r0, #48]	; 0x30
    b140:	e1a02153 	asr	r2, r3, r1
    b144:	e3120001 	tst	r2, #1
    b148:	1a000011 	bne	b194 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa0>
    b14c:	e3a02080 	mov	r2, #128	; 0x80
    b150:	e1a00002 	mov	r0, r2
    b154:	e8bd8010 	pop	{r4, pc}
    b158:	e3510081 	cmp	r1, #129	; 0x81
    b15c:	e1d013b0 	ldrh	r1, [r0, #48]	; 0x30
    b160:	13a0300b 	movne	r3, #11
    b164:	03a03006 	moveq	r3, #6
    b168:	e1a02351 	asr	r2, r1, r3
    b16c:	e3120001 	tst	r2, #1
    b170:	1a000002 	bne	b180 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
    b174:	e2533001 	subs	r3, r3, #1
    b178:	2afffffa 	bcs	b168 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x74>
    b17c:	eafffff2 	b	b14c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x58>
    b180:	e3a0c001 	mov	ip, #1
    b184:	e1a02003 	mov	r2, r3
    b188:	e1c1331c 	bic	r3, r1, ip, lsl r3
    b18c:	e1c033b0 	strh	r3, [r0, #48]	; 0x30
    b190:	eaffffee 	b	b150 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
    b194:	e3a0c001 	mov	ip, #1
    b198:	e1a02001 	mov	r2, r1
    b19c:	e1c3311c 	bic	r3, r3, ip, lsl r1
    b1a0:	e1c033b0 	strh	r3, [r0, #48]	; 0x30
    b1a4:	eaffffe9 	b	b150 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
    b1a8:	e59f1008 	ldr	r1, [pc, #8]	; b1b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
    b1ac:	e30021f9 	movw	r2, #505	; 0x1f9
    b1b0:	e2810024 	add	r0, r1, #36	; 0x24
    b1b4:	eb001bf9 	bl	121a0 <assertion_failed>
    b1b8:	00015080 	.word	0x00015080

0000b1bc <CMachineInfo::FreeDMAChannel(unsigned int)>:
    b1bc:	e3073254 	movw	r3, #29268	; 0x7254
    b1c0:	e3403001 	movt	r3, #1
    b1c4:	e92d4010 	push	{r4, lr}
    b1c8:	e5933000 	ldr	r3, [r3]
    b1cc:	ea000002 	b	b1dc <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
    b1d0:	e1530000 	cmp	r3, r0
    b1d4:	0a000006 	beq	b1f4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
    b1d8:	e1a00003 	mov	r0, r3
    b1dc:	e3530000 	cmp	r3, #0
    b1e0:	1afffffa 	bne	b1d0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x14>
    b1e4:	e59f1050 	ldr	r1, [pc, #80]	; b23c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b1e8:	e300221d 	movw	r2, #541	; 0x21d
    b1ec:	e2810014 	add	r0, r1, #20
    b1f0:	eb001bea 	bl	121a0 <assertion_failed>
    b1f4:	e351000b 	cmp	r1, #11
    b1f8:	8a000007 	bhi	b21c <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
    b1fc:	e1d323b0 	ldrh	r2, [r3, #48]	; 0x30
    b200:	e1a00152 	asr	r0, r2, r1
    b204:	e3100001 	tst	r0, #1
    b208:	1a000007 	bne	b22c <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
    b20c:	e3a00001 	mov	r0, #1
    b210:	e1821110 	orr	r1, r2, r0, lsl r1
    b214:	e1c313b0 	strh	r1, [r3, #48]	; 0x30
    b218:	e8bd8010 	pop	{r4, pc}
    b21c:	e59f1018 	ldr	r1, [pc, #24]	; b23c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b220:	e3002225 	movw	r2, #549	; 0x225
    b224:	e2810024 	add	r0, r1, #36	; 0x24
    b228:	eb001bdc 	bl	121a0 <assertion_failed>
    b22c:	e59f1008 	ldr	r1, [pc, #8]	; b23c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b230:	e3002226 	movw	r2, #550	; 0x226
    b234:	e2810040 	add	r0, r1, #64	; 0x40
    b238:	eb001bd8 	bl	121a0 <assertion_failed>
    b23c:	00015080 	.word	0x00015080

0000b240 <CMachineInfo::Get()>:
    b240:	e3073254 	movw	r3, #29268	; 0x7254
    b244:	e3403001 	movt	r3, #1
    b248:	e5930000 	ldr	r0, [r3]
    b24c:	e3500000 	cmp	r0, #0
    b250:	0a000000 	beq	b258 <CMachineInfo::Get()+0x18>
    b254:	e12fff1e 	bx	lr
    b258:	e59f100c 	ldr	r1, [pc, #12]	; b26c <CMachineInfo::Get()+0x2c>
    b25c:	e300226f 	movw	r2, #623	; 0x26f
    b260:	e92d4010 	push	{r4, lr}
    b264:	e2810014 	add	r0, r1, #20
    b268:	eb001bcc 	bl	121a0 <assertion_failed>
    b26c:	00015080 	.word	0x00015080

0000b270 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    b270:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b274:	e1a04000 	mov	r4, r0
    b278:	e1a09001 	mov	r9, r1
    b27c:	e1a06002 	mov	r6, r2
    b280:	e1a08003 	mov	r8, r3
    b284:	e59d7020 	ldr	r7, [sp, #32]
    b288:	eb001e88 	bl	12cb0 <CDevice::CDevice()>
    b28c:	e59fc078 	ldr	ip, [pc, #120]	; b30c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x9c>
    b290:	e3a05000 	mov	r5, #0
    b294:	e584600c 	str	r6, [r4, #12]
    b298:	e284001c 	add	r0, r4, #28
    b29c:	e584c000 	str	ip, [r4]
    b2a0:	e3a06001 	mov	r6, #1
    b2a4:	e5849008 	str	r9, [r4, #8]
    b2a8:	e5c48010 	strb	r8, [r4, #16]
    b2ac:	e5847014 	str	r7, [r4, #20]
    b2b0:	e5845018 	str	r5, [r4, #24]
    b2b4:	eb001db1 	bl	12980 <CCharGenerator::CCharGenerator()>
    b2b8:	e3e03020 	mvn	r3, #32
    b2bc:	e5845020 	str	r5, [r4, #32]
    b2c0:	e1a02005 	mov	r2, r5
    b2c4:	e5845024 	str	r5, [r4, #36]	; 0x24
    b2c8:	e2840064 	add	r0, r4, #100	; 0x64
    b2cc:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b2d0:	e3a01081 	mov	r1, #129	; 0x81
    b2d4:	e5845040 	str	r5, [r4, #64]	; 0x40
    b2d8:	e5845048 	str	r5, [r4, #72]	; 0x48
    b2dc:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b2e0:	e5c45051 	strb	r5, [r4, #81]	; 0x51
    b2e4:	e1c455b4 	strh	r5, [r4, #84]	; 0x54
    b2e8:	e5c45056 	strb	r5, [r4, #86]	; 0x56
    b2ec:	e5c45057 	strb	r5, [r4, #87]	; 0x57
    b2f0:	e5c45060 	strb	r5, [r4, #96]	; 0x60
    b2f4:	e1c435b2 	strh	r3, [r4, #82]	; 0x52
    b2f8:	e5c46050 	strb	r6, [r4, #80]	; 0x50
    b2fc:	eb001ea9 	bl	12da8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    b300:	e584608c 	str	r6, [r4, #140]	; 0x8c
    b304:	e1a00004 	mov	r0, r4
    b308:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b30c:	000150f4 	.word	0x000150f4

0000b310 <CScreenDevice::~CScreenDevice()>:
    b310:	e92d4070 	push	{r4, r5, r6, lr}
    b314:	e1a04000 	mov	r4, r0
    b318:	e59f509c 	ldr	r5, [pc, #156]	; b3bc <CScreenDevice::~CScreenDevice()+0xac>
    b31c:	e5805000 	str	r5, [r0]
    b320:	ebfff5af 	bl	89e4 <CDeviceNameService::Get()>
    b324:	e5942014 	ldr	r2, [r4, #20]
    b328:	e3a03000 	mov	r3, #0
    b32c:	e245100c 	sub	r1, r5, #12
    b330:	e2822001 	add	r2, r2, #1
    b334:	ebfff5d1 	bl	8a80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    b338:	e5d43010 	ldrb	r3, [r4, #16]
    b33c:	e3530000 	cmp	r3, #0
    b340:	0a000003 	beq	b354 <CScreenDevice::~CScreenDevice()+0x44>
    b344:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    b348:	e3500000 	cmp	r0, #0
    b34c:	0a000000 	beq	b354 <CScreenDevice::~CScreenDevice()+0x44>
    b350:	eb00160b 	bl	10b84 <operator delete[](void*)>
    b354:	e5945018 	ldr	r5, [r4, #24]
    b358:	e3a03000 	mov	r3, #0
    b35c:	e5843024 	str	r3, [r4, #36]	; 0x24
    b360:	e1550003 	cmp	r5, r3
    b364:	0a000004 	beq	b37c <CScreenDevice::~CScreenDevice()+0x6c>
    b368:	e1a00005 	mov	r0, r5
    b36c:	eb001c2e 	bl	1242c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b370:	e1a00005 	mov	r0, r5
    b374:	e3a01098 	mov	r1, #152	; 0x98
    b378:	eb001607 	bl	10b9c <operator delete(void*, unsigned int)>
    b37c:	e5940020 	ldr	r0, [r4, #32]
    b380:	e3a03000 	mov	r3, #0
    b384:	e5843018 	str	r3, [r4, #24]
    b388:	e1500003 	cmp	r0, r3
    b38c:	0a000000 	beq	b394 <CScreenDevice::~CScreenDevice()+0x84>
    b390:	eb0015fb 	bl	10b84 <operator delete[](void*)>
    b394:	e3a03000 	mov	r3, #0
    b398:	e2840064 	add	r0, r4, #100	; 0x64
    b39c:	e5843020 	str	r3, [r4, #32]
    b3a0:	eb001ebd 	bl	12e9c <CDMAChannel::~CDMAChannel()>
    b3a4:	e284001c 	add	r0, r4, #28
    b3a8:	eb001d77 	bl	1298c <CCharGenerator::~CCharGenerator()>
    b3ac:	e1a00004 	mov	r0, r4
    b3b0:	eb001e11 	bl	12bfc <CDevice::~CDevice()>
    b3b4:	e1a00004 	mov	r0, r4
    b3b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b3bc:	000150f4 	.word	0x000150f4

0000b3c0 <CScreenDevice::~CScreenDevice()>:
    b3c0:	e92d4010 	push	{r4, lr}
    b3c4:	e1a04000 	mov	r4, r0
    b3c8:	ebffffd0 	bl	b310 <CScreenDevice::~CScreenDevice()>
    b3cc:	e1a00004 	mov	r0, r4
    b3d0:	e3a01090 	mov	r1, #144	; 0x90
    b3d4:	eb0015f0 	bl	10b9c <operator delete(void*, unsigned int)>
    b3d8:	e1a00004 	mov	r0, r4
    b3dc:	e8bd8010 	pop	{r4, pc}

0000b3e0 <CScreenDevice::Initialize()>:
    b3e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3e4:	e1a04000 	mov	r4, r0
    b3e8:	e5d05010 	ldrb	r5, [r0, #16]
    b3ec:	e24dd010 	sub	sp, sp, #16
    b3f0:	e3550000 	cmp	r5, #0
    b3f4:	0a00002b 	beq	b4a8 <CScreenDevice::Initialize()+0xc8>
    b3f8:	e5903008 	ldr	r3, [r0, #8]
    b3fc:	e280601c 	add	r6, r0, #28
    b400:	e590000c 	ldr	r0, [r0, #12]
    b404:	e5843030 	str	r3, [r4, #48]	; 0x30
    b408:	e5840034 	str	r0, [r4, #52]	; 0x34
    b40c:	e584302c 	str	r3, [r4, #44]	; 0x2c
    b410:	e0000390 	mul	r0, r0, r3
    b414:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    b418:	e1a00080 	lsl	r0, r0, #1
    b41c:	e5840028 	str	r0, [r4, #40]	; 0x28
    b420:	23e00000 	mvncs	r0, #0
    b424:	eb0015cf 	bl	10b68 <operator new[](unsigned int)>
    b428:	e5840024 	str	r0, [r4, #36]	; 0x24
    b42c:	e5945034 	ldr	r5, [r4, #52]	; 0x34
    b430:	e1a00006 	mov	r0, r6
    b434:	eb001d57 	bl	12998 <CCharGenerator::GetCharHeight() const>
    b438:	e735f015 	udiv	r5, r5, r0
    b43c:	e1a00006 	mov	r0, r6
    b440:	eb001d54 	bl	12998 <CCharGenerator::GetCharHeight() const>
    b444:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b448:	e3a02000 	mov	r2, #0
    b44c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b450:	e0050590 	mul	r5, r0, r5
    b454:	e5842048 	str	r2, [r4, #72]	; 0x48
    b458:	e1a00004 	mov	r0, r4
    b45c:	e5845038 	str	r5, [r4, #56]	; 0x38
    b460:	e5845044 	str	r5, [r4, #68]	; 0x44
    b464:	eb000251 	bl	bdb0 <CScreenDevice::ClearDisplayEnd()>
    b468:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
    b46c:	e3530000 	cmp	r3, #0
    b470:	1a000046 	bne	b590 <CScreenDevice::Initialize()+0x1b0>
    b474:	ebfff55a 	bl	89e4 <CDeviceNameService::Get()>
    b478:	e5942014 	ldr	r2, [r4, #20]
    b47c:	e30510e8 	movw	r1, #20712	; 0x50e8
    b480:	e3401001 	movt	r1, #1
    b484:	e2822001 	add	r2, r2, #1
    b488:	e3a03000 	mov	r3, #0
    b48c:	ebfff593 	bl	8ae0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>
    b490:	e2505000 	subs	r5, r0, #0
    b494:	13a05001 	movne	r5, #1
    b498:	0a00003f 	beq	b59c <CScreenDevice::Initialize()+0x1bc>
    b49c:	e1a00005 	mov	r0, r5
    b4a0:	e28dd010 	add	sp, sp, #16
    b4a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b4a8:	e3a00098 	mov	r0, #152	; 0x98
    b4ac:	eb0015ac 	bl	10b64 <operator new(unsigned int)>
    b4b0:	e594c014 	ldr	ip, [r4, #20]
    b4b4:	e594200c 	ldr	r2, [r4, #12]
    b4b8:	e1a06000 	mov	r6, r0
    b4bc:	e5941008 	ldr	r1, [r4, #8]
    b4c0:	e3a03010 	mov	r3, #16
    b4c4:	e58dc008 	str	ip, [sp, #8]
    b4c8:	e58d500c 	str	r5, [sp, #12]
    b4cc:	e58d5004 	str	r5, [sp, #4]
    b4d0:	e58d5000 	str	r5, [sp]
    b4d4:	eb001b7c 	bl	122cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    b4d8:	e5846018 	str	r6, [r4, #24]
    b4dc:	e1a00006 	mov	r0, r6
    b4e0:	eb001bfd 	bl	124dc <CBcmFrameBuffer::Initialize()>
    b4e4:	e3500000 	cmp	r0, #0
    b4e8:	0affffeb 	beq	b49c <CScreenDevice::Initialize()+0xbc>
    b4ec:	e5940018 	ldr	r0, [r4, #24]
    b4f0:	eb001c3c 	bl	125e8 <CBcmFrameBuffer::GetDepth() const>
    b4f4:	e3500010 	cmp	r0, #16
    b4f8:	1affffe7 	bne	b49c <CScreenDevice::Initialize()+0xbc>
    b4fc:	e5940018 	ldr	r0, [r4, #24]
    b500:	e284601c 	add	r6, r4, #28
    b504:	eb001c39 	bl	125f0 <CBcmFrameBuffer::GetBuffer() const>
    b508:	e5840024 	str	r0, [r4, #36]	; 0x24
    b50c:	e5940018 	ldr	r0, [r4, #24]
    b510:	eb001c38 	bl	125f8 <CBcmFrameBuffer::GetSize() const>
    b514:	e5840028 	str	r0, [r4, #40]	; 0x28
    b518:	e5940018 	ldr	r0, [r4, #24]
    b51c:	eb001c2f 	bl	125e0 <CBcmFrameBuffer::GetPitch() const>
    b520:	e584002c 	str	r0, [r4, #44]	; 0x2c
    b524:	e5940018 	ldr	r0, [r4, #24]
    b528:	eb001c24 	bl	125c0 <CBcmFrameBuffer::GetWidth() const>
    b52c:	e5840030 	str	r0, [r4, #48]	; 0x30
    b530:	e5940018 	ldr	r0, [r4, #24]
    b534:	eb001c23 	bl	125c8 <CBcmFrameBuffer::GetHeight() const>
    b538:	e5840034 	str	r0, [r4, #52]	; 0x34
    b53c:	e1a00006 	mov	r0, r6
    b540:	eb001d12 	bl	12990 <CCharGenerator::GetCharWidth() const>
    b544:	e1a07000 	mov	r7, r0
    b548:	e1a00006 	mov	r0, r6
    b54c:	eb001d11 	bl	12998 <CCharGenerator::GetCharHeight() const>
    b550:	e1a08000 	mov	r8, r0
    b554:	e1a00006 	mov	r0, r6
    b558:	eb001d10 	bl	129a0 <CCharGenerator::GetUnderline() const>
    b55c:	e0480000 	sub	r0, r8, r0
    b560:	e0000097 	mul	r0, r7, r0
    b564:	e3700113 	cmn	r0, #-1073741820	; 0xc0000004
    b568:	91a00080 	lslls	r0, r0, #1
    b56c:	83e00000 	mvnhi	r0, #0
    b570:	eb00157c 	bl	10b68 <operator new[](unsigned int)>
    b574:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    b578:	e5840020 	str	r0, [r4, #32]
    b57c:	e3130003 	tst	r3, #3
    b580:	01a030a3 	lsreq	r3, r3, #1
    b584:	0584302c 	streq	r3, [r4, #44]	; 0x2c
    b588:	0affffa7 	beq	b42c <CScreenDevice::Initialize()+0x4c>
    b58c:	eaffffc2 	b	b49c <CScreenDevice::Initialize()+0xbc>
    b590:	e1a00004 	mov	r0, r4
    b594:	eb0004b3 	bl	c868 <CScreenDevice::InvertCursor() [clone .part.6]>
    b598:	eaffffb5 	b	b474 <CScreenDevice::Initialize()+0x94>
    b59c:	ebfff510 	bl	89e4 <CDeviceNameService::Get()>
    b5a0:	e5942014 	ldr	r2, [r4, #20]
    b5a4:	e1a03004 	mov	r3, r4
    b5a8:	e58d5000 	str	r5, [sp]
    b5ac:	e2822001 	add	r2, r2, #1
    b5b0:	e30510e8 	movw	r1, #20712	; 0x50e8
    b5b4:	e3401001 	movt	r1, #1
    b5b8:	ebfff516 	bl	8a18 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    b5bc:	e3a05001 	mov	r5, #1
    b5c0:	eaffffb5 	b	b49c <CScreenDevice::Initialize()+0xbc>

0000b5c4 <CScreenDevice::Resize(unsigned int, unsigned int)>:
    b5c4:	e5d03010 	ldrb	r3, [r0, #16]
    b5c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b5cc:	e1a04000 	mov	r4, r0
    b5d0:	e3530000 	cmp	r3, #0
    b5d4:	e1a07001 	mov	r7, r1
    b5d8:	e1a06002 	mov	r6, r2
    b5dc:	0a000003 	beq	b5f0 <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
    b5e0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b5e4:	e3500000 	cmp	r0, #0
    b5e8:	0a000000 	beq	b5f0 <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
    b5ec:	eb001564 	bl	10b84 <operator delete[](void*)>
    b5f0:	e5945018 	ldr	r5, [r4, #24]
    b5f4:	e3a03000 	mov	r3, #0
    b5f8:	e5843024 	str	r3, [r4, #36]	; 0x24
    b5fc:	e1550003 	cmp	r5, r3
    b600:	0a000004 	beq	b618 <CScreenDevice::Resize(unsigned int, unsigned int)+0x54>
    b604:	e1a00005 	mov	r0, r5
    b608:	eb001b87 	bl	1242c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b60c:	e1a00005 	mov	r0, r5
    b610:	e3a01098 	mov	r1, #152	; 0x98
    b614:	eb001560 	bl	10b9c <operator delete(void*, unsigned int)>
    b618:	e5940020 	ldr	r0, [r4, #32]
    b61c:	e3a03000 	mov	r3, #0
    b620:	e5843018 	str	r3, [r4, #24]
    b624:	e1500003 	cmp	r0, r3
    b628:	0a000000 	beq	b630 <CScreenDevice::Resize(unsigned int, unsigned int)+0x6c>
    b62c:	eb001554 	bl	10b84 <operator delete[](void*)>
    b630:	e3e01020 	mvn	r1, #32
    b634:	e3a03000 	mov	r3, #0
    b638:	e3a02001 	mov	r2, #1
    b63c:	e5847008 	str	r7, [r4, #8]
    b640:	e584600c 	str	r6, [r4, #12]
    b644:	e1a00004 	mov	r0, r4
    b648:	e1c415b2 	strh	r1, [r4, #82]	; 0x52
    b64c:	e5843020 	str	r3, [r4, #32]
    b650:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b654:	e5843040 	str	r3, [r4, #64]	; 0x40
    b658:	e5843048 	str	r3, [r4, #72]	; 0x48
    b65c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b660:	e5c43051 	strb	r3, [r4, #81]	; 0x51
    b664:	e1c435b4 	strh	r3, [r4, #84]	; 0x54
    b668:	e5c43056 	strb	r3, [r4, #86]	; 0x56
    b66c:	e5c43057 	strb	r3, [r4, #87]	; 0x57
    b670:	e5c43060 	strb	r3, [r4, #96]	; 0x60
    b674:	e5c42050 	strb	r2, [r4, #80]	; 0x50
    b678:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b67c:	eaffff57 	b	b3e0 <CScreenDevice::Initialize()>

0000b680 <CScreenDevice::GetWidth() const>:
    b680:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    b684:	e12fff1e 	bx	lr

0000b688 <CScreenDevice::GetHeight() const>:
    b688:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    b68c:	e12fff1e 	bx	lr

0000b690 <CScreenDevice::GetColumns() const>:
    b690:	e1a03000 	mov	r3, r0
    b694:	e92d4010 	push	{r4, lr}
    b698:	e280001c 	add	r0, r0, #28
    b69c:	e5934030 	ldr	r4, [r3, #48]	; 0x30
    b6a0:	eb001cba 	bl	12990 <CCharGenerator::GetCharWidth() const>
    b6a4:	e730f014 	udiv	r0, r4, r0
    b6a8:	e8bd8010 	pop	{r4, pc}

0000b6ac <CScreenDevice::GetRows() const>:
    b6ac:	e1a03000 	mov	r3, r0
    b6b0:	e92d4010 	push	{r4, lr}
    b6b4:	e280001c 	add	r0, r0, #28
    b6b8:	e5934038 	ldr	r4, [r3, #56]	; 0x38
    b6bc:	eb001cb5 	bl	12998 <CCharGenerator::GetCharHeight() const>
    b6c0:	e730f014 	udiv	r0, r4, r0
    b6c4:	e8bd8010 	pop	{r4, pc}

0000b6c8 <CScreenDevice::GetFrameBuffer()>:
    b6c8:	e5900018 	ldr	r0, [r0, #24]
    b6cc:	e12fff1e 	bx	lr

0000b6d0 <CScreenDevice::GetStatus()>:
    b6d0:	e92d4070 	push	{r4, r5, r6, lr}
    b6d4:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b6d8:	e5914024 	ldr	r4, [r1, #36]	; 0x24
    b6dc:	e591e028 	ldr	lr, [r1, #40]	; 0x28
    b6e0:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b6e4:	e5915044 	ldr	r5, [r1, #68]	; 0x44
    b6e8:	e5804000 	str	r4, [r0]
    b6ec:	e580e004 	str	lr, [r0, #4]
    b6f0:	e5914048 	ldr	r4, [r1, #72]	; 0x48
    b6f4:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    b6f8:	e580c008 	str	ip, [r0, #8]
    b6fc:	e580200c 	str	r2, [r0, #12]
    b700:	e5d1c050 	ldrb	ip, [r1, #80]	; 0x50
    b704:	e1d125b2 	ldrh	r2, [r1, #82]	; 0x52
    b708:	e5805010 	str	r5, [r0, #16]
    b70c:	e1d165b4 	ldrh	r6, [r1, #84]	; 0x54
    b710:	e5804014 	str	r4, [r0, #20]
    b714:	e5d15056 	ldrb	r5, [r1, #86]	; 0x56
    b718:	e580e018 	str	lr, [r0, #24]
    b71c:	e5d14057 	ldrb	r4, [r1, #87]	; 0x57
    b720:	e5c0c01c 	strb	ip, [r0, #28]
    b724:	e591e058 	ldr	lr, [r1, #88]	; 0x58
    b728:	e1c021be 	strh	r2, [r0, #30]
    b72c:	e591c05c 	ldr	ip, [r1, #92]	; 0x5c
    b730:	e5d12060 	ldrb	r2, [r1, #96]	; 0x60
    b734:	e1c062b0 	strh	r6, [r0, #32]
    b738:	e5c05022 	strb	r5, [r0, #34]	; 0x22
    b73c:	e5c04023 	strb	r4, [r0, #35]	; 0x23
    b740:	e580e024 	str	lr, [r0, #36]	; 0x24
    b744:	e580c028 	str	ip, [r0, #40]	; 0x28
    b748:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    b74c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b750 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    b750:	e5902028 	ldr	r2, [r0, #40]	; 0x28
    b754:	e5913004 	ldr	r3, [r1, #4]
    b758:	e1520003 	cmp	r2, r3
    b75c:	0a000001 	beq	b768 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    b760:	e3a00000 	mov	r0, #0
    b764:	e12fff1e 	bx	lr
    b768:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    b76c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b770:	e15c0003 	cmp	ip, r3
    b774:	1afffff9 	bne	b760 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    b778:	e92d4070 	push	{r4, r5, r6, lr}
    b77c:	e1a04000 	mov	r4, r0
    b780:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    b784:	e1a05001 	mov	r5, r1
    b788:	e3500000 	cmp	r0, #0
    b78c:	1a000026 	bne	b82c <CScreenDevice::SetStatus(TScreenStatus const&)+0xdc>
    b790:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b794:	e3530000 	cmp	r3, #0
    b798:	1a000002 	bne	b7a8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b79c:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    b7a0:	e3530000 	cmp	r3, #0
    b7a4:	0a000001 	beq	b7b0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    b7a8:	e3a00000 	mov	r0, #0
    b7ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    b7b0:	e5951000 	ldr	r1, [r5]
    b7b4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    b7b8:	eb0013e6 	bl	10758 <memcpy>
    b7bc:	e285000c 	add	r0, r5, #12
    b7c0:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
    b7c4:	e595c008 	ldr	ip, [r5, #8]
    b7c8:	e3530000 	cmp	r3, #0
    b7cc:	e5d5601c 	ldrb	r6, [r5, #28]
    b7d0:	e890000f 	ldm	r0, {r0, r1, r2, r3}
    b7d4:	e584c03c 	str	ip, [r4, #60]	; 0x3c
    b7d8:	e1d5e1be 	ldrh	lr, [r5, #30]
    b7dc:	e1d5c2b0 	ldrh	ip, [r5, #32]
    b7e0:	e5840040 	str	r0, [r4, #64]	; 0x40
    b7e4:	e5841044 	str	r1, [r4, #68]	; 0x44
    b7e8:	e5d50022 	ldrb	r0, [r5, #34]	; 0x22
    b7ec:	e5d51023 	ldrb	r1, [r5, #35]	; 0x23
    b7f0:	e5842048 	str	r2, [r4, #72]	; 0x48
    b7f4:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b7f8:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    b7fc:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    b800:	e5c46050 	strb	r6, [r4, #80]	; 0x50
    b804:	e1c4e5b2 	strh	lr, [r4, #82]	; 0x52
    b808:	e1c4c5b4 	strh	ip, [r4, #84]	; 0x54
    b80c:	e5c40056 	strb	r0, [r4, #86]	; 0x56
    b810:	e5c41057 	strb	r1, [r4, #87]	; 0x57
    b814:	e5842058 	str	r2, [r4, #88]	; 0x58
    b818:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b81c:	1a00000f 	bne	b860 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    b820:	f57ff05f 	dmb	sy
    b824:	e3a00001 	mov	r0, #1
    b828:	e8bd8070 	pop	{r4, r5, r6, pc}
    b82c:	eb001887 	bl	11a50 <EnterCritical>
    b830:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b834:	e3530000 	cmp	r3, #0
    b838:	1a000003 	bne	b84c <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b83c:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b840:	e3530000 	cmp	r3, #0
    b844:	05942028 	ldreq	r2, [r4, #40]	; 0x28
    b848:	0affffd8 	beq	b7b0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
    b84c:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
    b850:	e3530000 	cmp	r3, #0
    b854:	0affffd3 	beq	b7a8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b858:	eb0018a9 	bl	11b04 <LeaveCritical>
    b85c:	eaffffd1 	b	b7a8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b860:	eb0018a7 	bl	11b04 <LeaveCritical>
    b864:	eaffffed 	b	b820 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>

0000b868 <CScreenDevice::Write(void const*, unsigned int)>:
    b868:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b86c:	e1a05000 	mov	r5, r0
    b870:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    b874:	e1a07001 	mov	r7, r1
    b878:	e1a04002 	mov	r4, r2
    b87c:	e3500000 	cmp	r0, #0
    b880:	1a000027 	bne	b924 <CScreenDevice::Write(void const*, unsigned int)+0xbc>
    b884:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    b888:	e3a02001 	mov	r2, #1
    b88c:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    b890:	e3530000 	cmp	r3, #0
    b894:	1a00001b 	bne	b908 <CScreenDevice::Write(void const*, unsigned int)+0xa0>
    b898:	e3540000 	cmp	r4, #0
    b89c:	e2446001 	sub	r6, r4, #1
    b8a0:	01a06004 	moveq	r6, r4
    b8a4:	0a00000b 	beq	b8d8 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    b8a8:	e1a04007 	mov	r4, r7
    b8ac:	e0d410d1 	ldrsb	r1, [r4], #1
    b8b0:	e1a00005 	mov	r0, r5
    b8b4:	eb00001c 	bl	b92c <CScreenDevice::Write(char)>
    b8b8:	e2643001 	rsb	r3, r4, #1
    b8bc:	e0833006 	add	r3, r3, r6
    b8c0:	e1770003 	cmn	r7, r3
    b8c4:	1afffff8 	bne	b8ac <CScreenDevice::Write(void const*, unsigned int)+0x44>
    b8c8:	e2866001 	add	r6, r6, #1
    b8cc:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    b8d0:	e3530000 	cmp	r3, #0
    b8d4:	1a000008 	bne	b8fc <CScreenDevice::Write(void const*, unsigned int)+0x94>
    b8d8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
    b8dc:	e3a02000 	mov	r2, #0
    b8e0:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    b8e4:	e1530002 	cmp	r3, r2
    b8e8:	0a000000 	beq	b8f0 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    b8ec:	eb001884 	bl	11b04 <LeaveCritical>
    b8f0:	f57ff05f 	dmb	sy
    b8f4:	e1a00006 	mov	r0, r6
    b8f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b8fc:	e1a00005 	mov	r0, r5
    b900:	eb0003d8 	bl	c868 <CScreenDevice::InvertCursor() [clone .part.6]>
    b904:	eafffff3 	b	b8d8 <CScreenDevice::Write(void const*, unsigned int)+0x70>
    b908:	e1a00005 	mov	r0, r5
    b90c:	e2446001 	sub	r6, r4, #1
    b910:	eb0003d4 	bl	c868 <CScreenDevice::InvertCursor() [clone .part.6]>
    b914:	e3540000 	cmp	r4, #0
    b918:	1affffe2 	bne	b8a8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    b91c:	e1a06004 	mov	r6, r4
    b920:	eaffffe9 	b	b8cc <CScreenDevice::Write(void const*, unsigned int)+0x64>
    b924:	eb001849 	bl	11a50 <EnterCritical>
    b928:	eaffffd5 	b	b884 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000b92c <CScreenDevice::Write(char)>:
    b92c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b930:	e92d4010 	push	{r4, lr}
    b934:	e1a04000 	mov	r4, r0
    b938:	e3530007 	cmp	r3, #7
    b93c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b940:	ea000010 	b	b988 <CScreenDevice::Write(char)+0x5c>
    b944:	0000b9d0 	.word	0x0000b9d0
    b948:	0000ba30 	.word	0x0000ba30
    b94c:	0000ba4c 	.word	0x0000ba4c
    b950:	0000baa4 	.word	0x0000baa4
    b954:	0000bb80 	.word	0x0000bb80
    b958:	0000bba0 	.word	0x0000bba0
    b95c:	0000bbc0 	.word	0x0000bbc0
    b960:	0000b994 	.word	0x0000b994
    b964:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b968:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    b96c:	e1520003 	cmp	r2, r3
    b970:	2a000004 	bcs	b988 <CScreenDevice::Write(char)+0x5c>
    b974:	e280001c 	add	r0, r0, #28
    b978:	eb001c06 	bl	12998 <CCharGenerator::GetCharHeight() const>
    b97c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b980:	e0433000 	sub	r3, r3, r0
    b984:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b988:	e3a03000 	mov	r3, #0
    b98c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b990:	e8bd8010 	pop	{r4, pc}
    b994:	e3510068 	cmp	r1, #104	; 0x68
    b998:	0a000097 	beq	bbfc <CScreenDevice::Write(char)+0x2d0>
    b99c:	e351006c 	cmp	r1, #108	; 0x6c
    b9a0:	0a000095 	beq	bbfc <CScreenDevice::Write(char)+0x2d0>
    b9a4:	e2411030 	sub	r1, r1, #48	; 0x30
    b9a8:	e6ef3071 	uxtb	r3, r1
    b9ac:	e3530009 	cmp	r3, #9
    b9b0:	8afffff4 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    b9b4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b9b8:	e3a0200a 	mov	r2, #10
    b9bc:	e0211392 	mla	r1, r2, r3, r1
    b9c0:	e3510063 	cmp	r1, #99	; 0x63
    b9c4:	e5801058 	str	r1, [r0, #88]	; 0x58
    b9c8:	8affffee 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    b9cc:	e8bd8010 	pop	{r4, pc}
    b9d0:	e2413008 	sub	r3, r1, #8
    b9d4:	e3530013 	cmp	r3, #19
    b9d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b9dc:	ea0000b5 	b	bcb8 <CScreenDevice::Write(char)+0x38c>
    b9e0:	0000bc30 	.word	0x0000bc30
    b9e4:	0000bc60 	.word	0x0000bc60
    b9e8:	0000bc50 	.word	0x0000bc50
    b9ec:	0000bcb8 	.word	0x0000bcb8
    b9f0:	0000bcb8 	.word	0x0000bcb8
    b9f4:	0000bc44 	.word	0x0000bc44
    b9f8:	0000bcb8 	.word	0x0000bcb8
    b9fc:	0000bcb8 	.word	0x0000bcb8
    ba00:	0000bcb8 	.word	0x0000bcb8
    ba04:	0000bcb8 	.word	0x0000bcb8
    ba08:	0000bcb8 	.word	0x0000bcb8
    ba0c:	0000bcb8 	.word	0x0000bcb8
    ba10:	0000bcb8 	.word	0x0000bcb8
    ba14:	0000bcb8 	.word	0x0000bcb8
    ba18:	0000bcb8 	.word	0x0000bcb8
    ba1c:	0000bcb8 	.word	0x0000bcb8
    ba20:	0000bcb8 	.word	0x0000bcb8
    ba24:	0000bcb8 	.word	0x0000bcb8
    ba28:	0000bcb8 	.word	0x0000bcb8
    ba2c:	0000bc38 	.word	0x0000bc38
    ba30:	e351004d 	cmp	r1, #77	; 0x4d
    ba34:	0affffd3 	beq	b988 <CScreenDevice::Write(char)+0x5c>
    ba38:	e351005b 	cmp	r1, #91	; 0x5b
    ba3c:	1affffd1 	bne	b988 <CScreenDevice::Write(char)+0x5c>
    ba40:	e3a03002 	mov	r3, #2
    ba44:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ba48:	e8bd8010 	pop	{r4, pc}
    ba4c:	e241303f 	sub	r3, r1, #63	; 0x3f
    ba50:	e3530011 	cmp	r3, #17
    ba54:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ba58:	ea0000c3 	b	bd6c <CScreenDevice::Write(char)+0x440>
    ba5c:	0000bccc 	.word	0x0000bccc
    ba60:	0000bd6c 	.word	0x0000bd6c
    ba64:	0000b964 	.word	0x0000b964
    ba68:	0000bd30 	.word	0x0000bd30
    ba6c:	0000bd20 	.word	0x0000bd20
    ba70:	0000bd10 	.word	0x0000bd10
    ba74:	0000bd6c 	.word	0x0000bd6c
    ba78:	0000bd6c 	.word	0x0000bd6c
    ba7c:	0000bd6c 	.word	0x0000bd6c
    ba80:	0000bcf8 	.word	0x0000bcf8
    ba84:	0000bd6c 	.word	0x0000bd6c
    ba88:	0000bce8 	.word	0x0000bce8
    ba8c:	0000bcd8 	.word	0x0000bcd8
    ba90:	0000b988 	.word	0x0000b988
    ba94:	0000b988 	.word	0x0000b988
    ba98:	0000bd6c 	.word	0x0000bd6c
    ba9c:	0000bd6c 	.word	0x0000bd6c
    baa0:	0000b988 	.word	0x0000b988
    baa4:	e241303b 	sub	r3, r1, #59	; 0x3b
    baa8:	e3530032 	cmp	r3, #50	; 0x32
    baac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bab0:	ea0000a2 	b	bd40 <CScreenDevice::Write(char)+0x414>
    bab4:	0000bcac 	.word	0x0000bcac
    bab8:	0000bd40 	.word	0x0000bd40
    babc:	0000bd40 	.word	0x0000bd40
    bac0:	0000bd40 	.word	0x0000bd40
    bac4:	0000bd40 	.word	0x0000bd40
    bac8:	0000bd40 	.word	0x0000bd40
    bacc:	0000bd40 	.word	0x0000bd40
    bad0:	0000bd40 	.word	0x0000bd40
    bad4:	0000bd40 	.word	0x0000bd40
    bad8:	0000bd40 	.word	0x0000bd40
    badc:	0000bd40 	.word	0x0000bd40
    bae0:	0000bd40 	.word	0x0000bd40
    bae4:	0000bd40 	.word	0x0000bd40
    bae8:	0000bd40 	.word	0x0000bd40
    baec:	0000bd40 	.word	0x0000bd40
    baf0:	0000bd40 	.word	0x0000bd40
    baf4:	0000bd40 	.word	0x0000bd40
    baf8:	0000b988 	.word	0x0000b988
    bafc:	0000b988 	.word	0x0000b988
    bb00:	0000bd40 	.word	0x0000bd40
    bb04:	0000bd40 	.word	0x0000bd40
    bb08:	0000b988 	.word	0x0000b988
    bb0c:	0000bd40 	.word	0x0000bd40
    bb10:	0000bd40 	.word	0x0000bd40
    bb14:	0000bd40 	.word	0x0000bd40
    bb18:	0000bd40 	.word	0x0000bd40
    bb1c:	0000bd40 	.word	0x0000bd40
    bb20:	0000bd40 	.word	0x0000bd40
    bb24:	0000bd40 	.word	0x0000bd40
    bb28:	0000bc68 	.word	0x0000bc68
    bb2c:	0000bd40 	.word	0x0000bd40
    bb30:	0000bd40 	.word	0x0000bd40
    bb34:	0000bd40 	.word	0x0000bd40
    bb38:	0000bd40 	.word	0x0000bd40
    bb3c:	0000bd40 	.word	0x0000bd40
    bb40:	0000bd40 	.word	0x0000bd40
    bb44:	0000bd40 	.word	0x0000bd40
    bb48:	0000bd40 	.word	0x0000bd40
    bb4c:	0000bd40 	.word	0x0000bd40
    bb50:	0000bd40 	.word	0x0000bd40
    bb54:	0000bd40 	.word	0x0000bd40
    bb58:	0000bd40 	.word	0x0000bd40
    bb5c:	0000bd40 	.word	0x0000bd40
    bb60:	0000bd40 	.word	0x0000bd40
    bb64:	0000bd40 	.word	0x0000bd40
    bb68:	0000bc7c 	.word	0x0000bc7c
    bb6c:	0000bd40 	.word	0x0000bd40
    bb70:	0000bd40 	.word	0x0000bd40
    bb74:	0000bd40 	.word	0x0000bd40
    bb78:	0000bc7c 	.word	0x0000bc7c
    bb7c:	0000bc98 	.word	0x0000bc98
    bb80:	e2411030 	sub	r1, r1, #48	; 0x30
    bb84:	e6ef3071 	uxtb	r3, r1
    bb88:	e3530009 	cmp	r3, #9
    bb8c:	8affff7d 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bb90:	e3a03007 	mov	r3, #7
    bb94:	e5801058 	str	r1, [r0, #88]	; 0x58
    bb98:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bb9c:	e8bd8010 	pop	{r4, pc}
    bba0:	e2411030 	sub	r1, r1, #48	; 0x30
    bba4:	e6ef3071 	uxtb	r3, r1
    bba8:	e3530009 	cmp	r3, #9
    bbac:	8affff75 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bbb0:	e3a03006 	mov	r3, #6
    bbb4:	e580105c 	str	r1, [r0, #92]	; 0x5c
    bbb8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bbbc:	e8bd8010 	pop	{r4, pc}
    bbc0:	e3510048 	cmp	r1, #72	; 0x48
    bbc4:	0a000070 	beq	bd8c <CScreenDevice::Write(char)+0x460>
    bbc8:	e3510072 	cmp	r1, #114	; 0x72
    bbcc:	0a000011 	beq	bc18 <CScreenDevice::Write(char)+0x2ec>
    bbd0:	e2411030 	sub	r1, r1, #48	; 0x30
    bbd4:	e6ef3071 	uxtb	r3, r1
    bbd8:	e3530009 	cmp	r3, #9
    bbdc:	8affff69 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bbe0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    bbe4:	e3a0200a 	mov	r2, #10
    bbe8:	e0211392 	mla	r1, r2, r3, r1
    bbec:	e35100c7 	cmp	r1, #199	; 0xc7
    bbf0:	e580105c 	str	r1, [r0, #92]	; 0x5c
    bbf4:	8affff63 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bbf8:	e8bd8010 	pop	{r4, pc}
    bbfc:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    bc00:	e3530019 	cmp	r3, #25
    bc04:	02411068 	subeq	r1, r1, #104	; 0x68
    bc08:	016f1f11 	clzeq	r1, r1
    bc0c:	01a012a1 	lsreq	r1, r1, #5
    bc10:	05c41050 	strbeq	r1, [r4, #80]	; 0x50
    bc14:	eaffff5b 	b	b988 <CScreenDevice::Write(char)+0x5c>
    bc18:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    bc1c:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    bc20:	eb00011b 	bl	c094 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    bc24:	e3a03000 	mov	r3, #0
    bc28:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bc2c:	e8bd8010 	pop	{r4, pc}
    bc30:	e8bd4010 	pop	{r4, lr}
    bc34:	ea0000ac 	b	beec <CScreenDevice::CursorLeft()>
    bc38:	e3a03001 	mov	r3, #1
    bc3c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bc40:	e8bd8010 	pop	{r4, pc}
    bc44:	e3a03000 	mov	r3, #0
    bc48:	e5803048 	str	r3, [r0, #72]	; 0x48
    bc4c:	e8bd8010 	pop	{r4, pc}
    bc50:	e3a03000 	mov	r3, #0
    bc54:	e5803048 	str	r3, [r0, #72]	; 0x48
    bc58:	e8bd4010 	pop	{r4, lr}
    bc5c:	ea00008a 	b	be8c <CScreenDevice::CursorDown()>
    bc60:	e8bd4010 	pop	{r4, lr}
    bc64:	ea000208 	b	c48c <CScreenDevice::Tabulator()>
    bc68:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    bc6c:	e3510000 	cmp	r1, #0
    bc70:	0affff44 	beq	b988 <CScreenDevice::Write(char)+0x5c>
    bc74:	eb0002e3 	bl	c808 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    bc78:	eaffff42 	b	b988 <CScreenDevice::Write(char)+0x5c>
    bc7c:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    bc80:	e3530004 	cmp	r3, #4
    bc84:	02411068 	subeq	r1, r1, #104	; 0x68
    bc88:	016f1f11 	clzeq	r1, r1
    bc8c:	01a012a1 	lsreq	r1, r1, #5
    bc90:	05c01057 	strbeq	r1, [r0, #87]	; 0x57
    bc94:	eaffff3b 	b	b988 <CScreenDevice::Write(char)+0x5c>
    bc98:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    bc9c:	eb00011b 	bl	c110 <CScreenDevice::SetStandoutMode(unsigned int)>
    bca0:	e3a03000 	mov	r3, #0
    bca4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bca8:	e8bd8010 	pop	{r4, pc}
    bcac:	e3a03005 	mov	r3, #5
    bcb0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bcb4:	e8bd8010 	pop	{r4, pc}
    bcb8:	e6ef3071 	uxtb	r3, r1
    bcbc:	e353001f 	cmp	r3, #31
    bcc0:	98bd8010 	popls	{r4, pc}
    bcc4:	e8bd4010 	pop	{r4, lr}
    bcc8:	ea0002be 	b	c7c8 <CScreenDevice::DisplayChar(char) [clone .part.3]>
    bccc:	e3a03004 	mov	r3, #4
    bcd0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bcd4:	e8bd8010 	pop	{r4, pc}
    bcd8:	eb000059 	bl	be44 <CScreenDevice::ClearLineEnd()>
    bcdc:	e3a03000 	mov	r3, #0
    bce0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bce4:	e8bd8010 	pop	{r4, pc}
    bce8:	eb000030 	bl	bdb0 <CScreenDevice::ClearDisplayEnd()>
    bcec:	e3a03000 	mov	r3, #0
    bcf0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bcf4:	e8bd8010 	pop	{r4, pc}
    bcf8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bcfc:	e3a03000 	mov	r3, #0
    bd00:	e5803048 	str	r3, [r0, #72]	; 0x48
    bd04:	e580204c 	str	r2, [r0, #76]	; 0x4c
    bd08:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bd0c:	e8bd8010 	pop	{r4, pc}
    bd10:	eb000075 	bl	beec <CScreenDevice::CursorLeft()>
    bd14:	e3a03000 	mov	r3, #0
    bd18:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bd1c:	e8bd8010 	pop	{r4, pc}
    bd20:	eb0000a4 	bl	bfb8 <CScreenDevice::CursorRight()>
    bd24:	e3a03000 	mov	r3, #0
    bd28:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bd2c:	e8bd8010 	pop	{r4, pc}
    bd30:	eb000055 	bl	be8c <CScreenDevice::CursorDown()>
    bd34:	e3a03000 	mov	r3, #0
    bd38:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bd3c:	e8bd8010 	pop	{r4, pc}
    bd40:	e2411030 	sub	r1, r1, #48	; 0x30
    bd44:	e6ef3071 	uxtb	r3, r1
    bd48:	e3530009 	cmp	r3, #9
    bd4c:	8affff0d 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bd50:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    bd54:	e3a0200a 	mov	r2, #10
    bd58:	e0211392 	mla	r1, r2, r3, r1
    bd5c:	e35100c7 	cmp	r1, #199	; 0xc7
    bd60:	e5801058 	str	r1, [r0, #88]	; 0x58
    bd64:	8affff07 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bd68:	e8bd8010 	pop	{r4, pc}
    bd6c:	e2411030 	sub	r1, r1, #48	; 0x30
    bd70:	e6ef3071 	uxtb	r3, r1
    bd74:	e3530009 	cmp	r3, #9
    bd78:	8affff02 	bhi	b988 <CScreenDevice::Write(char)+0x5c>
    bd7c:	e3a03003 	mov	r3, #3
    bd80:	e5801058 	str	r1, [r0, #88]	; 0x58
    bd84:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bd88:	e8bd8010 	pop	{r4, pc}
    bd8c:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    bd90:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    bd94:	eb00006f 	bl	bf58 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    bd98:	e3a03000 	mov	r3, #0
    bd9c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bda0:	e8bd8010 	pop	{r4, pc}

0000bda4 <CScreenDevice::CarriageReturn()>:
    bda4:	e3a03000 	mov	r3, #0
    bda8:	e5803048 	str	r3, [r0, #72]	; 0x48
    bdac:	e12fff1e 	bx	lr

0000bdb0 <CScreenDevice::ClearDisplayEnd()>:
    bdb0:	e92d4070 	push	{r4, r5, r6, lr}
    bdb4:	e1a04000 	mov	r4, r0
    bdb8:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    bdbc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bdc0:	e280601c 	add	r6, r0, #28
    bdc4:	e1550003 	cmp	r5, r3
    bdc8:	2a000009 	bcs	bdf4 <CScreenDevice::ClearDisplayEnd()+0x44>
    bdcc:	e1a01005 	mov	r1, r5
    bdd0:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bdd4:	e1a00004 	mov	r0, r4
    bdd8:	eb000225 	bl	c674 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bddc:	e1a00006 	mov	r0, r6
    bde0:	eb001aea 	bl	12990 <CCharGenerator::GetCharWidth() const>
    bde4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    bde8:	e0855000 	add	r5, r5, r0
    bdec:	e1530005 	cmp	r3, r5
    bdf0:	8afffff5 	bhi	bdcc <CScreenDevice::ClearDisplayEnd()+0x1c>
    bdf4:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
    bdf8:	e1a00006 	mov	r0, r6
    bdfc:	eb001ae5 	bl	12998 <CCharGenerator::GetCharHeight() const>
    be00:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    be04:	e0850000 	add	r0, r5, r0
    be08:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    be0c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    be10:	e0000091 	mul	r0, r1, r0
    be14:	e06030a3 	rsb	r3, r0, r3, lsr #1
    be18:	e0820080 	add	r0, r2, r0, lsl #1
    be1c:	e3530000 	cmp	r3, #0
    be20:	e2433001 	sub	r3, r3, #1
    be24:	0a000005 	beq	be40 <CScreenDevice::ClearDisplayEnd()+0x90>
    be28:	e2433001 	sub	r3, r3, #1
    be2c:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    be30:	e3730001 	cmn	r3, #1
    be34:	e0c020b2 	strh	r2, [r0], #2
    be38:	1afffffa 	bne	be28 <CScreenDevice::ClearDisplayEnd()+0x78>
    be3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    be40:	e8bd8070 	pop	{r4, r5, r6, pc}

0000be44 <CScreenDevice::ClearLineEnd()>:
    be44:	e92d4070 	push	{r4, r5, r6, lr}
    be48:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    be4c:	e5904048 	ldr	r4, [r0, #72]	; 0x48
    be50:	e1540003 	cmp	r4, r3
    be54:	28bd8070 	popcs	{r4, r5, r6, pc}
    be58:	e1a05000 	mov	r5, r0
    be5c:	e280601c 	add	r6, r0, #28
    be60:	e1a01004 	mov	r1, r4
    be64:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    be68:	e1a00005 	mov	r0, r5
    be6c:	eb000200 	bl	c674 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    be70:	e1a00006 	mov	r0, r6
    be74:	eb001ac5 	bl	12990 <CCharGenerator::GetCharWidth() const>
    be78:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    be7c:	e0844000 	add	r4, r4, r0
    be80:	e1530004 	cmp	r3, r4
    be84:	8afffff5 	bhi	be60 <CScreenDevice::ClearLineEnd()+0x1c>
    be88:	e8bd8070 	pop	{r4, r5, r6, pc}

0000be8c <CScreenDevice::CursorDown()>:
    be8c:	e92d4070 	push	{r4, r5, r6, lr}
    be90:	e1a04000 	mov	r4, r0
    be94:	e280501c 	add	r5, r0, #28
    be98:	e1a00005 	mov	r0, r5
    be9c:	eb001abd 	bl	12998 <CCharGenerator::GetCharHeight() const>
    bea0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bea4:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    bea8:	e0800003 	add	r0, r0, r3
    beac:	e1500002 	cmp	r0, r2
    beb0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    beb4:	38bd8070 	popcc	{r4, r5, r6, pc}
    beb8:	e1a00004 	mov	r0, r4
    bebc:	eb000184 	bl	c4d4 <CScreenDevice::Scroll()>
    bec0:	e1a00005 	mov	r0, r5
    bec4:	eb001ab3 	bl	12998 <CCharGenerator::GetCharHeight() const>
    bec8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    becc:	e0430000 	sub	r0, r3, r0
    bed0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bed4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bed8 <CScreenDevice::CursorHome()>:
    bed8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bedc:	e3a02000 	mov	r2, #0
    bee0:	e5802048 	str	r2, [r0, #72]	; 0x48
    bee4:	e580304c 	str	r3, [r0, #76]	; 0x4c
    bee8:	e12fff1e 	bx	lr

0000beec <CScreenDevice::CursorLeft()>:
    beec:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    bef0:	e92d4070 	push	{r4, r5, r6, lr}
    bef4:	e1a04000 	mov	r4, r0
    bef8:	e3530000 	cmp	r3, #0
    befc:	1a00000f 	bne	bf40 <CScreenDevice::CursorLeft()+0x54>
    bf00:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    bf04:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bf08:	e1520003 	cmp	r2, r3
    bf0c:	98bd8070 	popls	{r4, r5, r6, pc}
    bf10:	e5905030 	ldr	r5, [r0, #48]	; 0x30
    bf14:	e280601c 	add	r6, r0, #28
    bf18:	e1a00006 	mov	r0, r6
    bf1c:	eb001a9b 	bl	12990 <CCharGenerator::GetCharWidth() const>
    bf20:	e0450000 	sub	r0, r5, r0
    bf24:	e5840048 	str	r0, [r4, #72]	; 0x48
    bf28:	e1a00006 	mov	r0, r6
    bf2c:	eb001a99 	bl	12998 <CCharGenerator::GetCharHeight() const>
    bf30:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bf34:	e0430000 	sub	r0, r3, r0
    bf38:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bf3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf40:	e280001c 	add	r0, r0, #28
    bf44:	eb001a91 	bl	12990 <CCharGenerator::GetCharWidth() const>
    bf48:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    bf4c:	e0430000 	sub	r0, r3, r0
    bf50:	e5840048 	str	r0, [r4, #72]	; 0x48
    bf54:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bf58 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    bf58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf5c:	e1a04002 	mov	r4, r2
    bf60:	e2444001 	sub	r4, r4, #1
    bf64:	e1a05000 	mov	r5, r0
    bf68:	e280601c 	add	r6, r0, #28
    bf6c:	e1a00006 	mov	r0, r6
    bf70:	e1a07001 	mov	r7, r1
    bf74:	eb001a85 	bl	12990 <CCharGenerator::GetCharWidth() const>
    bf78:	e0040490 	mul	r4, r0, r4
    bf7c:	e1a00006 	mov	r0, r6
    bf80:	eb001a84 	bl	12998 <CCharGenerator::GetCharHeight() const>
    bf84:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    bf88:	e1540003 	cmp	r4, r3
    bf8c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bf90:	e2477001 	sub	r7, r7, #1
    bf94:	e5953040 	ldr	r3, [r5, #64]	; 0x40
    bf98:	e0000790 	mul	r0, r0, r7
    bf9c:	e1500003 	cmp	r0, r3
    bfa0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    bfa4:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    bfa8:	e1500003 	cmp	r0, r3
    bfac:	35854048 	strcc	r4, [r5, #72]	; 0x48
    bfb0:	3585004c 	strcc	r0, [r5, #76]	; 0x4c
    bfb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bfb8 <CScreenDevice::CursorRight()>:
    bfb8:	e92d4010 	push	{r4, lr}
    bfbc:	e1a04000 	mov	r4, r0
    bfc0:	e280001c 	add	r0, r0, #28
    bfc4:	eb001a71 	bl	12990 <CCharGenerator::GetCharWidth() const>
    bfc8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    bfcc:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    bfd0:	e0800003 	add	r0, r0, r3
    bfd4:	e1500002 	cmp	r0, r2
    bfd8:	e5840048 	str	r0, [r4, #72]	; 0x48
    bfdc:	38bd8010 	popcc	{r4, pc}
    bfe0:	e3a03000 	mov	r3, #0
    bfe4:	e1a00004 	mov	r0, r4
    bfe8:	e5843048 	str	r3, [r4, #72]	; 0x48
    bfec:	e8bd4010 	pop	{r4, lr}
    bff0:	eaffffa5 	b	be8c <CScreenDevice::CursorDown()>

0000bff4 <CScreenDevice::CursorUp()>:
    bff4:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    bff8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bffc:	e1520003 	cmp	r2, r3
    c000:	912fff1e 	bxls	lr
    c004:	e92d4010 	push	{r4, lr}
    c008:	e1a04000 	mov	r4, r0
    c00c:	e280001c 	add	r0, r0, #28
    c010:	eb001a60 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c014:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c018:	e0430000 	sub	r0, r3, r0
    c01c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c020:	e8bd8010 	pop	{r4, pc}

0000c024 <CScreenDevice::DeleteChars(unsigned int)>:
    c024:	e12fff1e 	bx	lr

0000c028 <CScreenDevice::DeleteLines(unsigned int)>:
    c028:	e12fff1e 	bx	lr

0000c02c <CScreenDevice::DisplayChar(char)>:
    c02c:	e6ef3071 	uxtb	r3, r1
    c030:	e353001f 	cmp	r3, #31
    c034:	912fff1e 	bxls	lr
    c038:	ea0001e2 	b	c7c8 <CScreenDevice::DisplayChar(char) [clone .part.3]>

0000c03c <CScreenDevice::EraseChars(unsigned int)>:
    c03c:	e3510000 	cmp	r1, #0
    c040:	012fff1e 	bxeq	lr
    c044:	ea0001ef 	b	c808 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000c048 <CScreenDevice::GetTextBackgroundColor()>:
    c048:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    c04c:	e3530000 	cmp	r3, #0
    c050:	11d005b2 	ldrhne	r0, [r0, #82]	; 0x52
    c054:	01d005b4 	ldrheq	r0, [r0, #84]	; 0x54
    c058:	e12fff1e 	bx	lr

0000c05c <CScreenDevice::GetTextColor()>:
    c05c:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    c060:	e3530000 	cmp	r3, #0
    c064:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
    c068:	01d005b2 	ldrheq	r0, [r0, #82]	; 0x52
    c06c:	e12fff1e 	bx	lr

0000c070 <CScreenDevice::InsertLines(unsigned int)>:
    c070:	e12fff1e 	bx	lr

0000c074 <CScreenDevice::InsertMode(bool)>:
    c074:	e5c01057 	strb	r1, [r0, #87]	; 0x57
    c078:	e12fff1e 	bx	lr

0000c07c <CScreenDevice::NewLine()>:
    c07c:	e3a02000 	mov	r2, #0
    c080:	e5802048 	str	r2, [r0, #72]	; 0x48
    c084:	eaffff80 	b	be8c <CScreenDevice::CursorDown()>

0000c088 <CScreenDevice::ReverseScroll()>:
    c088:	e12fff1e 	bx	lr

0000c08c <CScreenDevice::SetCursorMode(bool)>:
    c08c:	e5c01050 	strb	r1, [r0, #80]	; 0x50
    c090:	e12fff1e 	bx	lr

0000c094 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    c094:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c098:	e1a04001 	mov	r4, r1
    c09c:	e2444001 	sub	r4, r4, #1
    c0a0:	e1a06000 	mov	r6, r0
    c0a4:	e1a05002 	mov	r5, r2
    c0a8:	e280701c 	add	r7, r0, #28
    c0ac:	e1a00007 	mov	r0, r7
    c0b0:	eb001a38 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c0b4:	e0040490 	mul	r4, r0, r4
    c0b8:	e1a00007 	mov	r0, r7
    c0bc:	eb001a35 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c0c0:	e5962038 	ldr	r2, [r6, #56]	; 0x38
    c0c4:	e0000095 	mul	r0, r5, r0
    c0c8:	e3500000 	cmp	r0, #0
    c0cc:	11540002 	cmpne	r4, r2
    c0d0:	33a03001 	movcc	r3, #1
    c0d4:	23a03000 	movcs	r3, #0
    c0d8:	e1500002 	cmp	r0, r2
    c0dc:	83a03000 	movhi	r3, #0
    c0e0:	92033001 	andls	r3, r3, #1
    c0e4:	e1540000 	cmp	r4, r0
    c0e8:	23a03000 	movcs	r3, #0
    c0ec:	32033001 	andcc	r3, r3, #1
    c0f0:	e3530000 	cmp	r3, #0
    c0f4:	e3a03000 	mov	r3, #0
    c0f8:	15864040 	strne	r4, [r6, #64]	; 0x40
    c0fc:	15860044 	strne	r0, [r6, #68]	; 0x44
    c100:	05964040 	ldreq	r4, [r6, #64]	; 0x40
    c104:	e5863048 	str	r3, [r6, #72]	; 0x48
    c108:	e586404c 	str	r4, [r6, #76]	; 0x4c
    c10c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c110 <CScreenDevice::SetStandoutMode(unsigned int)>:
    c110:	e351006b 	cmp	r1, #107	; 0x6b
    c114:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c118:	ea00006d 	b	c2d4 <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
    c11c:	0000c324 	.word	0x0000c324
    c120:	0000c2d8 	.word	0x0000c2d8
    c124:	0000c2e8 	.word	0x0000c2e8
    c128:	0000c2d4 	.word	0x0000c2d4
    c12c:	0000c2d4 	.word	0x0000c2d4
    c130:	0000c2d4 	.word	0x0000c2d4
    c134:	0000c2d4 	.word	0x0000c2d4
    c138:	0000c30c 	.word	0x0000c30c
    c13c:	0000c2d4 	.word	0x0000c2d4
    c140:	0000c2d4 	.word	0x0000c2d4
    c144:	0000c2d4 	.word	0x0000c2d4
    c148:	0000c2d4 	.word	0x0000c2d4
    c14c:	0000c2d4 	.word	0x0000c2d4
    c150:	0000c2d4 	.word	0x0000c2d4
    c154:	0000c2d4 	.word	0x0000c2d4
    c158:	0000c2d4 	.word	0x0000c2d4
    c15c:	0000c2d4 	.word	0x0000c2d4
    c160:	0000c2d4 	.word	0x0000c2d4
    c164:	0000c2d4 	.word	0x0000c2d4
    c168:	0000c2d4 	.word	0x0000c2d4
    c16c:	0000c2d4 	.word	0x0000c2d4
    c170:	0000c2d4 	.word	0x0000c2d4
    c174:	0000c2d4 	.word	0x0000c2d4
    c178:	0000c2d4 	.word	0x0000c2d4
    c17c:	0000c2d4 	.word	0x0000c2d4
    c180:	0000c2d4 	.word	0x0000c2d4
    c184:	0000c2d4 	.word	0x0000c2d4
    c188:	0000c324 	.word	0x0000c324
    c18c:	0000c2d4 	.word	0x0000c2d4
    c190:	0000c2d4 	.word	0x0000c2d4
    c194:	0000c3c0 	.word	0x0000c3c0
    c198:	0000c454 	.word	0x0000c454
    c19c:	0000c448 	.word	0x0000c448
    c1a0:	0000c438 	.word	0x0000c438
    c1a4:	0000c2e8 	.word	0x0000c2e8
    c1a8:	0000c460 	.word	0x0000c460
    c1ac:	0000c42c 	.word	0x0000c42c
    c1b0:	0000c470 	.word	0x0000c470
    c1b4:	0000c2d4 	.word	0x0000c2d4
    c1b8:	0000c2d4 	.word	0x0000c2d4
    c1bc:	0000c300 	.word	0x0000c300
    c1c0:	0000c420 	.word	0x0000c420
    c1c4:	0000c414 	.word	0x0000c414
    c1c8:	0000c404 	.word	0x0000c404
    c1cc:	0000c3f8 	.word	0x0000c3f8
    c1d0:	0000c3e8 	.word	0x0000c3e8
    c1d4:	0000c3dc 	.word	0x0000c3dc
    c1d8:	0000c3cc 	.word	0x0000c3cc
    c1dc:	0000c2d4 	.word	0x0000c2d4
    c1e0:	0000c2d4 	.word	0x0000c2d4
    c1e4:	0000c2d4 	.word	0x0000c2d4
    c1e8:	0000c2d4 	.word	0x0000c2d4
    c1ec:	0000c2d4 	.word	0x0000c2d4
    c1f0:	0000c2d4 	.word	0x0000c2d4
    c1f4:	0000c2d4 	.word	0x0000c2d4
    c1f8:	0000c2d4 	.word	0x0000c2d4
    c1fc:	0000c2d4 	.word	0x0000c2d4
    c200:	0000c2d4 	.word	0x0000c2d4
    c204:	0000c2d4 	.word	0x0000c2d4
    c208:	0000c2d4 	.word	0x0000c2d4
    c20c:	0000c2d4 	.word	0x0000c2d4
    c210:	0000c2d4 	.word	0x0000c2d4
    c214:	0000c2d4 	.word	0x0000c2d4
    c218:	0000c2d4 	.word	0x0000c2d4
    c21c:	0000c2d4 	.word	0x0000c2d4
    c220:	0000c2d4 	.word	0x0000c2d4
    c224:	0000c2d4 	.word	0x0000c2d4
    c228:	0000c2d4 	.word	0x0000c2d4
    c22c:	0000c2d4 	.word	0x0000c2d4
    c230:	0000c2d4 	.word	0x0000c2d4
    c234:	0000c2d4 	.word	0x0000c2d4
    c238:	0000c2d4 	.word	0x0000c2d4
    c23c:	0000c2d4 	.word	0x0000c2d4
    c240:	0000c2d4 	.word	0x0000c2d4
    c244:	0000c2d4 	.word	0x0000c2d4
    c248:	0000c2d4 	.word	0x0000c2d4
    c24c:	0000c2d4 	.word	0x0000c2d4
    c250:	0000c2d4 	.word	0x0000c2d4
    c254:	0000c2d4 	.word	0x0000c2d4
    c258:	0000c2d4 	.word	0x0000c2d4
    c25c:	0000c2d4 	.word	0x0000c2d4
    c260:	0000c2d4 	.word	0x0000c2d4
    c264:	0000c2d4 	.word	0x0000c2d4
    c268:	0000c2d4 	.word	0x0000c2d4
    c26c:	0000c2d4 	.word	0x0000c2d4
    c270:	0000c2d4 	.word	0x0000c2d4
    c274:	0000c2d4 	.word	0x0000c2d4
    c278:	0000c2d4 	.word	0x0000c2d4
    c27c:	0000c2d4 	.word	0x0000c2d4
    c280:	0000c2d4 	.word	0x0000c2d4
    c284:	0000c480 	.word	0x0000c480
    c288:	0000c2d8 	.word	0x0000c2d8
    c28c:	0000c2f4 	.word	0x0000c2f4
    c290:	0000c3b4 	.word	0x0000c3b4
    c294:	0000c3a8 	.word	0x0000c3a8
    c298:	0000c39c 	.word	0x0000c39c
    c29c:	0000c390 	.word	0x0000c390
    c2a0:	0000c384 	.word	0x0000c384
    c2a4:	0000c2d4 	.word	0x0000c2d4
    c2a8:	0000c2d4 	.word	0x0000c2d4
    c2ac:	0000c378 	.word	0x0000c378
    c2b0:	0000c368 	.word	0x0000c368
    c2b4:	0000c35c 	.word	0x0000c35c
    c2b8:	0000c350 	.word	0x0000c350
    c2bc:	0000c344 	.word	0x0000c344
    c2c0:	0000c338 	.word	0x0000c338
    c2c4:	0000c318 	.word	0x0000c318
    c2c8:	0000c2cc 	.word	0x0000c2cc
    c2cc:	e3e03020 	mvn	r3, #32
    c2d0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c2d4:	e12fff1e 	bx	lr
    c2d8:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
    c2dc:	e34f3fff 	movt	r3, #65535	; 0xffff
    c2e0:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c2e4:	e12fff1e 	bx	lr
    c2e8:	e3a03015 	mov	r3, #21
    c2ec:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c2f0:	e12fff1e 	bx	lr
    c2f4:	e30537ca 	movw	r3, #22474	; 0x57ca
    c2f8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c2fc:	e12fff1e 	bx	lr
    c300:	e3a03000 	mov	r3, #0
    c304:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c308:	e12fff1e 	bx	lr
    c30c:	e3a03001 	mov	r3, #1
    c310:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    c314:	e12fff1e 	bx	lr
    c318:	e30537df 	movw	r3, #22495	; 0x57df
    c31c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c320:	e12fff1e 	bx	lr
    c324:	e3e03020 	mvn	r3, #32
    c328:	e3a02000 	mov	r2, #0
    c32c:	e5c02056 	strb	r2, [r0, #86]	; 0x56
    c330:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c334:	e12fff1e 	bx	lr
    c338:	e3e03e56 	mvn	r3, #1376	; 0x560
    c33c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c340:	e12fff1e 	bx	lr
    c344:	e305329f 	movw	r3, #21151	; 0x529f
    c348:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c34c:	e12fff1e 	bx	lr
    c350:	e3e03035 	mvn	r3, #53	; 0x35
    c354:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c358:	e12fff1e 	bx	lr
    c35c:	e30537ca 	movw	r3, #22474	; 0x57ca
    c360:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c364:	e12fff1e 	bx	lr
    c368:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
    c36c:	e34f3fff 	movt	r3, #65535	; 0xffff
    c370:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c374:	e12fff1e 	bx	lr
    c378:	e305328a 	movw	r3, #21130	; 0x528a
    c37c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c380:	e12fff1e 	bx	lr
    c384:	e3e03020 	mvn	r3, #32
    c388:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c38c:	e12fff1e 	bx	lr
    c390:	e30537df 	movw	r3, #22495	; 0x57df
    c394:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c398:	e12fff1e 	bx	lr
    c39c:	e3e03e56 	mvn	r3, #1376	; 0x560
    c3a0:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c3a4:	e12fff1e 	bx	lr
    c3a8:	e305329f 	movw	r3, #21151	; 0x529f
    c3ac:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c3b0:	e12fff1e 	bx	lr
    c3b4:	e3e03035 	mvn	r3, #53	; 0x35
    c3b8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c3bc:	e12fff1e 	bx	lr
    c3c0:	e3a03000 	mov	r3, #0
    c3c4:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c3c8:	e12fff1e 	bx	lr
    c3cc:	e30a3d55 	movw	r3, #44373	; 0xad55
    c3d0:	e34f3fff 	movt	r3, #65535	; 0xffff
    c3d4:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c3d8:	e12fff1e 	bx	lr
    c3dc:	e3003555 	movw	r3, #1365	; 0x555
    c3e0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c3e4:	e12fff1e 	bx	lr
    c3e8:	e30a3815 	movw	r3, #43029	; 0xa815
    c3ec:	e34f3fff 	movt	r3, #65535	; 0xffff
    c3f0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c3f4:	e12fff1e 	bx	lr
    c3f8:	e3a03015 	mov	r3, #21
    c3fc:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c400:	e12fff1e 	bx	lr
    c404:	e30a3a80 	movw	r3, #43648	; 0xaa80
    c408:	e34f3fff 	movt	r3, #65535	; 0xffff
    c40c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c410:	e12fff1e 	bx	lr
    c414:	e3a03d15 	mov	r3, #1344	; 0x540
    c418:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c41c:	e12fff1e 	bx	lr
    c420:	e3a03b2a 	mov	r3, #43008	; 0xa800
    c424:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    c428:	e12fff1e 	bx	lr
    c42c:	e3003555 	movw	r3, #1365	; 0x555
    c430:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c434:	e12fff1e 	bx	lr
    c438:	e30a3a80 	movw	r3, #43648	; 0xaa80
    c43c:	e34f3fff 	movt	r3, #65535	; 0xffff
    c440:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c444:	e12fff1e 	bx	lr
    c448:	e3a03d15 	mov	r3, #1344	; 0x540
    c44c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c450:	e12fff1e 	bx	lr
    c454:	e3a03b2a 	mov	r3, #43008	; 0xa800
    c458:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c45c:	e12fff1e 	bx	lr
    c460:	e30a3815 	movw	r3, #43029	; 0xa815
    c464:	e34f3fff 	movt	r3, #65535	; 0xffff
    c468:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c46c:	e12fff1e 	bx	lr
    c470:	e30a3d55 	movw	r3, #44373	; 0xad55
    c474:	e34f3fff 	movt	r3, #65535	; 0xffff
    c478:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c47c:	e12fff1e 	bx	lr
    c480:	e305328a 	movw	r3, #21130	; 0x528a
    c484:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c488:	e12fff1e 	bx	lr

0000c48c <CScreenDevice::Tabulator()>:
    c48c:	e92d4010 	push	{r4, lr}
    c490:	e1a04000 	mov	r4, r0
    c494:	e280001c 	add	r0, r0, #28
    c498:	eb00193c 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c49c:	e1a00180 	lsl	r0, r0, #3
    c4a0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c4a4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    c4a8:	e0803003 	add	r3, r0, r3
    c4ac:	e733f013 	udiv	r3, r3, r0
    c4b0:	e0000390 	mul	r0, r0, r3
    c4b4:	e1500002 	cmp	r0, r2
    c4b8:	e5840048 	str	r0, [r4, #72]	; 0x48
    c4bc:	38bd8010 	popcc	{r4, pc}
    c4c0:	e3a03000 	mov	r3, #0
    c4c4:	e1a00004 	mov	r0, r4
    c4c8:	e5843048 	str	r3, [r4, #72]	; 0x48
    c4cc:	e8bd4010 	pop	{r4, lr}
    c4d0:	eafffe6d 	b	be8c <CScreenDevice::CursorDown()>

0000c4d4 <CScreenDevice::Scroll()>:
    c4d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c4d8:	e1a06000 	mov	r6, r0
    c4dc:	e280001c 	add	r0, r0, #28
    c4e0:	e24dd008 	sub	sp, sp, #8
    c4e4:	eb00192b 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c4e8:	e5961040 	ldr	r1, [r6, #64]	; 0x40
    c4ec:	e596402c 	ldr	r4, [r6, #44]	; 0x2c
    c4f0:	e1a07000 	mov	r7, r0
    c4f4:	e5965044 	ldr	r5, [r6, #68]	; 0x44
    c4f8:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    c4fc:	e0455001 	sub	r5, r5, r1
    c500:	e1a03084 	lsl	r3, r4, #1
    c504:	e0455000 	sub	r5, r5, r0
    c508:	e0040194 	mul	r4, r4, r1
    c50c:	e0824084 	add	r4, r2, r4, lsl #1
    c510:	e0050593 	mul	r5, r3, r5
    c514:	e3550000 	cmp	r5, #0
    c518:	1a000009 	bne	c544 <CScreenDevice::Scroll()+0x70>
    c51c:	e0030793 	mul	r3, r3, r7
    c520:	e1b03123 	lsrs	r3, r3, #2
    c524:	0a000004 	beq	c53c <CScreenDevice::Scroll()+0x68>
    c528:	e1d625b4 	ldrh	r2, [r6, #84]	; 0x54
    c52c:	e0843103 	add	r3, r4, r3, lsl #2
    c530:	e4842004 	str	r2, [r4], #4
    c534:	e1540003 	cmp	r4, r3
    c538:	1afffffc 	bne	c530 <CScreenDevice::Scroll()+0x5c>
    c53c:	e28dd008 	add	sp, sp, #8
    c540:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c544:	e0801001 	add	r1, r0, r1
    c548:	e3a0c002 	mov	ip, #2
    c54c:	e2868064 	add	r8, r6, #100	; 0x64
    c550:	e3a00000 	mov	r0, #0
    c554:	e58dc000 	str	ip, [sp]
    c558:	e0222193 	mla	r2, r3, r1, r2
    c55c:	e58d0004 	str	r0, [sp, #4]
    c560:	e1a03005 	mov	r3, r5
    c564:	e1a01004 	mov	r1, r4
    c568:	e1a00008 	mov	r0, r8
    c56c:	e3c55003 	bic	r5, r5, #3
    c570:	eb001a85 	bl	12f8c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    c574:	e1a00008 	mov	r0, r8
    c578:	eb001c76 	bl	13758 <CDMAChannel::Start()>
    c57c:	e1a00008 	mov	r0, r8
    c580:	eb001cca 	bl	138b0 <CDMAChannel::Wait()>
    c584:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
    c588:	e0844005 	add	r4, r4, r5
    c58c:	e1a03083 	lsl	r3, r3, #1
    c590:	eaffffe1 	b	c51c <CScreenDevice::Scroll()+0x48>

0000c594 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    c594:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c598:	e280701c 	add	r7, r0, #28
    c59c:	e1a06000 	mov	r6, r0
    c5a0:	e24dd00c 	sub	sp, sp, #12
    c5a4:	e3a08000 	mov	r8, #0
    c5a8:	e1a00007 	mov	r0, r7
    c5ac:	e1a0a001 	mov	sl, r1
    c5b0:	e1a09002 	mov	r9, r2
    c5b4:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    c5b8:	e58d3004 	str	r3, [sp, #4]
    c5bc:	eb0018f5 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c5c0:	e1580000 	cmp	r8, r0
    c5c4:	2a000028 	bcs	c66c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xd8>
    c5c8:	e59d3004 	ldr	r3, [sp, #4]
    c5cc:	e3a04000 	mov	r4, #0
    c5d0:	e0883003 	add	r3, r8, r3
    c5d4:	e58d3000 	str	r3, [sp]
    c5d8:	e1a00007 	mov	r0, r7
    c5dc:	e0845009 	add	r5, r4, r9
    c5e0:	eb0018ea 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c5e4:	e1540000 	cmp	r4, r0
    c5e8:	e1a02004 	mov	r2, r4
    c5ec:	e1a03008 	mov	r3, r8
    c5f0:	e1a0100a 	mov	r1, sl
    c5f4:	e1a00007 	mov	r0, r7
    c5f8:	2a000016 	bcs	c658 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc4>
    c5fc:	eb0018e9 	bl	129a8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    c600:	e3500000 	cmp	r0, #0
    c604:	e1a0200b 	mov	r2, fp
    c608:	1a000003 	bne	c61c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x88>
    c60c:	e5d63056 	ldrb	r3, [r6, #86]	; 0x56
    c610:	e3530000 	cmp	r3, #0
    c614:	11d625b2 	ldrhne	r2, [r6, #82]	; 0x52
    c618:	01d625b4 	ldrheq	r2, [r6, #84]	; 0x54
    c61c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    c620:	e2844001 	add	r4, r4, #1
    c624:	e1550003 	cmp	r5, r3
    c628:	2affffea 	bcs	c5d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c62c:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    c630:	e59d1000 	ldr	r1, [sp]
    c634:	e1510003 	cmp	r1, r3
    c638:	2affffe6 	bcs	c5d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c63c:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
    c640:	e59d0000 	ldr	r0, [sp]
    c644:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    c648:	e0255093 	mla	r5, r3, r0, r5
    c64c:	e1a05085 	lsl	r5, r5, #1
    c650:	e18120b5 	strh	r2, [r1, r5]
    c654:	eaffffdf 	b	c5d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c658:	e2888001 	add	r8, r8, #1
    c65c:	e1a00007 	mov	r0, r7
    c660:	eb0018cc 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c664:	e1580000 	cmp	r8, r0
    c668:	3affffd6 	bcc	c5c8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    c66c:	e28dd00c 	add	sp, sp, #12
    c670:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c674 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c674:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c678:	e1a0a000 	mov	sl, r0
    c67c:	e1a06001 	mov	r6, r1
    c680:	e1a09002 	mov	r9, r2
    c684:	e280501c 	add	r5, r0, #28
    c688:	e3a08000 	mov	r8, #0
    c68c:	e1a00005 	mov	r0, r5
    c690:	eb0018c0 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c694:	e1580000 	cmp	r8, r0
    c698:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    c69c:	e3a04000 	mov	r4, #0
    c6a0:	e0887009 	add	r7, r8, r9
    c6a4:	e1a00005 	mov	r0, r5
    c6a8:	eb0018b8 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c6ac:	e1540000 	cmp	r4, r0
    c6b0:	e0843006 	add	r3, r4, r6
    c6b4:	e2844001 	add	r4, r4, #1
    c6b8:	2a00000c 	bcs	c6f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    c6bc:	e59a2030 	ldr	r2, [sl, #48]	; 0x30
    c6c0:	e1530002 	cmp	r3, r2
    c6c4:	2afffff6 	bcs	c6a4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c6c8:	e59a2034 	ldr	r2, [sl, #52]	; 0x34
    c6cc:	e1570002 	cmp	r7, r2
    c6d0:	2afffff3 	bcs	c6a4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c6d4:	e59a202c 	ldr	r2, [sl, #44]	; 0x2c
    c6d8:	e59a1024 	ldr	r1, [sl, #36]	; 0x24
    c6dc:	e1da05b4 	ldrh	r0, [sl, #84]	; 0x54
    c6e0:	e0233792 	mla	r3, r2, r7, r3
    c6e4:	e1a03083 	lsl	r3, r3, #1
    c6e8:	e18100b3 	strh	r0, [r1, r3]
    c6ec:	eaffffec 	b	c6a4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c6f0:	e2888001 	add	r8, r8, #1
    c6f4:	eaffffe4 	b	c68c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000c6f8 <CScreenDevice::InvertCursor()>:
    c6f8:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
    c6fc:	e3530000 	cmp	r3, #0
    c700:	012fff1e 	bxeq	lr
    c704:	ea000057 	b	c868 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c708 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c708:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    c70c:	e15c0001 	cmp	ip, r1
    c710:	912fff1e 	bxls	lr
    c714:	e590c034 	ldr	ip, [r0, #52]	; 0x34
    c718:	e15c0002 	cmp	ip, r2
    c71c:	8590c02c 	ldrhi	ip, [r0, #44]	; 0x2c
    c720:	85900024 	ldrhi	r0, [r0, #36]	; 0x24
    c724:	8022129c 	mlahi	r2, ip, r2, r1
    c728:	81a02082 	lslhi	r2, r2, #1
    c72c:	818030b2 	strhhi	r3, [r0, r2]
    c730:	e12fff1e 	bx	lr

0000c734 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c734:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c738:	e1530001 	cmp	r3, r1
    c73c:	9a000002 	bls	c74c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    c740:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c744:	e1530002 	cmp	r3, r2
    c748:	8a000001 	bhi	c754 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    c74c:	e1d005b4 	ldrh	r0, [r0, #84]	; 0x54
    c750:	e12fff1e 	bx	lr
    c754:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    c758:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c75c:	e022129c 	mla	r2, ip, r2, r1
    c760:	e1a02082 	lsl	r2, r2, #1
    c764:	e19300b2 	ldrh	r0, [r3, r2]
    c768:	e12fff1e 	bx	lr

0000c76c <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c76c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c770:	e1a05000 	mov	r5, r0
    c774:	e1a04001 	mov	r4, r1
    c778:	e24dd00c 	sub	sp, sp, #12
    c77c:	e1a06002 	mov	r6, r2
    c780:	e280001c 	add	r0, r0, #28
    c784:	e2044003 	and	r4, r4, #3
    c788:	e5957030 	ldr	r7, [r5, #48]	; 0x30
    c78c:	eb00187f 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c790:	e2061003 	and	r1, r6, #3
    c794:	e30530e8 	movw	r3, #20712	; 0x50e8
    c798:	e3403001 	movt	r3, #1
    c79c:	e0831001 	add	r1, r3, r1
    c7a0:	e0240094 	mla	r4, r4, r0, r0
    c7a4:	e30f2a8a 	movw	r2, #64138	; 0xfa8a
    c7a8:	e3a03000 	mov	r3, #0
    c7ac:	e1a00005 	mov	r0, r5
    c7b0:	e58d2000 	str	r2, [sp]
    c7b4:	e0472004 	sub	r2, r7, r4
    c7b8:	e1d112dc 	ldrsb	r1, [r1, #44]	; 0x2c
    c7bc:	ebffff74 	bl	c594 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c7c0:	e28dd00c 	add	sp, sp, #12
    c7c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c7c8 <CScreenDevice::DisplayChar(char) [clone .part.3]>:
    c7c8:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    c7cc:	e92d4010 	push	{r4, lr}
    c7d0:	e1a04000 	mov	r4, r0
    c7d4:	e3530000 	cmp	r3, #0
    c7d8:	e24dd008 	sub	sp, sp, #8
    c7dc:	e5902048 	ldr	r2, [r0, #72]	; 0x48
    c7e0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    c7e4:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
    c7e8:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    c7ec:	e58d0000 	str	r0, [sp]
    c7f0:	e1a00004 	mov	r0, r4
    c7f4:	ebffff66 	bl	c594 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c7f8:	e1a00004 	mov	r0, r4
    c7fc:	e28dd008 	add	sp, sp, #8
    c800:	e8bd4010 	pop	{r4, lr}
    c804:	eafffdeb 	b	bfb8 <CScreenDevice::CursorRight()>

0000c808 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    c808:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c80c:	e1a05000 	mov	r5, r0
    c810:	e1a06001 	mov	r6, r1
    c814:	e280701c 	add	r7, r0, #28
    c818:	e5954048 	ldr	r4, [r5, #72]	; 0x48
    c81c:	e1a00007 	mov	r0, r7
    c820:	eb00185a 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c824:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    c828:	e0264096 	mla	r6, r6, r0, r4
    c82c:	e5954048 	ldr	r4, [r5, #72]	; 0x48
    c830:	e1560003 	cmp	r6, r3
    c834:	21a06003 	movcs	r6, r3
    c838:	e1540006 	cmp	r4, r6
    c83c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c840:	e1a01004 	mov	r1, r4
    c844:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    c848:	e1a00005 	mov	r0, r5
    c84c:	ebffff88 	bl	c674 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c850:	e1a00007 	mov	r0, r7
    c854:	eb00184d 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c858:	e0844000 	add	r4, r4, r0
    c85c:	e1540006 	cmp	r4, r6
    c860:	3afffff6 	bcc	c840 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    c864:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c868 <CScreenDevice::InvertCursor() [clone .part.6]>:
    c868:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c86c:	e1a04000 	mov	r4, r0
    c870:	e280701c 	add	r7, r0, #28
    c874:	e1a00007 	mov	r0, r7
    c878:	e5949020 	ldr	r9, [r4, #32]
    c87c:	eb001847 	bl	129a0 <CCharGenerator::GetUnderline() const>
    c880:	e1a08000 	mov	r8, r0
    c884:	e1a00007 	mov	r0, r7
    c888:	eb001842 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c88c:	e1500008 	cmp	r0, r8
    c890:	9a000037 	bls	c974 <CScreenDevice::InvertCursor() [clone .part.6]+0x10c>
    c894:	e1a06009 	mov	r6, r9
    c898:	e3a05000 	mov	r5, #0
    c89c:	ea000013 	b	c8f0 <CScreenDevice::InvertCursor() [clone .part.6]+0x88>
    c8a0:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    c8a4:	e0852003 	add	r2, r5, r3
    c8a8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c8ac:	e1520001 	cmp	r2, r1
    c8b0:	e0883003 	add	r3, r8, r3
    c8b4:	2a000026 	bcs	c954 <CScreenDevice::InvertCursor() [clone .part.6]+0xec>
    c8b8:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c8bc:	e1530001 	cmp	r3, r1
    c8c0:	2a000023 	bcs	c954 <CScreenDevice::InvertCursor() [clone .part.6]+0xec>
    c8c4:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    c8c8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    c8cc:	e021239c 	mla	r1, ip, r3, r2
    c8d0:	e1a02081 	lsl	r2, r1, #1
    c8d4:	e1a03002 	mov	r3, r2
    c8d8:	e19020b2 	ldrh	r2, [r0, r2]
    c8dc:	e1c620b0 	strh	r2, [r6]
    c8e0:	e1d425b2 	ldrh	r2, [r4, #82]	; 0x52
    c8e4:	e18020b3 	strh	r2, [r0, r3]
    c8e8:	e2855001 	add	r5, r5, #1
    c8ec:	e2866002 	add	r6, r6, #2
    c8f0:	e1a00007 	mov	r0, r7
    c8f4:	e1a09006 	mov	r9, r6
    c8f8:	eb001824 	bl	12990 <CCharGenerator::GetCharWidth() const>
    c8fc:	e1500005 	cmp	r0, r5
    c900:	9a000016 	bls	c960 <CScreenDevice::InvertCursor() [clone .part.6]+0xf8>
    c904:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
    c908:	e3530000 	cmp	r3, #0
    c90c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c910:	0affffe2 	beq	c8a0 <CScreenDevice::InvertCursor() [clone .part.6]+0x38>
    c914:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    c918:	e0853003 	add	r3, r5, r3
    c91c:	e1530002 	cmp	r3, r2
    c920:	2afffff0 	bcs	c8e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    c924:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c928:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c92c:	e0882002 	add	r2, r8, r2
    c930:	e1520001 	cmp	r2, r1
    c934:	2affffeb 	bcs	c8e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    c938:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    c93c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    c940:	e1d600b0 	ldrh	r0, [r6]
    c944:	e023329c 	mla	r3, ip, r2, r3
    c948:	e1a03083 	lsl	r3, r3, #1
    c94c:	e18100b3 	strh	r0, [r1, r3]
    c950:	eaffffe4 	b	c8e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    c954:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c958:	e1c630b0 	strh	r3, [r6]
    c95c:	eaffffe1 	b	c8e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    c960:	e2888001 	add	r8, r8, #1
    c964:	e1a00007 	mov	r0, r7
    c968:	eb00180a 	bl	12998 <CCharGenerator::GetCharHeight() const>
    c96c:	e1500008 	cmp	r0, r8
    c970:	8affffc7 	bhi	c894 <CScreenDevice::InvertCursor() [clone .part.6]+0x2c>
    c974:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
    c978:	e2233001 	eor	r3, r3, #1
    c97c:	e5c43051 	strb	r3, [r4, #81]	; 0x51
    c980:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000c984 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
    c984:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c988:	e1a04000 	mov	r4, r0
    c98c:	e1a07001 	mov	r7, r1
    c990:	e24dd00c 	sub	sp, sp, #12
    c994:	e1a06002 	mov	r6, r2
    c998:	e1a05003 	mov	r5, r3
    c99c:	e280a01c 	add	sl, r0, #28
    c9a0:	eb0018c2 	bl	12cb0 <CDevice::CDevice()>
    c9a4:	e59f21b4 	ldr	r2, [pc, #436]	; cb60 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
    c9a8:	e3a09000 	mov	r9, #0
    c9ac:	e2843044 	add	r3, r4, #68	; 0x44
    c9b0:	e5842000 	str	r2, [r4]
    c9b4:	e1a0000a 	mov	r0, sl
    c9b8:	e5847008 	str	r7, [r4, #8]
    c9bc:	e284806c 	add	r8, r4, #108	; 0x6c
    c9c0:	e5c4600c 	strb	r6, [r4, #12]
    c9c4:	e2847094 	add	r7, r4, #148	; 0x94
    c9c8:	e5845010 	str	r5, [r4, #16]
    c9cc:	e3a0b001 	mov	fp, #1
    c9d0:	e5849014 	str	r9, [r4, #20]
    c9d4:	e5c49018 	strb	r9, [r4, #24]
    c9d8:	e58d3004 	str	r3, [sp, #4]
    c9dc:	ebfff09c 	bl	8c54 <CGPIOPin::CGPIOPin()>
    c9e0:	e2840044 	add	r0, r4, #68	; 0x44
    c9e4:	ebfff09a 	bl	8c54 <CGPIOPin::CGPIOPin()>
    c9e8:	e1a00008 	mov	r0, r8
    c9ec:	ebfff098 	bl	8c54 <CGPIOPin::CGPIOPin()>
    c9f0:	e1a00007 	mov	r0, r7
    c9f4:	ebfff096 	bl	8c54 <CGPIOPin::CGPIOPin()>
    c9f8:	e594c010 	ldr	ip, [r4, #16]
    c9fc:	e1560009 	cmp	r6, r9
    ca00:	e2841a01 	add	r1, r4, #4096	; 0x1000
    ca04:	13a00002 	movne	r0, #2
    ca08:	01a0000b 	moveq	r0, fp
    ca0c:	e15c0009 	cmp	ip, r9
    ca10:	e58498bc 	str	r9, [r4, #2236]	; 0x8bc
    ca14:	e58498c0 	str	r9, [r4, #2240]	; 0x8c0
    ca18:	e58498c4 	str	r9, [r4, #2244]	; 0x8c4
    ca1c:	e58190c8 	str	r9, [r1, #200]	; 0xc8
    ca20:	e58100e0 	str	r0, [r1, #224]	; 0xe0
    ca24:	e58190d4 	str	r9, [r1, #212]	; 0xd4
    ca28:	e58190cc 	str	r9, [r1, #204]	; 0xcc
    ca2c:	e581b0d0 	str	fp, [r1, #208]	; 0xd0
    ca30:	e581b0e4 	str	fp, [r1, #228]	; 0xe4
    ca34:	1a00002a 	bne	cae4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>
    ca38:	e30761bc 	movw	r6, #29116	; 0x71bc
    ca3c:	e3406001 	movt	r6, #1
    ca40:	e1a03205 	lsl	r3, r5, #4
    ca44:	e0862003 	add	r2, r6, r3
    ca48:	e5922004 	ldr	r2, [r2, #4]
    ca4c:	e3520035 	cmp	r2, #53	; 0x35
    ca50:	8a000023 	bhi	cae4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>
    ca54:	e3072258 	movw	r2, #29272	; 0x7258
    ca58:	e3402001 	movt	r2, #1
    ca5c:	e5921010 	ldr	r1, [r2, #16]
    ca60:	e1510009 	cmp	r1, r9
    ca64:	1a000033 	bne	cb38 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b4>
    ca68:	e7961105 	ldr	r1, [r6, r5, lsl #2]
    ca6c:	e5824010 	str	r4, [r2, #16]
    ca70:	e3510000 	cmp	r1, #0
    ca74:	e5841014 	str	r1, [r4, #20]
    ca78:	0a000033 	beq	cb4c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c8>
    ca7c:	e3550000 	cmp	r5, #0
    ca80:	0a00001a 	beq	caf0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x16c>
    ca84:	e0866003 	add	r6, r6, r3
    ca88:	e1a00008 	mov	r0, r8
    ca8c:	e5961004 	ldr	r1, [r6, #4]
    ca90:	ebfff09a 	bl	8d00 <CGPIOPin::AssignPin(unsigned int)>
    ca94:	e5961008 	ldr	r1, [r6, #8]
    ca98:	e3a02001 	mov	r2, #1
    ca9c:	e1a00008 	mov	r0, r8
    caa0:	e2811004 	add	r1, r1, #4
    caa4:	e6ef1071 	uxtb	r1, r1
    caa8:	ebfff0b5 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    caac:	e596100c 	ldr	r1, [r6, #12]
    cab0:	e1a00007 	mov	r0, r7
    cab4:	ebfff091 	bl	8d00 <CGPIOPin::AssignPin(unsigned int)>
    cab8:	e5961010 	ldr	r1, [r6, #16]
    cabc:	e3a02001 	mov	r2, #1
    cac0:	e1a00007 	mov	r0, r7
    cac4:	e2811004 	add	r1, r1, #4
    cac8:	e6ef1071 	uxtb	r1, r1
    cacc:	ebfff0ac 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cad0:	e1a00007 	mov	r0, r7
    cad4:	e3a01002 	mov	r1, #2
    cad8:	ebfff2a9 	bl	9584 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    cadc:	e3a03001 	mov	r3, #1
    cae0:	e5c43018 	strb	r3, [r4, #24]
    cae4:	e1a00004 	mov	r0, r4
    cae8:	e28dd00c 	add	sp, sp, #12
    caec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    caf0:	e3a01020 	mov	r1, #32
    caf4:	e1a0000a 	mov	r0, sl
    caf8:	e58d3004 	str	r3, [sp, #4]
    cafc:	e2849044 	add	r9, r4, #68	; 0x44
    cb00:	ebfff07e 	bl	8d00 <CGPIOPin::AssignPin(unsigned int)>
    cb04:	e1a0200b 	mov	r2, fp
    cb08:	e1a01005 	mov	r1, r5
    cb0c:	e1a0000a 	mov	r0, sl
    cb10:	ebfff09b 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cb14:	e3a01021 	mov	r1, #33	; 0x21
    cb18:	e1a00009 	mov	r0, r9
    cb1c:	ebfff077 	bl	8d00 <CGPIOPin::AssignPin(unsigned int)>
    cb20:	e1a0200b 	mov	r2, fp
    cb24:	e1a01005 	mov	r1, r5
    cb28:	e1a00009 	mov	r0, r9
    cb2c:	ebfff094 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cb30:	e59d3004 	ldr	r3, [sp, #4]
    cb34:	eaffffd2 	b	ca84 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x100>
    cb38:	e59f3020 	ldr	r3, [pc, #32]	; cb60 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
    cb3c:	e3a020b0 	mov	r2, #176	; 0xb0
    cb40:	e2831020 	add	r1, r3, #32
    cb44:	e283002c 	add	r0, r3, #44	; 0x2c
    cb48:	eb001594 	bl	121a0 <assertion_failed>
    cb4c:	e59f300c 	ldr	r3, [pc, #12]	; cb60 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
    cb50:	e3a020b4 	mov	r2, #180	; 0xb4
    cb54:	e2831020 	add	r1, r3, #32
    cb58:	e2830044 	add	r0, r3, #68	; 0x44
    cb5c:	eb00158f 	bl	121a0 <assertion_failed>
    cb60:	00015124 	.word	0x00015124

0000cb64 <CSerialDevice::~CSerialDevice()>:
    cb64:	e5d03018 	ldrb	r3, [r0, #24]
    cb68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb6c:	e1a04000 	mov	r4, r0
    cb70:	e3530000 	cmp	r3, #0
    cb74:	e59f6130 	ldr	r6, [pc, #304]	; ccac <CSerialDevice::~CSerialDevice()+0x148>
    cb78:	e5806000 	str	r6, [r0]
    cb7c:	0a000037 	beq	cc60 <CSerialDevice::~CSerialDevice()+0xfc>
    cb80:	ebffef97 	bl	89e4 <CDeviceNameService::Get()>
    cb84:	e3075258 	movw	r5, #29272	; 0x7258
    cb88:	e3405001 	movt	r5, #1
    cb8c:	e5942010 	ldr	r2, [r4, #16]
    cb90:	e2861058 	add	r1, r6, #88	; 0x58
    cb94:	e3a03000 	mov	r3, #0
    cb98:	e2822001 	add	r2, r2, #1
    cb9c:	ebffefb7 	bl	8a80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    cba0:	e595300c 	ldr	r3, [r5, #12]
    cba4:	e3a01001 	mov	r1, #1
    cba8:	e5942010 	ldr	r2, [r4, #16]
    cbac:	e1c33211 	bic	r3, r3, r1, lsl r2
    cbb0:	e585300c 	str	r3, [r5, #12]
    cbb4:	f57ff04f 	dsb	sy
    cbb8:	e5942014 	ldr	r2, [r4, #20]
    cbbc:	e3a03000 	mov	r3, #0
    cbc0:	e5941008 	ldr	r1, [r4, #8]
    cbc4:	e1510003 	cmp	r1, r3
    cbc8:	e5823038 	str	r3, [r2, #56]	; 0x38
    cbcc:	e5942014 	ldr	r2, [r4, #20]
    cbd0:	e5823030 	str	r3, [r2, #48]	; 0x30
    cbd4:	0a00000e 	beq	cc14 <CSerialDevice::~CSerialDevice()+0xb0>
    cbd8:	e5953000 	ldr	r3, [r5]
    cbdc:	e2433001 	sub	r3, r3, #1
    cbe0:	e3530000 	cmp	r3, #0
    cbe4:	e5853000 	str	r3, [r5]
    cbe8:	1a000009 	bne	cc14 <CSerialDevice::~CSerialDevice()+0xb0>
    cbec:	e5950004 	ldr	r0, [r5, #4]
    cbf0:	e3500000 	cmp	r0, #0
    cbf4:	0a000028 	beq	cc9c <CSerialDevice::~CSerialDevice()+0x138>
    cbf8:	e5d53008 	ldrb	r3, [r5, #8]
    cbfc:	e3530000 	cmp	r3, #0
    cc00:	0a000022 	beq	cc90 <CSerialDevice::~CSerialDevice()+0x12c>
    cc04:	eb001452 	bl	11d54 <CInterruptSystem::DisconnectFIQ()>
    cc08:	e3a03000 	mov	r3, #0
    cc0c:	e5853004 	str	r3, [r5, #4]
    cc10:	e5c53008 	strb	r3, [r5, #8]
    cc14:	e284606c 	add	r6, r4, #108	; 0x6c
    cc18:	e3a02001 	mov	r2, #1
    cc1c:	e1a00006 	mov	r0, r6
    cc20:	e3a01000 	mov	r1, #0
    cc24:	e2847094 	add	r7, r4, #148	; 0x94
    cc28:	ebfff055 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cc2c:	e1a00007 	mov	r0, r7
    cc30:	e3a02001 	mov	r2, #1
    cc34:	e3a01000 	mov	r1, #0
    cc38:	ebfff051 	bl	8d84 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cc3c:	e5943010 	ldr	r3, [r4, #16]
    cc40:	e3a02000 	mov	r2, #0
    cc44:	e1a00007 	mov	r0, r7
    cc48:	e5c42018 	strb	r2, [r4, #24]
    cc4c:	e0855103 	add	r5, r5, r3, lsl #2
    cc50:	e5852010 	str	r2, [r5, #16]
    cc54:	ebfff022 	bl	8ce4 <CGPIOPin::~CGPIOPin()>
    cc58:	e1a00006 	mov	r0, r6
    cc5c:	ea000002 	b	cc6c <CSerialDevice::~CSerialDevice()+0x108>
    cc60:	e2800094 	add	r0, r0, #148	; 0x94
    cc64:	ebfff01e 	bl	8ce4 <CGPIOPin::~CGPIOPin()>
    cc68:	e284006c 	add	r0, r4, #108	; 0x6c
    cc6c:	ebfff01c 	bl	8ce4 <CGPIOPin::~CGPIOPin()>
    cc70:	e2840044 	add	r0, r4, #68	; 0x44
    cc74:	ebfff01a 	bl	8ce4 <CGPIOPin::~CGPIOPin()>
    cc78:	e284001c 	add	r0, r4, #28
    cc7c:	ebfff018 	bl	8ce4 <CGPIOPin::~CGPIOPin()>
    cc80:	e1a00004 	mov	r0, r4
    cc84:	eb0017dc 	bl	12bfc <CDevice::~CDevice()>
    cc88:	e1a00004 	mov	r0, r4
    cc8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cc90:	e3a01039 	mov	r1, #57	; 0x39
    cc94:	eb0014b2 	bl	11f64 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    cc98:	eaffffda 	b	cc08 <CSerialDevice::~CSerialDevice()+0xa4>
    cc9c:	e3a020e2 	mov	r2, #226	; 0xe2
    cca0:	e2861020 	add	r1, r6, #32
    cca4:	e2860060 	add	r0, r6, #96	; 0x60
    cca8:	eb00153c 	bl	121a0 <assertion_failed>
    ccac:	00015124 	.word	0x00015124

0000ccb0 <CSerialDevice::~CSerialDevice()>:
    ccb0:	e92d4010 	push	{r4, lr}
    ccb4:	e1a04000 	mov	r4, r0
    ccb8:	ebffffa9 	bl	cb64 <CSerialDevice::~CSerialDevice()>
    ccbc:	e1a00004 	mov	r0, r4
    ccc0:	e30110e8 	movw	r1, #4328	; 0x10e8
    ccc4:	eb000fb4 	bl	10b9c <operator delete(void*, unsigned int)>
    ccc8:	e1a00004 	mov	r0, r4
    cccc:	e8bd8010 	pop	{r4, pc}

0000ccd0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
    ccd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccd4:	e5d05018 	ldrb	r5, [r0, #24]
    ccd8:	e24dd00c 	sub	sp, sp, #12
    ccdc:	e3550000 	cmp	r5, #0
    cce0:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
    cce4:	1a000002 	bne	ccf4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x24>
    cce8:	e1a00005 	mov	r0, r5
    ccec:	e28dd00c 	add	sp, sp, #12
    ccf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccf4:	e1a07003 	mov	r7, r3
    ccf8:	e1a06002 	mov	r6, r2
    ccfc:	e1a0a001 	mov	sl, r1
    cd00:	e1a04000 	mov	r4, r0
    cd04:	ebfff94d 	bl	b240 <CMachineInfo::Get()>
    cd08:	e3a01002 	mov	r1, #2
    cd0c:	ebfff862 	bl	ae9c <CMachineInfo::GetClockRate(unsigned int) const>
    cd10:	e3500000 	cmp	r0, #0
    cd14:	0a00007a 	beq	cf04 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
    cd18:	e30037d4 	movw	r3, #2004	; 0x7d4
    cd1c:	e340303d 	movt	r3, #61	; 0x3d
    cd20:	e24a2f4b 	sub	r2, sl, #300	; 0x12c
    cd24:	e1520003 	cmp	r2, r3
    cd28:	8a000079 	bhi	cf14 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>
    cd2c:	e1a0c20a 	lsl	ip, sl, #4
    cd30:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    cd34:	e739fc10 	udiv	r9, r0, ip
    cd38:	e2492001 	sub	r2, r9, #1
    cd3c:	e1520003 	cmp	r2, r3
    cd40:	8a000077 	bhi	cf24 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x254>
    cd44:	e06c099c 	mls	ip, ip, r9, r0
    cd48:	e1a0c18c 	lsl	ip, ip, #3
    cd4c:	e731fa1c 	udiv	r1, ip, sl
    cd50:	e201b001 	and	fp, r1, #1
    cd54:	e08bb0a1 	add	fp, fp, r1, lsr #1
    cd58:	e35b003f 	cmp	fp, #63	; 0x3f
    cd5c:	8a000078 	bhi	cf44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x274>
    cd60:	e5940008 	ldr	r0, [r4, #8]
    cd64:	e3500000 	cmp	r0, #0
    cd68:	0a000013 	beq	cdbc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xec>
    cd6c:	e307a258 	movw	sl, #29272	; 0x7258
    cd70:	e340a001 	movt	sl, #1
    cd74:	e59a3000 	ldr	r3, [sl]
    cd78:	e3530000 	cmp	r3, #0
    cd7c:	1a000020 	bne	ce04 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x134>
    cd80:	e5d4200c 	ldrb	r2, [r4, #12]
    cd84:	e58a0004 	str	r0, [sl, #4]
    cd88:	e3520000 	cmp	r2, #0
    cd8c:	e5ca2008 	strb	r2, [sl, #8]
    cd90:	1a000025 	bne	ce2c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x15c>
    cd94:	e1a03002 	mov	r3, r2
    cd98:	e3a01039 	mov	r1, #57	; 0x39
    cd9c:	e30d289c 	movw	r2, #55452	; 0xd89c
    cda0:	e3402000 	movt	r2, #0
    cda4:	eb00142f 	bl	11e68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    cda8:	e59a3000 	ldr	r3, [sl]
    cdac:	e3530000 	cmp	r3, #0
    cdb0:	1a000071 	bne	cf7c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2ac>
    cdb4:	e3a03001 	mov	r3, #1
    cdb8:	e58a3000 	str	r3, [sl]
    cdbc:	e5943014 	ldr	r3, [r4, #20]
    cdc0:	e3a01000 	mov	r1, #0
    cdc4:	e30027ff 	movw	r2, #2047	; 0x7ff
    cdc8:	e2466005 	sub	r6, r6, #5
    cdcc:	e5831038 	str	r1, [r3, #56]	; 0x38
    cdd0:	e5943014 	ldr	r3, [r4, #20]
    cdd4:	e5832044 	str	r2, [r3, #68]	; 0x44
    cdd8:	e5943014 	ldr	r3, [r4, #20]
    cddc:	e5839024 	str	r9, [r3, #36]	; 0x24
    cde0:	e5943014 	ldr	r3, [r4, #20]
    cde4:	e583b028 	str	fp, [r3, #40]	; 0x28
    cde8:	e3560003 	cmp	r6, #3
    cdec:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
    cdf0:	ea00004f 	b	cf34 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x264>
    cdf4:	0000cef4 	.word	0x0000cef4
    cdf8:	0000ceec 	.word	0x0000ceec
    cdfc:	0000ce40 	.word	0x0000ce40
    ce00:	0000cefc 	.word	0x0000cefc
    ce04:	e59a3004 	ldr	r3, [sl, #4]
    ce08:	e1500003 	cmp	r0, r3
    ce0c:	0a000056 	beq	cf6c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x29c>
    ce10:	e5943010 	ldr	r3, [r4, #16]
    ce14:	e3a02000 	mov	r2, #0
    ce18:	e5c42018 	strb	r2, [r4, #24]
    ce1c:	e1a05002 	mov	r5, r2
    ce20:	e08aa103 	add	sl, sl, r3, lsl #2
    ce24:	e58a2010 	str	r2, [sl, #16]
    ce28:	eaffffae 	b	cce8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
    ce2c:	e30d289c 	movw	r2, #55452	; 0xd89c
    ce30:	e3402000 	movt	r2, #0
    ce34:	e3a01039 	mov	r1, #57	; 0x39
    ce38:	eb001391 	bl	11c84 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    ce3c:	eaffffd9 	b	cda8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xd8>
    ce40:	e3a03050 	mov	r3, #80	; 0x50
    ce44:	e2472001 	sub	r2, r7, #1
    ce48:	e3520001 	cmp	r2, #1
    ce4c:	8a000051 	bhi	cf98 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c8>
    ce50:	e3570002 	cmp	r7, #2
    ce54:	03833008 	orreq	r3, r3, #8
    ce58:	e3580001 	cmp	r8, #1
    ce5c:	0a00003c 	beq	cf54 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x284>
    ce60:	3a000002 	bcc	ce70 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a0>
    ce64:	e3580002 	cmp	r8, #2
    ce68:	1a00003b 	bne	cf5c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28c>
    ce6c:	e3833006 	orr	r3, r3, #6
    ce70:	e5942008 	ldr	r2, [r4, #8]
    ce74:	e3520000 	cmp	r2, #0
    ce78:	0a000043 	beq	cf8c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
    ce7c:	e594c014 	ldr	ip, [r4, #20]
    ce80:	e3a0e009 	mov	lr, #9
    ce84:	e3a01e45 	mov	r1, #1104	; 0x450
    ce88:	e3072258 	movw	r2, #29272	; 0x7258
    ce8c:	e3402001 	movt	r2, #1
    ce90:	e3a00001 	mov	r0, #1
    ce94:	e58ce034 	str	lr, [ip, #52]	; 0x34
    ce98:	e594c014 	ldr	ip, [r4, #20]
    ce9c:	e58c302c 	str	r3, [ip, #44]	; 0x2c
    cea0:	e5943014 	ldr	r3, [r4, #20]
    cea4:	e5831038 	str	r1, [r3, #56]	; 0x38
    cea8:	e592300c 	ldr	r3, [r2, #12]
    ceac:	e5941010 	ldr	r1, [r4, #16]
    ceb0:	e1833110 	orr	r3, r3, r0, lsl r1
    ceb4:	e582300c 	str	r3, [r2, #12]
    ceb8:	f57ff04f 	dsb	sy
    cebc:	e5943014 	ldr	r3, [r4, #20]
    cec0:	e3002301 	movw	r2, #769	; 0x301
    cec4:	e5832030 	str	r2, [r3, #48]	; 0x30
    cec8:	ebffeec5 	bl	89e4 <CDeviceNameService::Get()>
    cecc:	e5942010 	ldr	r2, [r4, #16]
    ced0:	e3a01000 	mov	r1, #0
    ced4:	e1a03004 	mov	r3, r4
    ced8:	e58d1000 	str	r1, [sp]
    cedc:	e2822001 	add	r2, r2, #1
    cee0:	e59f10c0 	ldr	r1, [pc, #192]	; cfa8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d8>
    cee4:	ebffeecb 	bl	8a18 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    cee8:	eaffff7e 	b	cce8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
    ceec:	e3a03030 	mov	r3, #48	; 0x30
    cef0:	eaffffd3 	b	ce44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x174>
    cef4:	e3a03010 	mov	r3, #16
    cef8:	eaffffd1 	b	ce44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x174>
    cefc:	e3a03070 	mov	r3, #112	; 0x70
    cf00:	eaffffcf 	b	ce44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x174>
    cf04:	e59f10a0 	ldr	r1, [pc, #160]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf08:	e3a02c01 	mov	r2, #256	; 0x100
    cf0c:	e2810058 	add	r0, r1, #88	; 0x58
    cf10:	eb0014a2 	bl	121a0 <assertion_failed>
    cf14:	e59f1090 	ldr	r1, [pc, #144]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf18:	e3002102 	movw	r2, #258	; 0x102
    cf1c:	e2810068 	add	r0, r1, #104	; 0x68
    cf20:	eb00149e 	bl	121a0 <assertion_failed>
    cf24:	e59f1080 	ldr	r1, [pc, #128]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf28:	e3002105 	movw	r2, #261	; 0x105
    cf2c:	e2810094 	add	r0, r1, #148	; 0x94
    cf30:	eb00149a 	bl	121a0 <assertion_failed>
    cf34:	e59f1070 	ldr	r1, [pc, #112]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf38:	e300213f 	movw	r2, #319	; 0x13f
    cf3c:	e28100f4 	add	r0, r1, #244	; 0xf4
    cf40:	eb001496 	bl	121a0 <assertion_failed>
    cf44:	e59f1060 	ldr	r1, [pc, #96]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf48:	e3a02f42 	mov	r2, #264	; 0x108
    cf4c:	e28100b8 	add	r0, r1, #184	; 0xb8
    cf50:	eb001492 	bl	121a0 <assertion_failed>
    cf54:	e3833002 	orr	r3, r3, #2
    cf58:	eaffffc4 	b	ce70 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a0>
    cf5c:	e59f1048 	ldr	r1, [pc, #72]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf60:	e3002157 	movw	r2, #343	; 0x157
    cf64:	e28100f4 	add	r0, r1, #244	; 0xf4
    cf68:	eb00148c 	bl	121a0 <assertion_failed>
    cf6c:	e5d4200c 	ldrb	r2, [r4, #12]
    cf70:	e5da3008 	ldrb	r3, [sl, #8]
    cf74:	e1520003 	cmp	r2, r3
    cf78:	1affffa4 	bne	ce10 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x140>
    cf7c:	e59f1028 	ldr	r1, [pc, #40]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf80:	e300212a 	movw	r2, #298	; 0x12a
    cf84:	e28100cc 	add	r0, r1, #204	; 0xcc
    cf88:	eb001484 	bl	121a0 <assertion_failed>
    cf8c:	e5942014 	ldr	r2, [r4, #20]
    cf90:	e582302c 	str	r3, [r2, #44]	; 0x2c
    cf94:	eaffffc8 	b	cebc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1ec>
    cf98:	e59f100c 	ldr	r1, [pc, #12]	; cfac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    cf9c:	e3002143 	movw	r2, #323	; 0x143
    cfa0:	e28100f8 	add	r0, r1, #248	; 0xf8
    cfa4:	eb00147d 	bl	121a0 <assertion_failed>
    cfa8:	0001517c 	.word	0x0001517c
    cfac:	00015144 	.word	0x00015144

0000cfb0 <CSerialDevice::Write(void const*, unsigned int)>:
    cfb0:	e5d03018 	ldrb	r3, [r0, #24]
    cfb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cfb8:	e3530000 	cmp	r3, #0
    cfbc:	0a000058 	beq	d124 <CSerialDevice::Write(void const*, unsigned int)+0x174>
    cfc0:	e2804a01 	add	r4, r0, #4096	; 0x1000
    cfc4:	e1a07000 	mov	r7, r0
    cfc8:	e1a05001 	mov	r5, r1
    cfcc:	e1a08002 	mov	r8, r2
    cfd0:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    cfd4:	e3500000 	cmp	r0, #0
    cfd8:	1a000047 	bne	d0fc <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    cfdc:	e3550000 	cmp	r5, #0
    cfe0:	0a000053 	beq	d134 <CSerialDevice::Write(void const*, unsigned int)+0x184>
    cfe4:	e3580000 	cmp	r8, #0
    cfe8:	01a06008 	moveq	r6, r8
    cfec:	0a000014 	beq	d044 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    cff0:	e3a06000 	mov	r6, #0
    cff4:	ea000002 	b	d004 <CSerialDevice::Write(void const*, unsigned int)+0x54>
    cff8:	e2866001 	add	r6, r6, #1
    cffc:	e1560008 	cmp	r6, r8
    d000:	0a00000f 	beq	d044 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    d004:	e5d51000 	ldrb	r1, [r5]
    d008:	e1a00007 	mov	r0, r7
    d00c:	eb000174 	bl	d5e4 <CSerialDevice::Write(unsigned char)>
    d010:	e3500000 	cmp	r0, #0
    d014:	0a00000a 	beq	d044 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    d018:	e4d53001 	ldrb	r3, [r5], #1
    d01c:	e353000a 	cmp	r3, #10
    d020:	1afffff4 	bne	cff8 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d024:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    d028:	e3130001 	tst	r3, #1
    d02c:	0afffff1 	beq	cff8 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d030:	e3a0100d 	mov	r1, #13
    d034:	e1a00007 	mov	r0, r7
    d038:	eb000169 	bl	d5e4 <CSerialDevice::Write(unsigned char)>
    d03c:	e3500000 	cmp	r0, #0
    d040:	1affffec 	bne	cff8 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d044:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    d048:	e3530000 	cmp	r3, #0
    d04c:	1a00002c 	bne	d104 <CSerialDevice::Write(void const*, unsigned int)+0x154>
    d050:	e5973008 	ldr	r3, [r7, #8]
    d054:	e3530000 	cmp	r3, #0
    d058:	0a000022 	beq	d0e8 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    d05c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d060:	e3500000 	cmp	r0, #0
    d064:	1a000028 	bne	d10c <CSerialDevice::Write(void const*, unsigned int)+0x15c>
    d068:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d06c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d070:	e1520003 	cmp	r2, r3
    d074:	0a00001b 	beq	d0e8 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    d078:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d07c:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d080:	e1520003 	cmp	r2, r3
    d084:	1a00000d 	bne	d0c0 <CSerialDevice::Write(void const*, unsigned int)+0x110>
    d088:	ea000013 	b	d0dc <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    d08c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d090:	e2831001 	add	r1, r3, #1
    d094:	e0873003 	add	r3, r7, r3
    d098:	e58410cc 	str	r1, [r4, #204]	; 0xcc
    d09c:	e5d338c8 	ldrb	r3, [r3, #2248]	; 0x8c8
    d0a0:	e5823000 	str	r3, [r2]
    d0a4:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d0a8:	e7ea3053 	ubfx	r3, r3, #0, #11
    d0ac:	e58430cc 	str	r3, [r4, #204]	; 0xcc
    d0b0:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d0b4:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d0b8:	e1520003 	cmp	r2, r3
    d0bc:	0a000006 	beq	d0dc <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    d0c0:	e5972014 	ldr	r2, [r7, #20]
    d0c4:	e5923018 	ldr	r3, [r2, #24]
    d0c8:	e3130020 	tst	r3, #32
    d0cc:	0affffee 	beq	d08c <CSerialDevice::Write(void const*, unsigned int)+0xdc>
    d0d0:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    d0d4:	e3833020 	orr	r3, r3, #32
    d0d8:	e5823038 	str	r3, [r2, #56]	; 0x38
    d0dc:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
    d0e0:	e3530000 	cmp	r3, #0
    d0e4:	1a000001 	bne	d0f0 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    d0e8:	e1a00006 	mov	r0, r6
    d0ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d0f0:	eb001283 	bl	11b04 <LeaveCritical>
    d0f4:	e1a00006 	mov	r0, r6
    d0f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d0fc:	eb001253 	bl	11a50 <EnterCritical>
    d100:	eaffffb5 	b	cfdc <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    d104:	eb00127e 	bl	11b04 <LeaveCritical>
    d108:	eaffffd0 	b	d050 <CSerialDevice::Write(void const*, unsigned int)+0xa0>
    d10c:	eb00124f 	bl	11a50 <EnterCritical>
    d110:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d114:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d118:	e1520003 	cmp	r2, r3
    d11c:	1affffd5 	bne	d078 <CSerialDevice::Write(void const*, unsigned int)+0xc8>
    d120:	eaffffed 	b	d0dc <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    d124:	e59f1018 	ldr	r1, [pc, #24]	; d144 <CSerialDevice::Write(void const*, unsigned int)+0x194>
    d128:	e3002176 	movw	r2, #374	; 0x176
    d12c:	e2810f47 	add	r0, r1, #284	; 0x11c
    d130:	eb00141a 	bl	121a0 <assertion_failed>
    d134:	e59f1008 	ldr	r1, [pc, #8]	; d144 <CSerialDevice::Write(void const*, unsigned int)+0x194>
    d138:	e3002183 	movw	r2, #387	; 0x183
    d13c:	e2810f4a 	add	r0, r1, #296	; 0x128
    d140:	eb001416 	bl	121a0 <assertion_failed>
    d144:	00015144 	.word	0x00015144

0000d148 <CSerialDevice::Read(void*, unsigned int)>:
    d148:	e5d03018 	ldrb	r3, [r0, #24]
    d14c:	e92d4070 	push	{r4, r5, r6, lr}
    d150:	e3530000 	cmp	r3, #0
    d154:	e24dd008 	sub	sp, sp, #8
    d158:	0a00005e 	beq	d2d8 <CSerialDevice::Read(void*, unsigned int)+0x190>
    d15c:	e3510000 	cmp	r1, #0
    d160:	0a000060 	beq	d2e8 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    d164:	e5906008 	ldr	r6, [r0, #8]
    d168:	e1a04000 	mov	r4, r0
    d16c:	e3560000 	cmp	r6, #0
    d170:	0a000035 	beq	d24c <CSerialDevice::Read(void*, unsigned int)+0x104>
    d174:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d178:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d17c:	e3500000 	cmp	r0, #0
    d180:	1a000021 	bne	d20c <CSerialDevice::Read(void*, unsigned int)+0xc4>
    d184:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d188:	e3530000 	cmp	r3, #0
    d18c:	ba000024 	blt	d224 <CSerialDevice::Read(void*, unsigned int)+0xdc>
    d190:	e3520000 	cmp	r2, #0
    d194:	0a000057 	beq	d2f8 <CSerialDevice::Read(void*, unsigned int)+0x1b0>
    d198:	e59408bc 	ldr	r0, [r4, #2236]	; 0x8bc
    d19c:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d1a0:	e1500003 	cmp	r0, r3
    d1a4:	0a000053 	beq	d2f8 <CSerialDevice::Read(void*, unsigned int)+0x1b0>
    d1a8:	e0812002 	add	r2, r1, r2
    d1ac:	e1a0c001 	mov	ip, r1
    d1b0:	ea000003 	b	d1c4 <CSerialDevice::Read(void*, unsigned int)+0x7c>
    d1b4:	e594e8bc 	ldr	lr, [r4, #2236]	; 0x8bc
    d1b8:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d1bc:	e15e0003 	cmp	lr, r3
    d1c0:	0a00000b 	beq	d1f4 <CSerialDevice::Read(void*, unsigned int)+0xac>
    d1c4:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d1c8:	e2830001 	add	r0, r3, #1
    d1cc:	e0843003 	add	r3, r4, r3
    d1d0:	e58408c0 	str	r0, [r4, #2240]	; 0x8c0
    d1d4:	e5d330bc 	ldrb	r3, [r3, #188]	; 0xbc
    d1d8:	e4cc3001 	strb	r3, [ip], #1
    d1dc:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d1e0:	e15c0002 	cmp	ip, r2
    d1e4:	e04c6001 	sub	r6, ip, r1
    d1e8:	e7ea3053 	ubfx	r3, r3, #0, #11
    d1ec:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
    d1f0:	1affffef 	bne	d1b4 <CSerialDevice::Read(void*, unsigned int)+0x6c>
    d1f4:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
    d1f8:	e3530000 	cmp	r3, #0
    d1fc:	1a00000e 	bne	d23c <CSerialDevice::Read(void*, unsigned int)+0xf4>
    d200:	e1a00006 	mov	r0, r6
    d204:	e28dd008 	add	sp, sp, #8
    d208:	e8bd8070 	pop	{r4, r5, r6, pc}
    d20c:	e88d0006 	stm	sp, {r1, r2}
    d210:	eb00120e 	bl	11a50 <EnterCritical>
    d214:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d218:	e89d0006 	ldm	sp, {r1, r2}
    d21c:	e3530000 	cmp	r3, #0
    d220:	aaffffda 	bge	d190 <CSerialDevice::Read(void*, unsigned int)+0x48>
    d224:	e3a03000 	mov	r3, #0
    d228:	e59468c4 	ldr	r6, [r4, #2244]	; 0x8c4
    d22c:	e58438c4 	str	r3, [r4, #2244]	; 0x8c4
    d230:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
    d234:	e3530000 	cmp	r3, #0
    d238:	0afffff0 	beq	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d23c:	eb001230 	bl	11b04 <LeaveCritical>
    d240:	e1a00006 	mov	r0, r6
    d244:	e28dd008 	add	sp, sp, #8
    d248:	e8bd8070 	pop	{r4, r5, r6, pc}
    d24c:	e3520000 	cmp	r2, #0
    d250:	0a000030 	beq	d318 <CSerialDevice::Read(void*, unsigned int)+0x1d0>
    d254:	e5903014 	ldr	r3, [r0, #20]
    d258:	e5930018 	ldr	r0, [r3, #24]
    d25c:	e3100010 	tst	r0, #16
    d260:	1affffe6 	bne	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d264:	e5933000 	ldr	r3, [r3]
    d268:	e3130b01 	tst	r3, #1024	; 0x400
    d26c:	1a000023 	bne	d300 <CSerialDevice::Read(void*, unsigned int)+0x1b8>
    d270:	e3130b02 	tst	r3, #2048	; 0x800
    d274:	1a000023 	bne	d308 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    d278:	e3130c01 	tst	r3, #256	; 0x100
    d27c:	1a000023 	bne	d310 <CSerialDevice::Read(void*, unsigned int)+0x1c8>
    d280:	e0812002 	add	r2, r1, r2
    d284:	e1a0c001 	mov	ip, r1
    d288:	ea00000e 	b	d2c8 <CSerialDevice::Read(void*, unsigned int)+0x180>
    d28c:	e4cc3001 	strb	r3, [ip], #1
    d290:	e152000c 	cmp	r2, ip
    d294:	e04c6001 	sub	r6, ip, r1
    d298:	0affffd8 	beq	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d29c:	e5943014 	ldr	r3, [r4, #20]
    d2a0:	e593e018 	ldr	lr, [r3, #24]
    d2a4:	e31e0010 	tst	lr, #16
    d2a8:	1affffd4 	bne	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d2ac:	e5933000 	ldr	r3, [r3]
    d2b0:	e3130b01 	tst	r3, #1024	; 0x400
    d2b4:	1a000011 	bne	d300 <CSerialDevice::Read(void*, unsigned int)+0x1b8>
    d2b8:	e3130b02 	tst	r3, #2048	; 0x800
    d2bc:	1a000011 	bne	d308 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    d2c0:	e3130c01 	tst	r3, #256	; 0x100
    d2c4:	1a000011 	bne	d310 <CSerialDevice::Read(void*, unsigned int)+0x1c8>
    d2c8:	e3130c02 	tst	r3, #512	; 0x200
    d2cc:	0affffee 	beq	d28c <CSerialDevice::Read(void*, unsigned int)+0x144>
    d2d0:	e3e06003 	mvn	r6, #3
    d2d4:	eaffffc9 	b	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d2d8:	e59f1040 	ldr	r1, [pc, #64]	; d320 <CSerialDevice::Read(void*, unsigned int)+0x1d8>
    d2dc:	e3a02d07 	mov	r2, #448	; 0x1c0
    d2e0:	e2810f47 	add	r0, r1, #284	; 0x11c
    d2e4:	eb0013ad 	bl	121a0 <assertion_failed>
    d2e8:	e59f1030 	ldr	r1, [pc, #48]	; d320 <CSerialDevice::Read(void*, unsigned int)+0x1d8>
    d2ec:	e30021c3 	movw	r2, #451	; 0x1c3
    d2f0:	e2810f4a 	add	r0, r1, #296	; 0x128
    d2f4:	eb0013a9 	bl	121a0 <assertion_failed>
    d2f8:	e3a06000 	mov	r6, #0
    d2fc:	eaffffbc 	b	d1f4 <CSerialDevice::Read(void*, unsigned int)+0xac>
    d300:	e3e06000 	mvn	r6, #0
    d304:	eaffffbd 	b	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d308:	e3e06001 	mvn	r6, #1
    d30c:	eaffffbb 	b	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d310:	e3e06002 	mvn	r6, #2
    d314:	eaffffb9 	b	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d318:	e1a06002 	mov	r6, r2
    d31c:	eaffffb7 	b	d200 <CSerialDevice::Read(void*, unsigned int)+0xb8>
    d320:	00015144 	.word	0x00015144

0000d324 <CSerialDevice::GetOptions() const>:
    d324:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d328:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
    d32c:	e12fff1e 	bx	lr

0000d330 <CSerialDevice::SetOptions(unsigned int)>:
    d330:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d334:	e58010d0 	str	r1, [r0, #208]	; 0xd0
    d338:	e12fff1e 	bx	lr

0000d33c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    d33c:	e5903008 	ldr	r3, [r0, #8]
    d340:	e92d4010 	push	{r4, lr}
    d344:	e3530000 	cmp	r3, #0
    d348:	0a00000e 	beq	d388 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
    d34c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d350:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
    d354:	e3530000 	cmp	r3, #0
    d358:	1a00000e 	bne	d398 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
    d35c:	e3510000 	cmp	r1, #0
    d360:	0a000010 	beq	d3a8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
    d364:	e1d130d0 	ldrsb	r3, [r1]
    d368:	e3530000 	cmp	r3, #0
    d36c:	0a000011 	beq	d3b8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
    d370:	e3520000 	cmp	r2, #0
    d374:	0a000013 	beq	d3c8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
    d378:	e58020dc 	str	r2, [r0, #220]	; 0xdc
    d37c:	e58010d8 	str	r1, [r0, #216]	; 0xd8
    d380:	e58010d4 	str	r1, [r0, #212]	; 0xd4
    d384:	e8bd8010 	pop	{r4, pc}
    d388:	e59f1048 	ldr	r1, [pc, #72]	; d3d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d38c:	e3a02e22 	mov	r2, #544	; 0x220
    d390:	e2810f4d 	add	r0, r1, #308	; 0x134
    d394:	eb001381 	bl	121a0 <assertion_failed>
    d398:	e59f1038 	ldr	r1, [pc, #56]	; d3d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d39c:	e3002221 	movw	r2, #545	; 0x221
    d3a0:	e2810f53 	add	r0, r1, #332	; 0x14c
    d3a4:	eb00137d 	bl	121a0 <assertion_failed>
    d3a8:	e59f1028 	ldr	r1, [pc, #40]	; d3d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d3ac:	e3002223 	movw	r2, #547	; 0x223
    d3b0:	e2810f57 	add	r0, r1, #348	; 0x15c
    d3b4:	eb001379 	bl	121a0 <assertion_failed>
    d3b8:	e59f1018 	ldr	r1, [pc, #24]	; d3d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d3bc:	e3a02f89 	mov	r2, #548	; 0x224
    d3c0:	e2810f5a 	add	r0, r1, #360	; 0x168
    d3c4:	eb001375 	bl	121a0 <assertion_failed>
    d3c8:	e59f1008 	ldr	r1, [pc, #8]	; d3d8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d3cc:	e3002225 	movw	r2, #549	; 0x225
    d3d0:	e2810f5e 	add	r0, r1, #376	; 0x178
    d3d4:	eb001371 	bl	121a0 <assertion_failed>
    d3d8:	00015144 	.word	0x00015144

0000d3dc <CSerialDevice::AvailableForWrite()>:
    d3dc:	e5d03018 	ldrb	r3, [r0, #24]
    d3e0:	e92d4010 	push	{r4, lr}
    d3e4:	e3530000 	cmp	r3, #0
    d3e8:	0a000019 	beq	d454 <CSerialDevice::AvailableForWrite()+0x78>
    d3ec:	e5903008 	ldr	r3, [r0, #8]
    d3f0:	e3530000 	cmp	r3, #0
    d3f4:	0a00001a 	beq	d464 <CSerialDevice::AvailableForWrite()+0x88>
    d3f8:	e2804a01 	add	r4, r0, #4096	; 0x1000
    d3fc:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d400:	e3500000 	cmp	r0, #0
    d404:	1a00000f 	bne	d448 <CSerialDevice::AvailableForWrite()+0x6c>
    d408:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d40c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d410:	e1520003 	cmp	r2, r3
    d414:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d418:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d41c:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    d420:	82434001 	subhi	r4, r3, #1
    d424:	9284400f 	addls	r4, r4, #15
    d428:	e3500000 	cmp	r0, #0
    d42c:	e0444002 	sub	r4, r4, r2
    d430:	1a000001 	bne	d43c <CSerialDevice::AvailableForWrite()+0x60>
    d434:	e1a00004 	mov	r0, r4
    d438:	e8bd8010 	pop	{r4, pc}
    d43c:	eb0011b0 	bl	11b04 <LeaveCritical>
    d440:	e1a00004 	mov	r0, r4
    d444:	e8bd8010 	pop	{r4, pc}
    d448:	eb001180 	bl	11a50 <EnterCritical>
    d44c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d450:	eaffffec 	b	d408 <CSerialDevice::AvailableForWrite()+0x2c>
    d454:	e59f1018 	ldr	r1, [pc, #24]	; d474 <CSerialDevice::AvailableForWrite()+0x98>
    d458:	e300222f 	movw	r2, #559	; 0x22f
    d45c:	e2810f47 	add	r0, r1, #284	; 0x11c
    d460:	eb00134e 	bl	121a0 <assertion_failed>
    d464:	e59f1008 	ldr	r1, [pc, #8]	; d474 <CSerialDevice::AvailableForWrite()+0x98>
    d468:	e3a02e23 	mov	r2, #560	; 0x230
    d46c:	e2810f4d 	add	r0, r1, #308	; 0x134
    d470:	eb00134a 	bl	121a0 <assertion_failed>
    d474:	00015144 	.word	0x00015144

0000d478 <CSerialDevice::AvailableForRead()>:
    d478:	e5d03018 	ldrb	r3, [r0, #24]
    d47c:	e92d4070 	push	{r4, r5, r6, lr}
    d480:	e3530000 	cmp	r3, #0
    d484:	0a00001a 	beq	d4f4 <CSerialDevice::AvailableForRead()+0x7c>
    d488:	e5903008 	ldr	r3, [r0, #8]
    d48c:	e1a04000 	mov	r4, r0
    d490:	e3530000 	cmp	r3, #0
    d494:	0a00001a 	beq	d504 <CSerialDevice::AvailableForRead()+0x8c>
    d498:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d49c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d4a0:	e3500000 	cmp	r0, #0
    d4a4:	1a00000f 	bne	d4e8 <CSerialDevice::AvailableForRead()+0x70>
    d4a8:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d4ac:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d4b0:	e1520003 	cmp	r2, r3
    d4b4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d4b8:	359428c0 	ldrcc	r2, [r4, #2240]	; 0x8c0
    d4bc:	32834b02 	addcc	r4, r3, #2048	; 0x800
    d4c0:	259448c0 	ldrcs	r4, [r4, #2240]	; 0x8c0
    d4c4:	30444002 	subcc	r4, r4, r2
    d4c8:	20434004 	subcs	r4, r3, r4
    d4cc:	e3500000 	cmp	r0, #0
    d4d0:	1a000001 	bne	d4dc <CSerialDevice::AvailableForRead()+0x64>
    d4d4:	e1a00004 	mov	r0, r4
    d4d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d4dc:	eb001188 	bl	11b04 <LeaveCritical>
    d4e0:	e1a00004 	mov	r0, r4
    d4e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d4e8:	eb001158 	bl	11a50 <EnterCritical>
    d4ec:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d4f0:	eaffffec 	b	d4a8 <CSerialDevice::AvailableForRead()+0x30>
    d4f4:	e59f1018 	ldr	r1, [pc, #24]	; d514 <CSerialDevice::AvailableForRead()+0x9c>
    d4f8:	e3002245 	movw	r2, #581	; 0x245
    d4fc:	e2810f47 	add	r0, r1, #284	; 0x11c
    d500:	eb001326 	bl	121a0 <assertion_failed>
    d504:	e59f1008 	ldr	r1, [pc, #8]	; d514 <CSerialDevice::AvailableForRead()+0x9c>
    d508:	e3002246 	movw	r2, #582	; 0x246
    d50c:	e2810f4d 	add	r0, r1, #308	; 0x134
    d510:	eb001322 	bl	121a0 <assertion_failed>
    d514:	00015144 	.word	0x00015144

0000d518 <CSerialDevice::Peek()>:
    d518:	e5d03018 	ldrb	r3, [r0, #24]
    d51c:	e92d4070 	push	{r4, r5, r6, lr}
    d520:	e3530000 	cmp	r3, #0
    d524:	0a00001d 	beq	d5a0 <CSerialDevice::Peek()+0x88>
    d528:	e5903008 	ldr	r3, [r0, #8]
    d52c:	e1a04000 	mov	r4, r0
    d530:	e3530000 	cmp	r3, #0
    d534:	0a00001d 	beq	d5b0 <CSerialDevice::Peek()+0x98>
    d538:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d53c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d540:	e3500000 	cmp	r0, #0
    d544:	1a00000d 	bne	d580 <CSerialDevice::Peek()+0x68>
    d548:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d54c:	e59418c0 	ldr	r1, [r4, #2240]	; 0x8c0
    d550:	e1510002 	cmp	r1, r2
    d554:	0a000019 	beq	d5c0 <CSerialDevice::Peek()+0xa8>
    d558:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    d55c:	e0844002 	add	r4, r4, r2
    d560:	e5d440bc 	ldrb	r4, [r4, #188]	; 0xbc
    d564:	e3500000 	cmp	r0, #0
    d568:	1a000001 	bne	d574 <CSerialDevice::Peek()+0x5c>
    d56c:	e1a00004 	mov	r0, r4
    d570:	e8bd8070 	pop	{r4, r5, r6, pc}
    d574:	eb001162 	bl	11b04 <LeaveCritical>
    d578:	e1a00004 	mov	r0, r4
    d57c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d580:	eb001132 	bl	11a50 <EnterCritical>
    d584:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d588:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d58c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d590:	e1520003 	cmp	r2, r3
    d594:	03e04000 	mvneq	r4, #0
    d598:	1affffee 	bne	d558 <CSerialDevice::Peek()+0x40>
    d59c:	eafffff0 	b	d564 <CSerialDevice::Peek()+0x4c>
    d5a0:	e59f1020 	ldr	r1, [pc, #32]	; d5c8 <CSerialDevice::Peek()+0xb0>
    d5a4:	e300225b 	movw	r2, #603	; 0x25b
    d5a8:	e2810f47 	add	r0, r1, #284	; 0x11c
    d5ac:	eb0012fb 	bl	121a0 <assertion_failed>
    d5b0:	e59f1010 	ldr	r1, [pc, #16]	; d5c8 <CSerialDevice::Peek()+0xb0>
    d5b4:	e3a02f97 	mov	r2, #604	; 0x25c
    d5b8:	e2810f4d 	add	r0, r1, #308	; 0x134
    d5bc:	eb0012f7 	bl	121a0 <assertion_failed>
    d5c0:	e3e04000 	mvn	r4, #0
    d5c4:	eaffffe8 	b	d56c <CSerialDevice::Peek()+0x54>
    d5c8:	00015144 	.word	0x00015144

0000d5cc <CSerialDevice::Flush()>:
    d5cc:	e5902014 	ldr	r2, [r0, #20]
    d5d0:	e2822018 	add	r2, r2, #24
    d5d4:	e5923000 	ldr	r3, [r2]
    d5d8:	e3130008 	tst	r3, #8
    d5dc:	1afffffc 	bne	d5d4 <CSerialDevice::Flush()+0x8>
    d5e0:	e12fff1e 	bx	lr

0000d5e4 <CSerialDevice::Write(unsigned char)>:
    d5e4:	e5903008 	ldr	r3, [r0, #8]
    d5e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d5ec:	e3530000 	cmp	r3, #0
    d5f0:	0a000029 	beq	d69c <CSerialDevice::Write(unsigned char)+0xb8>
    d5f4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d5f8:	e1a06001 	mov	r6, r1
    d5fc:	e1a04000 	mov	r4, r0
    d600:	e59520e0 	ldr	r2, [r5, #224]	; 0xe0
    d604:	e3520000 	cmp	r2, #0
    d608:	1a000015 	bne	d664 <CSerialDevice::Write(unsigned char)+0x80>
    d60c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d610:	e59510cc 	ldr	r1, [r5, #204]	; 0xcc
    d614:	e2833001 	add	r3, r3, #1
    d618:	e7ea3053 	ubfx	r3, r3, #0, #11
    d61c:	e1530001 	cmp	r3, r1
    d620:	0a00001a 	beq	d690 <CSerialDevice::Write(unsigned char)+0xac>
    d624:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d628:	e3a07001 	mov	r7, #1
    d62c:	e0840003 	add	r0, r4, r3
    d630:	e0833007 	add	r3, r3, r7
    d634:	e58530c8 	str	r3, [r5, #200]	; 0xc8
    d638:	e5c068c8 	strb	r6, [r0, #2248]	; 0x8c8
    d63c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d640:	e7ea3053 	ubfx	r3, r3, #0, #11
    d644:	e58530c8 	str	r3, [r5, #200]	; 0xc8
    d648:	e3520000 	cmp	r2, #0
    d64c:	1a000001 	bne	d658 <CSerialDevice::Write(unsigned char)+0x74>
    d650:	e1a00007 	mov	r0, r7
    d654:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d658:	eb001129 	bl	11b04 <LeaveCritical>
    d65c:	e1a00007 	mov	r0, r7
    d660:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d664:	e1a00002 	mov	r0, r2
    d668:	eb0010f8 	bl	11a50 <EnterCritical>
    d66c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d670:	e59520cc 	ldr	r2, [r5, #204]	; 0xcc
    d674:	e2833001 	add	r3, r3, #1
    d678:	e7ea3053 	ubfx	r3, r3, #0, #11
    d67c:	e1530002 	cmp	r3, r2
    d680:	e59520e0 	ldr	r2, [r5, #224]	; 0xe0
    d684:	03a07000 	moveq	r7, #0
    d688:	1affffe5 	bne	d624 <CSerialDevice::Write(unsigned char)+0x40>
    d68c:	eaffffed 	b	d648 <CSerialDevice::Write(unsigned char)+0x64>
    d690:	e1a07002 	mov	r7, r2
    d694:	e1a00007 	mov	r0, r7
    d698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d69c:	e5900014 	ldr	r0, [r0, #20]
    d6a0:	e2802018 	add	r2, r0, #24
    d6a4:	e5923000 	ldr	r3, [r2]
    d6a8:	e3130020 	tst	r3, #32
    d6ac:	1afffffc 	bne	d6a4 <CSerialDevice::Write(unsigned char)+0xc0>
    d6b0:	e3a07001 	mov	r7, #1
    d6b4:	e5801000 	str	r1, [r0]
    d6b8:	e1a00007 	mov	r0, r7
    d6bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d6c0 <CSerialDevice::InterruptHandler()>:
    d6c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6c4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d6c8:	e1a04000 	mov	r4, r0
    d6cc:	e24dd004 	sub	sp, sp, #4
    d6d0:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d6d4:	e3500000 	cmp	r0, #0
    d6d8:	1a00006b 	bne	d88c <CSerialDevice::InterruptHandler()+0x1cc>
    d6dc:	e5943014 	ldr	r3, [r4, #20]
    d6e0:	e3a06000 	mov	r6, #0
    d6e4:	e3e08003 	mvn	r8, #3
    d6e8:	e3e07002 	mvn	r7, #2
    d6ec:	e3e0c001 	mvn	ip, #1
    d6f0:	e3e0e000 	mvn	lr, #0
    d6f4:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d6f8:	e5832044 	str	r2, [r3, #68]	; 0x44
    d6fc:	e5941014 	ldr	r1, [r4, #20]
    d700:	e2810018 	add	r0, r1, #24
    d704:	e5903000 	ldr	r3, [r0]
    d708:	e3130010 	tst	r3, #16
    d70c:	1a00001f 	bne	d790 <CSerialDevice::InterruptHandler()+0xd0>
    d710:	e5912000 	ldr	r2, [r1]
    d714:	e3120b01 	tst	r2, #1024	; 0x400
    d718:	0a00003b 	beq	d80c <CSerialDevice::InterruptHandler()+0x14c>
    d71c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d720:	e3530000 	cmp	r3, #0
    d724:	0584e8c4 	streq	lr, [r4, #2244]	; 0x8c4
    d728:	e59590d4 	ldr	r9, [r5, #212]	; 0xd4
    d72c:	e3590000 	cmp	r9, #0
    d730:	0a000005 	beq	d74c <CSerialDevice::InterruptHandler()+0x8c>
    d734:	e595a0d8 	ldr	sl, [r5, #216]	; 0xd8
    d738:	e6af3072 	sxtb	r3, r2
    d73c:	e1dab0d0 	ldrsb	fp, [sl]
    d740:	e15b0003 	cmp	fp, r3
    d744:	158590d8 	strne	r9, [r5, #216]	; 0xd8
    d748:	0a00003f 	beq	d84c <CSerialDevice::InterruptHandler()+0x18c>
    d74c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d750:	e59498c0 	ldr	r9, [r4, #2240]	; 0x8c0
    d754:	e2833001 	add	r3, r3, #1
    d758:	e7ea3053 	ubfx	r3, r3, #0, #11
    d75c:	e1530009 	cmp	r3, r9
    d760:	0a00002f 	beq	d824 <CSerialDevice::InterruptHandler()+0x164>
    d764:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d768:	e0849003 	add	r9, r4, r3
    d76c:	e2833001 	add	r3, r3, #1
    d770:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    d774:	e5c920bc 	strb	r2, [r9, #188]	; 0xbc
    d778:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d77c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d780:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    d784:	e5903000 	ldr	r3, [r0]
    d788:	e3130010 	tst	r3, #16
    d78c:	0affffdf 	beq	d710 <CSerialDevice::InterruptHandler()+0x50>
    d790:	e5903000 	ldr	r3, [r0]
    d794:	e3130020 	tst	r3, #32
    d798:	0a00000d 	beq	d7d4 <CSerialDevice::InterruptHandler()+0x114>
    d79c:	ea000013 	b	d7f0 <CSerialDevice::InterruptHandler()+0x130>
    d7a0:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7a4:	e2832001 	add	r2, r3, #1
    d7a8:	e0843003 	add	r3, r4, r3
    d7ac:	e58520cc 	str	r2, [r5, #204]	; 0xcc
    d7b0:	e5d338c8 	ldrb	r3, [r3, #2248]	; 0x8c8
    d7b4:	e5813000 	str	r3, [r1]
    d7b8:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7bc:	e5941014 	ldr	r1, [r4, #20]
    d7c0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d7c4:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    d7c8:	e5913018 	ldr	r3, [r1, #24]
    d7cc:	e3130020 	tst	r3, #32
    d7d0:	1a000006 	bne	d7f0 <CSerialDevice::InterruptHandler()+0x130>
    d7d4:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    d7d8:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7dc:	e1520003 	cmp	r2, r3
    d7e0:	1affffee 	bne	d7a0 <CSerialDevice::InterruptHandler()+0xe0>
    d7e4:	e5913038 	ldr	r3, [r1, #56]	; 0x38
    d7e8:	e3c33020 	bic	r3, r3, #32
    d7ec:	e5813038 	str	r3, [r1, #56]	; 0x38
    d7f0:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
    d7f4:	e3530000 	cmp	r3, #0
    d7f8:	1a000025 	bne	d894 <CSerialDevice::InterruptHandler()+0x1d4>
    d7fc:	e3560000 	cmp	r6, #0
    d800:	1a00001d 	bne	d87c <CSerialDevice::InterruptHandler()+0x1bc>
    d804:	e28dd004 	add	sp, sp, #4
    d808:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d80c:	e3120b02 	tst	r2, #2048	; 0x800
    d810:	0a000007 	beq	d834 <CSerialDevice::InterruptHandler()+0x174>
    d814:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d818:	e3530000 	cmp	r3, #0
    d81c:	0584c8c4 	streq	ip, [r4, #2244]	; 0x8c4
    d820:	eaffffc0 	b	d728 <CSerialDevice::InterruptHandler()+0x68>
    d824:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d828:	e3530000 	cmp	r3, #0
    d82c:	0584c8c4 	streq	ip, [r4, #2244]	; 0x8c4
    d830:	eaffffb3 	b	d704 <CSerialDevice::InterruptHandler()+0x44>
    d834:	e3120c01 	tst	r2, #256	; 0x100
    d838:	0a000009 	beq	d864 <CSerialDevice::InterruptHandler()+0x1a4>
    d83c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d840:	e3530000 	cmp	r3, #0
    d844:	058478c4 	streq	r7, [r4, #2244]	; 0x8c4
    d848:	eaffffb6 	b	d728 <CSerialDevice::InterruptHandler()+0x68>
    d84c:	e28a3001 	add	r3, sl, #1
    d850:	e58530d8 	str	r3, [r5, #216]	; 0xd8
    d854:	e1da30d1 	ldrsb	r3, [sl, #1]
    d858:	e3530000 	cmp	r3, #0
    d85c:	03a06001 	moveq	r6, #1
    d860:	eaffffb9 	b	d74c <CSerialDevice::InterruptHandler()+0x8c>
    d864:	e3120c02 	tst	r2, #512	; 0x200
    d868:	0affffae 	beq	d728 <CSerialDevice::InterruptHandler()+0x68>
    d86c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d870:	e3530000 	cmp	r3, #0
    d874:	058488c4 	streq	r8, [r4, #2244]	; 0x8c4
    d878:	eaffffaa 	b	d728 <CSerialDevice::InterruptHandler()+0x68>
    d87c:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
    d880:	e28dd004 	add	sp, sp, #4
    d884:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d888:	e12fff13 	bx	r3
    d88c:	eb00106f 	bl	11a50 <EnterCritical>
    d890:	eaffff91 	b	d6dc <CSerialDevice::InterruptHandler()+0x1c>
    d894:	eb00109a 	bl	11b04 <LeaveCritical>
    d898:	eaffffd7 	b	d7fc <CSerialDevice::InterruptHandler()+0x13c>

0000d89c <CSerialDevice::InterruptStub(void*)>:
    d89c:	f57ff05f 	dmb	sy
    d8a0:	e3073258 	movw	r3, #29272	; 0x7258
    d8a4:	e3403001 	movt	r3, #1
    d8a8:	e593200c 	ldr	r2, [r3, #12]
    d8ac:	e3120001 	tst	r2, #1
    d8b0:	012fff1e 	bxeq	lr
    d8b4:	e5930010 	ldr	r0, [r3, #16]
    d8b8:	e3500000 	cmp	r0, #0
    d8bc:	0a000000 	beq	d8c4 <CSerialDevice::InterruptStub(void*)+0x28>
    d8c0:	eaffff7e 	b	d6c0 <CSerialDevice::InterruptHandler()>
    d8c4:	e59f100c 	ldr	r1, [pc, #12]	; d8d8 <CSerialDevice::InterruptStub(void*)+0x3c>
    d8c8:	e300230f 	movw	r2, #783	; 0x30f
    d8cc:	e92d4010 	push	{r4, lr}
    d8d0:	e2810f62 	add	r0, r1, #392	; 0x188
    d8d4:	eb001231 	bl	121a0 <assertion_failed>
    d8d8:	00015144 	.word	0x00015144
    d8dc:	00000000 	.word	0x00000000

0000d8e0 <CString::~CString()>:
    d8e0:	e92d4010 	push	{r4, lr}
    d8e4:	e1a04000 	mov	r4, r0
    d8e8:	e5900004 	ldr	r0, [r0, #4]
    d8ec:	e59f3014 	ldr	r3, [pc, #20]	; d908 <CString::~CString()+0x28>
    d8f0:	e3500000 	cmp	r0, #0
    d8f4:	e5843000 	str	r3, [r4]
    d8f8:	0a000000 	beq	d900 <CString::~CString()+0x20>
    d8fc:	eb000ca0 	bl	10b84 <operator delete[](void*)>
    d900:	e1a00004 	mov	r0, r4
    d904:	e8bd8010 	pop	{r4, pc}
    d908:	000152e4 	.word	0x000152e4

0000d90c <CString::~CString()>:
    d90c:	e92d4010 	push	{r4, lr}
    d910:	e1a04000 	mov	r4, r0
    d914:	e5900004 	ldr	r0, [r0, #4]
    d918:	e59f3020 	ldr	r3, [pc, #32]	; d940 <CString::~CString()+0x34>
    d91c:	e3500000 	cmp	r0, #0
    d920:	e5843000 	str	r3, [r4]
    d924:	0a000000 	beq	d92c <CString::~CString()+0x20>
    d928:	eb000c95 	bl	10b84 <operator delete[](void*)>
    d92c:	e1a00004 	mov	r0, r4
    d930:	e3a01010 	mov	r1, #16
    d934:	eb000c98 	bl	10b9c <operator delete(void*, unsigned int)>
    d938:	e1a00004 	mov	r0, r4
    d93c:	e8bd8010 	pop	{r4, pc}
    d940:	000152e4 	.word	0x000152e4

0000d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d944:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d948:	e990002c 	ldmib	r0, {r2, r3, r5}
    d94c:	e0455002 	sub	r5, r5, r2
    d950:	e0851001 	add	r1, r5, r1
    d954:	e2812001 	add	r2, r1, #1
    d958:	e1520003 	cmp	r2, r3
    d95c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d960:	e1a04000 	mov	r4, r0
    d964:	e2816041 	add	r6, r1, #65	; 0x41
    d968:	e1a00006 	mov	r0, r6
    d96c:	eb000c7d 	bl	10b68 <operator new[](unsigned int)>
    d970:	e3a02000 	mov	r2, #0
    d974:	e594300c 	ldr	r3, [r4, #12]
    d978:	e1a07000 	mov	r7, r0
    d97c:	e5c32000 	strb	r2, [r3]
    d980:	e5941004 	ldr	r1, [r4, #4]
    d984:	eb0009f7 	bl	10168 <strcpy>
    d988:	e5940004 	ldr	r0, [r4, #4]
    d98c:	e3500000 	cmp	r0, #0
    d990:	0a000000 	beq	d998 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d994:	eb000c7a 	bl	10b84 <operator delete[](void*)>
    d998:	e0875005 	add	r5, r7, r5
    d99c:	e5847004 	str	r7, [r4, #4]
    d9a0:	e584500c 	str	r5, [r4, #12]
    d9a4:	e5846008 	str	r6, [r4, #8]
    d9a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d9ac <CString::CString()>:
    d9ac:	e59f100c 	ldr	r1, [pc, #12]	; d9c0 <CString::CString()+0x14>
    d9b0:	e3a02000 	mov	r2, #0
    d9b4:	e5802008 	str	r2, [r0, #8]
    d9b8:	e8800006 	stm	r0, {r1, r2}
    d9bc:	e12fff1e 	bx	lr
    d9c0:	000152e4 	.word	0x000152e4

0000d9c4 <CString::CString(char const*)>:
    d9c4:	e92d4070 	push	{r4, r5, r6, lr}
    d9c8:	e1a04000 	mov	r4, r0
    d9cc:	e59f302c 	ldr	r3, [pc, #44]	; da00 <CString::CString(char const*)+0x3c>
    d9d0:	e1a00001 	mov	r0, r1
    d9d4:	e1a05001 	mov	r5, r1
    d9d8:	e5843000 	str	r3, [r4]
    d9dc:	eb000922 	bl	fe6c <strlen>
    d9e0:	e2800001 	add	r0, r0, #1
    d9e4:	e5840008 	str	r0, [r4, #8]
    d9e8:	eb000c5e 	bl	10b68 <operator new[](unsigned int)>
    d9ec:	e1a01005 	mov	r1, r5
    d9f0:	e5840004 	str	r0, [r4, #4]
    d9f4:	eb0009db 	bl	10168 <strcpy>
    d9f8:	e1a00004 	mov	r0, r4
    d9fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    da00:	000152e4 	.word	0x000152e4

0000da04 <CString::CString(CString const&)>:
    da04:	e92d4070 	push	{r4, r5, r6, lr}
    da08:	e1a04000 	mov	r4, r0
    da0c:	e5910004 	ldr	r0, [r1, #4]
    da10:	e59f3040 	ldr	r3, [pc, #64]	; da58 <CString::CString(CString const&)+0x54>
    da14:	e30459f4 	movw	r5, #18932	; 0x49f4
    da18:	e3405001 	movt	r5, #1
    da1c:	e3500000 	cmp	r0, #0
    da20:	e5843000 	str	r3, [r4]
    da24:	01a00005 	moveq	r0, r5
    da28:	e1a06001 	mov	r6, r1
    da2c:	eb00090e 	bl	fe6c <strlen>
    da30:	e2800001 	add	r0, r0, #1
    da34:	e5840008 	str	r0, [r4, #8]
    da38:	eb000c4a 	bl	10b68 <operator new[](unsigned int)>
    da3c:	e5840004 	str	r0, [r4, #4]
    da40:	e5961004 	ldr	r1, [r6, #4]
    da44:	e3510000 	cmp	r1, #0
    da48:	01a01005 	moveq	r1, r5
    da4c:	eb0009c5 	bl	10168 <strcpy>
    da50:	e1a00004 	mov	r0, r4
    da54:	e8bd8070 	pop	{r4, r5, r6, pc}
    da58:	000152e4 	.word	0x000152e4

0000da5c <CString::CString(CString&&)>:
    da5c:	e591c004 	ldr	ip, [r1, #4]
    da60:	e3a02000 	mov	r2, #0
    da64:	e92d4010 	push	{r4, lr}
    da68:	e5914008 	ldr	r4, [r1, #8]
    da6c:	e59fe014 	ldr	lr, [pc, #20]	; da88 <CString::CString(CString&&)+0x2c>
    da70:	e5804008 	str	r4, [r0, #8]
    da74:	e580e000 	str	lr, [r0]
    da78:	e580c004 	str	ip, [r0, #4]
    da7c:	e5812008 	str	r2, [r1, #8]
    da80:	e5812004 	str	r2, [r1, #4]
    da84:	e8bd8010 	pop	{r4, pc}
    da88:	000152e4 	.word	0x000152e4

0000da8c <CString::operator char const*() const>:
    da8c:	e5900004 	ldr	r0, [r0, #4]
    da90:	e30439f4 	movw	r3, #18932	; 0x49f4
    da94:	e3403001 	movt	r3, #1
    da98:	e3500000 	cmp	r0, #0
    da9c:	01a00003 	moveq	r0, r3
    daa0:	e12fff1e 	bx	lr

0000daa4 <CString::operator=(char const*)>:
    daa4:	e92d4070 	push	{r4, r5, r6, lr}
    daa8:	e1a04000 	mov	r4, r0
    daac:	e5900004 	ldr	r0, [r0, #4]
    dab0:	e1a05001 	mov	r5, r1
    dab4:	e3500000 	cmp	r0, #0
    dab8:	0a000000 	beq	dac0 <CString::operator=(char const*)+0x1c>
    dabc:	eb000c30 	bl	10b84 <operator delete[](void*)>
    dac0:	e1a00005 	mov	r0, r5
    dac4:	eb0008e8 	bl	fe6c <strlen>
    dac8:	e2800001 	add	r0, r0, #1
    dacc:	e5840008 	str	r0, [r4, #8]
    dad0:	eb000c24 	bl	10b68 <operator new[](unsigned int)>
    dad4:	e1a01005 	mov	r1, r5
    dad8:	e5840004 	str	r0, [r4, #4]
    dadc:	eb0009a1 	bl	10168 <strcpy>
    dae0:	e5940004 	ldr	r0, [r4, #4]
    dae4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dae8 <CString::operator=(CString const&)>:
    dae8:	e92d4070 	push	{r4, r5, r6, lr}
    daec:	e1a04000 	mov	r4, r0
    daf0:	e5900004 	ldr	r0, [r0, #4]
    daf4:	e1a06001 	mov	r6, r1
    daf8:	e3500000 	cmp	r0, #0
    dafc:	0a000000 	beq	db04 <CString::operator=(CString const&)+0x1c>
    db00:	eb000c1f 	bl	10b84 <operator delete[](void*)>
    db04:	e5960004 	ldr	r0, [r6, #4]
    db08:	e30459f4 	movw	r5, #18932	; 0x49f4
    db0c:	e3405001 	movt	r5, #1
    db10:	e3500000 	cmp	r0, #0
    db14:	01a00005 	moveq	r0, r5
    db18:	eb0008d3 	bl	fe6c <strlen>
    db1c:	e2800001 	add	r0, r0, #1
    db20:	e5840008 	str	r0, [r4, #8]
    db24:	eb000c0f 	bl	10b68 <operator new[](unsigned int)>
    db28:	e5840004 	str	r0, [r4, #4]
    db2c:	e5961004 	ldr	r1, [r6, #4]
    db30:	e3510000 	cmp	r1, #0
    db34:	01a01005 	moveq	r1, r5
    db38:	eb00098a 	bl	10168 <strcpy>
    db3c:	e1a00004 	mov	r0, r4
    db40:	e8bd8070 	pop	{r4, r5, r6, pc}

0000db44 <CString::operator=(CString&&)>:
    db44:	e92d4070 	push	{r4, r5, r6, lr}
    db48:	e1a05000 	mov	r5, r0
    db4c:	e5900004 	ldr	r0, [r0, #4]
    db50:	e1a04001 	mov	r4, r1
    db54:	e3500000 	cmp	r0, #0
    db58:	0a000000 	beq	db60 <CString::operator=(CString&&)+0x1c>
    db5c:	eb000c08 	bl	10b84 <operator delete[](void*)>
    db60:	e5941008 	ldr	r1, [r4, #8]
    db64:	e3a03000 	mov	r3, #0
    db68:	e5942004 	ldr	r2, [r4, #4]
    db6c:	e1a00005 	mov	r0, r5
    db70:	e5851008 	str	r1, [r5, #8]
    db74:	e5852004 	str	r2, [r5, #4]
    db78:	e5843008 	str	r3, [r4, #8]
    db7c:	e5843004 	str	r3, [r4, #4]
    db80:	e8bd8070 	pop	{r4, r5, r6, pc}

0000db84 <CString::GetLength() const>:
    db84:	e5900004 	ldr	r0, [r0, #4]
    db88:	e3500000 	cmp	r0, #0
    db8c:	012fff1e 	bxeq	lr
    db90:	ea0008b5 	b	fe6c <strlen>

0000db94 <CString::Append(char const*)>:
    db94:	e92d4070 	push	{r4, r5, r6, lr}
    db98:	e1a04000 	mov	r4, r0
    db9c:	e5900004 	ldr	r0, [r0, #4]
    dba0:	e3a03001 	mov	r3, #1
    dba4:	e1a06001 	mov	r6, r1
    dba8:	e3500000 	cmp	r0, #0
    dbac:	e5843008 	str	r3, [r4, #8]
    dbb0:	0a000003 	beq	dbc4 <CString::Append(char const*)+0x30>
    dbb4:	eb0008ac 	bl	fe6c <strlen>
    dbb8:	e5943008 	ldr	r3, [r4, #8]
    dbbc:	e0830000 	add	r0, r3, r0
    dbc0:	e5840008 	str	r0, [r4, #8]
    dbc4:	e1a00006 	mov	r0, r6
    dbc8:	eb0008a7 	bl	fe6c <strlen>
    dbcc:	e5943008 	ldr	r3, [r4, #8]
    dbd0:	e0800003 	add	r0, r0, r3
    dbd4:	e5840008 	str	r0, [r4, #8]
    dbd8:	eb000be2 	bl	10b68 <operator new[](unsigned int)>
    dbdc:	e5941004 	ldr	r1, [r4, #4]
    dbe0:	e1a05000 	mov	r5, r0
    dbe4:	e3510000 	cmp	r1, #0
    dbe8:	05c01000 	strbeq	r1, [r0]
    dbec:	0a000004 	beq	dc04 <CString::Append(char const*)+0x70>
    dbf0:	eb00095c 	bl	10168 <strcpy>
    dbf4:	e5940004 	ldr	r0, [r4, #4]
    dbf8:	e3500000 	cmp	r0, #0
    dbfc:	0a000000 	beq	dc04 <CString::Append(char const*)+0x70>
    dc00:	eb000bdf 	bl	10b84 <operator delete[](void*)>
    dc04:	e1a01006 	mov	r1, r6
    dc08:	e1a00005 	mov	r0, r5
    dc0c:	eb000973 	bl	101e0 <strcat>
    dc10:	e5845004 	str	r5, [r4, #4]
    dc14:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dc18 <CString::Compare(char const*) const>:
    dc18:	e5900004 	ldr	r0, [r0, #4]
    dc1c:	ea00089c 	b	fe94 <strcmp>

0000dc20 <CString::Find(char) const>:
    dc20:	e5902004 	ldr	r2, [r0, #4]
    dc24:	e1d230d0 	ldrsb	r3, [r2]
    dc28:	e3530000 	cmp	r3, #0
    dc2c:	0a000009 	beq	dc58 <CString::Find(char) const+0x38>
    dc30:	e1510003 	cmp	r1, r3
    dc34:	e3a00000 	mov	r0, #0
    dc38:	1a000002 	bne	dc48 <CString::Find(char) const+0x28>
    dc3c:	ea000007 	b	dc60 <CString::Find(char) const+0x40>
    dc40:	e1530001 	cmp	r3, r1
    dc44:	012fff1e 	bxeq	lr
    dc48:	e1f230d1 	ldrsb	r3, [r2, #1]!
    dc4c:	e2800001 	add	r0, r0, #1
    dc50:	e3530000 	cmp	r3, #0
    dc54:	1afffff9 	bne	dc40 <CString::Find(char) const+0x20>
    dc58:	e3e00000 	mvn	r0, #0
    dc5c:	e12fff1e 	bx	lr
    dc60:	e12fff1e 	bx	lr

0000dc64 <CString::PutChar(char, unsigned int)>:
    dc64:	e92d4070 	push	{r4, r5, r6, lr}
    dc68:	e2524000 	subs	r4, r2, #0
    dc6c:	08bd8070 	popeq	{r4, r5, r6, pc}
    dc70:	e1a06001 	mov	r6, r1
    dc74:	e1a01004 	mov	r1, r4
    dc78:	e1a05000 	mov	r5, r0
    dc7c:	ebffff30 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc80:	e2443001 	sub	r3, r4, #1
    dc84:	e595200c 	ldr	r2, [r5, #12]
    dc88:	e2433001 	sub	r3, r3, #1
    dc8c:	e3730001 	cmn	r3, #1
    dc90:	e2820001 	add	r0, r2, #1
    dc94:	e585000c 	str	r0, [r5, #12]
    dc98:	e5c26000 	strb	r6, [r2]
    dc9c:	1afffff8 	bne	dc84 <CString::PutChar(char, unsigned int)+0x20>
    dca0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dca4 <CString::PutString(char const*)>:
    dca4:	e92d4070 	push	{r4, r5, r6, lr}
    dca8:	e1a04000 	mov	r4, r0
    dcac:	e1a00001 	mov	r0, r1
    dcb0:	e1a05001 	mov	r5, r1
    dcb4:	eb00086c 	bl	fe6c <strlen>
    dcb8:	e2506000 	subs	r6, r0, #0
    dcbc:	0a000002 	beq	dccc <CString::PutString(char const*)+0x28>
    dcc0:	e1a01006 	mov	r1, r6
    dcc4:	e1a00004 	mov	r0, r4
    dcc8:	ebffff1d 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dccc:	e1a01005 	mov	r1, r5
    dcd0:	e594000c 	ldr	r0, [r4, #12]
    dcd4:	eb000923 	bl	10168 <strcpy>
    dcd8:	e594100c 	ldr	r1, [r4, #12]
    dcdc:	e0811006 	add	r1, r1, r6
    dce0:	e584100c 	str	r1, [r4, #12]
    dce4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dce8 <CString::Replace(char const*, char const*)>:
    dce8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    dcec:	e1d180d0 	ldrsb	r8, [r1]
    dcf0:	e24dd010 	sub	sp, sp, #16
    dcf4:	e3580000 	cmp	r8, #0
    dcf8:	1a000002 	bne	dd08 <CString::Replace(char const*, char const*)+0x20>
    dcfc:	e1a00008 	mov	r0, r8
    dd00:	e28dd010 	add	sp, sp, #16
    dd04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dd08:	e1a06000 	mov	r6, r0
    dd0c:	e1a07001 	mov	r7, r1
    dd10:	e5901004 	ldr	r1, [r0, #4]
    dd14:	e1a0000d 	mov	r0, sp
    dd18:	e1a09002 	mov	r9, r2
    dd1c:	ebffff28 	bl	d9c4 <CString::CString(char const*)>
    dd20:	e5960004 	ldr	r0, [r6, #4]
    dd24:	e3500000 	cmp	r0, #0
    dd28:	0a000000 	beq	dd30 <CString::Replace(char const*, char const*)+0x48>
    dd2c:	eb000b94 	bl	10b84 <operator delete[](void*)>
    dd30:	e3a00040 	mov	r0, #64	; 0x40
    dd34:	e3a08000 	mov	r8, #0
    dd38:	e5860008 	str	r0, [r6, #8]
    dd3c:	eb000b89 	bl	10b68 <operator new[](unsigned int)>
    dd40:	e59d4004 	ldr	r4, [sp, #4]
    dd44:	e5860004 	str	r0, [r6, #4]
    dd48:	e586000c 	str	r0, [r6, #12]
    dd4c:	e1d710d0 	ldrsb	r1, [r7]
    dd50:	e1a00004 	mov	r0, r4
    dd54:	eb000932 	bl	10224 <strchr>
    dd58:	e2505000 	subs	r5, r0, #0
    dd5c:	0a00002d 	beq	de18 <CString::Replace(char const*, char const*)+0x130>
    dd60:	e1540005 	cmp	r4, r5
    dd64:	2a000039 	bcs	de50 <CString::Replace(char const*, char const*)+0x168>
    dd68:	e0d4a0d1 	ldrsb	sl, [r4], #1
    dd6c:	e3a01001 	mov	r1, #1
    dd70:	e1a00006 	mov	r0, r6
    dd74:	ebfffef2 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd78:	e596300c 	ldr	r3, [r6, #12]
    dd7c:	e1550004 	cmp	r5, r4
    dd80:	e2832001 	add	r2, r3, #1
    dd84:	e586200c 	str	r2, [r6, #12]
    dd88:	e5c3a000 	strb	sl, [r3]
    dd8c:	1afffff5 	bne	dd68 <CString::Replace(char const*, char const*)+0x80>
    dd90:	e2854001 	add	r4, r5, #1
    dd94:	e1a0c005 	mov	ip, r5
    dd98:	e1d730d1 	ldrsb	r3, [r7, #1]
    dd9c:	e2871001 	add	r1, r7, #1
    dda0:	e3530000 	cmp	r3, #0
    dda4:	0a00000c 	beq	dddc <CString::Replace(char const*, char const*)+0xf4>
    dda8:	e1d520d1 	ldrsb	r2, [r5, #1]
    ddac:	e1520003 	cmp	r2, r3
    ddb0:	1a00000e 	bne	ddf0 <CString::Replace(char const*, char const*)+0x108>
    ddb4:	e2853002 	add	r3, r5, #2
    ddb8:	ea000002 	b	ddc8 <CString::Replace(char const*, char const*)+0xe0>
    ddbc:	e1d400d0 	ldrsb	r0, [r4]
    ddc0:	e1500002 	cmp	r0, r2
    ddc4:	1a000009 	bne	ddf0 <CString::Replace(char const*, char const*)+0x108>
    ddc8:	e1f120d1 	ldrsb	r2, [r1, #1]!
    ddcc:	e1a04003 	mov	r4, r3
    ddd0:	e2833001 	add	r3, r3, #1
    ddd4:	e3520000 	cmp	r2, #0
    ddd8:	1afffff7 	bne	ddbc <CString::Replace(char const*, char const*)+0xd4>
    dddc:	e1a01009 	mov	r1, r9
    dde0:	e1a00006 	mov	r0, r6
    dde4:	e2888001 	add	r8, r8, #1
    dde8:	ebffffad 	bl	dca4 <CString::PutString(char const*)>
    ddec:	eaffffd6 	b	dd4c <CString::Replace(char const*, char const*)+0x64>
    ddf0:	e3a01001 	mov	r1, #1
    ddf4:	e1a00006 	mov	r0, r6
    ddf8:	e1dc50d0 	ldrsb	r5, [ip]
    ddfc:	e08c4001 	add	r4, ip, r1
    de00:	ebfffecf 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de04:	e596300c 	ldr	r3, [r6, #12]
    de08:	e2832001 	add	r2, r3, #1
    de0c:	e586200c 	str	r2, [r6, #12]
    de10:	e5c35000 	strb	r5, [r3]
    de14:	eaffffcc 	b	dd4c <CString::Replace(char const*, char const*)+0x64>
    de18:	e1a00006 	mov	r0, r6
    de1c:	e1a01004 	mov	r1, r4
    de20:	ebffff9f 	bl	dca4 <CString::PutString(char const*)>
    de24:	e596200c 	ldr	r2, [r6, #12]
    de28:	e59f302c 	ldr	r3, [pc, #44]	; de5c <CString::Replace(char const*, char const*)+0x174>
    de2c:	e5c25000 	strb	r5, [r2]
    de30:	e59d0004 	ldr	r0, [sp, #4]
    de34:	e58d3000 	str	r3, [sp]
    de38:	e3500000 	cmp	r0, #0
    de3c:	0affffae 	beq	dcfc <CString::Replace(char const*, char const*)+0x14>
    de40:	eb000b4f 	bl	10b84 <operator delete[](void*)>
    de44:	e1a00008 	mov	r0, r8
    de48:	e28dd010 	add	sp, sp, #16
    de4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    de50:	e1a0c004 	mov	ip, r4
    de54:	e2854001 	add	r4, r5, #1
    de58:	eaffffce 	b	dd98 <CString::Replace(char const*, char const*)+0xb0>
    de5c:	000152e4 	.word	0x000152e4

0000de60 <CString::ReserveSpace(unsigned int)>:
    de60:	e3510000 	cmp	r1, #0
    de64:	012fff1e 	bxeq	lr
    de68:	eafffeb5 	b	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000de6c <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    de6c:	e1510002 	cmp	r1, r2
    de70:	e92d4070 	push	{r4, r5, r6, lr}
    de74:	23a0c001 	movcs	ip, #1
    de78:	3a000018 	bcc	dee0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x74>
    de7c:	e00c0c92 	mul	ip, r2, ip
    de80:	e734fc11 	udiv	r4, r1, ip
    de84:	e1540002 	cmp	r4, r2
    de88:	e1a0e004 	mov	lr, r4
    de8c:	2afffffa 	bcs	de7c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
    de90:	e3530000 	cmp	r3, #0
    de94:	e1a05000 	mov	r5, r0
    de98:	13a06037 	movne	r6, #55	; 0x37
    de9c:	03a06057 	moveq	r6, #87	; 0x57
    dea0:	ea000001 	b	deac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x40>
    dea4:	e734fc11 	udiv	r4, r1, ip
    dea8:	e1a0e004 	mov	lr, r4
    deac:	e061149c 	mls	r1, ip, r4, r1
    deb0:	e35e0009 	cmp	lr, #9
    deb4:	e73cf21c 	udiv	ip, ip, r2
    deb8:	e086300e 	add	r3, r6, lr
    debc:	e28ee030 	add	lr, lr, #48	; 0x30
    dec0:	e2855001 	add	r5, r5, #1
    dec4:	e6af3073 	sxtb	r3, r3
    dec8:	96af307e 	sxtbls	r3, lr
    decc:	e35c0000 	cmp	ip, #0
    ded0:	e5453001 	strb	r3, [r5, #-1]
    ded4:	1afffff2 	bne	dea4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x38>
    ded8:	e5c5c000 	strb	ip, [r5]
    dedc:	e8bd8070 	pop	{r4, r5, r6, pc}
    dee0:	e1a0e001 	mov	lr, r1
    dee4:	e3a0c001 	mov	ip, #1
    dee8:	e1a04001 	mov	r4, r1
    deec:	eaffffe7 	b	de90 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0000def0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    def0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    def4:	e3a07000 	mov	r7, #0
    def8:	e1530007 	cmp	r3, r7
    defc:	e24dd01c 	sub	sp, sp, #28
    df00:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    df04:	e1cd21f0 	strd	r2, [sp, #16]
    df08:	01520001 	cmpeq	r2, r1
    df0c:	e58d000c 	str	r0, [sp, #12]
    df10:	e5dda044 	ldrb	sl, [sp, #68]	; 0x44
    df14:	e1a06001 	mov	r6, r1
    df18:	3a00003e 	bcc	e018 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x128>
    df1c:	e58da000 	str	sl, [sp]
    df20:	e3a04001 	mov	r4, #1
    df24:	e1cda1d0 	ldrd	sl, [sp, #16]
    df28:	e3a05000 	mov	r5, #0
    df2c:	e0030794 	mul	r3, r4, r7
    df30:	e1a0000a 	mov	r0, sl
    df34:	e0233596 	mla	r3, r6, r5, r3
    df38:	e1a0100b 	mov	r1, fp
    df3c:	e0854694 	umull	r4, r5, r4, r6
    df40:	e0835005 	add	r5, r3, r5
    df44:	e1a02004 	mov	r2, r4
    df48:	e1a03005 	mov	r3, r5
    df4c:	fa0019ba 	blx	1463c <__aeabi_uldivmod>
    df50:	e1510007 	cmp	r1, r7
    df54:	01500006 	cmpeq	r0, r6
    df58:	e1a08000 	mov	r8, r0
    df5c:	e1a09001 	mov	r9, r1
    df60:	2afffff1 	bcs	df2c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
    df64:	e59da000 	ldr	sl, [sp]
    df68:	e35a0000 	cmp	sl, #0
    df6c:	e59da00c 	ldr	sl, [sp, #12]
    df70:	13a0b037 	movne	fp, #55	; 0x37
    df74:	03a0b057 	moveq	fp, #87	; 0x57
    df78:	e1cd60f0 	strd	r6, [sp]
    df7c:	e1a0700a 	mov	r7, sl
    df80:	e1a0600b 	mov	r6, fp
    df84:	e1cda1d0 	ldrd	sl, [sp, #16]
    df88:	ea000002 	b	df98 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xa8>
    df8c:	fa0019aa 	blx	1463c <__aeabi_uldivmod>
    df90:	e1a08000 	mov	r8, r0
    df94:	e1a09001 	mov	r9, r1
    df98:	e1a0000a 	mov	r0, sl
    df9c:	e1a0100b 	mov	r1, fp
    dfa0:	e1a02004 	mov	r2, r4
    dfa4:	e1a03005 	mov	r3, r5
    dfa8:	fa0019a3 	blx	1463c <__aeabi_uldivmod>
    dfac:	e3590000 	cmp	r9, #0
    dfb0:	03580009 	cmpeq	r8, #9
    dfb4:	e1a0b003 	mov	fp, r3
    dfb8:	e2877001 	add	r7, r7, #1
    dfbc:	e0863008 	add	r3, r6, r8
    dfc0:	e2888030 	add	r8, r8, #48	; 0x30
    dfc4:	e1a0a002 	mov	sl, r2
    dfc8:	e6af3073 	sxtb	r3, r3
    dfcc:	e1a00004 	mov	r0, r4
    dfd0:	96af3078 	sxtbls	r3, r8
    dfd4:	e1a01005 	mov	r1, r5
    dfd8:	e5473001 	strb	r3, [r7, #-1]
    dfdc:	e1cd20d0 	ldrd	r2, [sp]
    dfe0:	fa001995 	blx	1463c <__aeabi_uldivmod>
    dfe4:	e1a04000 	mov	r4, r0
    dfe8:	e1a05001 	mov	r5, r1
    dfec:	e1943005 	orrs	r3, r4, r5
    dff0:	e1a02000 	mov	r2, r0
    dff4:	e1a03001 	mov	r3, r1
    dff8:	e1a0000a 	mov	r0, sl
    dffc:	e1a0100b 	mov	r1, fp
    e000:	1affffe1 	bne	df8c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x9c>
    e004:	e3a03000 	mov	r3, #0
    e008:	e59d000c 	ldr	r0, [sp, #12]
    e00c:	e5c73000 	strb	r3, [r7]
    e010:	e28dd01c 	add	sp, sp, #28
    e014:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e018:	e1a08002 	mov	r8, r2
    e01c:	e1a09003 	mov	r9, r3
    e020:	e3a04001 	mov	r4, #1
    e024:	e3a05000 	mov	r5, #0
    e028:	eaffffce 	b	df68 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x78>

0000e02c <CString::ftoa(char*, double, unsigned int)>:
    e02c:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e030:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e034:	eddf0b87 	vldr	d16, [pc, #540]	; e258 <CString::ftoa(char*, double, unsigned int)+0x22c>
    e038:	ed2d8b02 	vpush	{d8}
    e03c:	eeb08b40 	vmov.f64	d8, d0
    e040:	e24dd010 	sub	sp, sp, #16
    e044:	e1a05000 	mov	r5, r0
    e048:	e1a06001 	mov	r6, r1
    e04c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e050:	4eb18b40 	vnegmi.f64	d8, d0
    e054:	43a0302d 	movmi	r3, #45	; 0x2d
    e058:	45c03000 	strbmi	r3, [r0]
    e05c:	42807001 	addmi	r7, r0, #1
    e060:	51a07000 	movpl	r7, r0
    e064:	eeb48be0 	vcmpe.f64	d8, d16
    e068:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e06c:	ca000068 	bgt	e214 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    e070:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e074:	ee174a90 	vmov	r4, s15
    e078:	e3540009 	cmp	r4, #9
    e07c:	83a03001 	movhi	r3, #1
    e080:	83a0100a 	movhi	r1, #10
    e084:	9a00006a 	bls	e234 <CString::ftoa(char*, double, unsigned int)+0x208>
    e088:	e0030391 	mul	r3, r1, r3
    e08c:	e732f314 	udiv	r2, r4, r3
    e090:	e3520009 	cmp	r2, #9
    e094:	8afffffb 	bhi	e088 <CString::ftoa(char*, double, unsigned int)+0x5c>
    e098:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    e09c:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    e0a0:	e1a0c007 	mov	ip, r7
    e0a4:	e1a01004 	mov	r1, r4
    e0a8:	e73ef314 	udiv	lr, r4, r3
    e0ac:	ea000001 	b	e0b8 <CString::ftoa(char*, double, unsigned int)+0x8c>
    e0b0:	e73ef311 	udiv	lr, r1, r3
    e0b4:	e1a0200e 	mov	r2, lr
    e0b8:	e3520009 	cmp	r2, #9
    e0bc:	e2820057 	add	r0, r2, #87	; 0x57
    e0c0:	e2822030 	add	r2, r2, #48	; 0x30
    e0c4:	e0611e93 	mls	r1, r3, lr, r1
    e0c8:	e6af0070 	sxtb	r0, r0
    e0cc:	e28cc001 	add	ip, ip, #1
    e0d0:	96af0072 	sxtbls	r0, r2
    e0d4:	e0832398 	umull	r2, r3, r8, r3
    e0d8:	e1b031a3 	lsrs	r3, r3, #3
    e0dc:	e54c0001 	strb	r0, [ip, #-1]
    e0e0:	1afffff2 	bne	e0b0 <CString::ftoa(char*, double, unsigned int)+0x84>
    e0e4:	e3560000 	cmp	r6, #0
    e0e8:	e5cc3000 	strb	r3, [ip]
    e0ec:	1a000003 	bne	e100 <CString::ftoa(char*, double, unsigned int)+0xd4>
    e0f0:	e1a00005 	mov	r0, r5
    e0f4:	e28dd010 	add	sp, sp, #16
    e0f8:	ecbd8b02 	vpop	{d8}
    e0fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e100:	e1a00007 	mov	r0, r7
    e104:	eb000758 	bl	fe6c <strlen>
    e108:	e3560009 	cmp	r6, #9
    e10c:	23a06009 	movcs	r6, #9
    e110:	e3a0302e 	mov	r3, #46	; 0x2e
    e114:	e3560001 	cmp	r6, #1
    e118:	e0878000 	add	r8, r7, r0
    e11c:	e7c73000 	strb	r3, [r7, r0]
    e120:	e2887001 	add	r7, r8, #1
    e124:	0a000049 	beq	e250 <CString::ftoa(char*, double, unsigned int)+0x224>
    e128:	e3a0200a 	mov	r2, #10
    e12c:	e3a03002 	mov	r3, #2
    e130:	e1a01002 	mov	r1, r2
    e134:	e2833001 	add	r3, r3, #1
    e138:	e0020291 	mul	r2, r1, r2
    e13c:	e1530006 	cmp	r3, r6
    e140:	9afffffb 	bls	e134 <CString::ftoa(char*, double, unsigned int)+0x108>
    e144:	ee072a90 	vmov	s15, r2
    e148:	eef81b67 	vcvt.f64.u32	d17, s15
    e14c:	ee074a90 	vmov	s15, r4
    e150:	eef80b67 	vcvt.f64.u32	d16, s15
    e154:	ee388b60 	vsub.f64	d8, d8, d16
    e158:	ee288b21 	vmul.f64	d8, d8, d17
    e15c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e160:	ee17ca90 	vmov	ip, s15
    e164:	e35c0009 	cmp	ip, #9
    e168:	83a03001 	movhi	r3, #1
    e16c:	83a0000a 	movhi	r0, #10
    e170:	9a000032 	bls	e240 <CString::ftoa(char*, double, unsigned int)+0x214>
    e174:	e0030390 	mul	r3, r0, r3
    e178:	e731f31c 	udiv	r1, ip, r3
    e17c:	e3510009 	cmp	r1, #9
    e180:	e1a02001 	mov	r2, r1
    e184:	8afffffa 	bhi	e174 <CString::ftoa(char*, double, unsigned int)+0x148>
    e188:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    e18c:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    e190:	e28de004 	add	lr, sp, #4
    e194:	ea000001 	b	e1a0 <CString::ftoa(char*, double, unsigned int)+0x174>
    e198:	e731f31c 	udiv	r1, ip, r3
    e19c:	e1a02001 	mov	r2, r1
    e1a0:	e3520009 	cmp	r2, #9
    e1a4:	e2820057 	add	r0, r2, #87	; 0x57
    e1a8:	e2822030 	add	r2, r2, #48	; 0x30
    e1ac:	e06cc193 	mls	ip, r3, r1, ip
    e1b0:	e6af1070 	sxtb	r1, r0
    e1b4:	e28ee001 	add	lr, lr, #1
    e1b8:	96af1072 	sxtbls	r1, r2
    e1bc:	e0832394 	umull	r2, r3, r4, r3
    e1c0:	e1b031a3 	lsrs	r3, r3, #3
    e1c4:	e54e1001 	strb	r1, [lr, #-1]
    e1c8:	1afffff2 	bne	e198 <CString::ftoa(char*, double, unsigned int)+0x16c>
    e1cc:	e28d0004 	add	r0, sp, #4
    e1d0:	e5ce3000 	strb	r3, [lr]
    e1d4:	eb000724 	bl	fe6c <strlen>
    e1d8:	e0566000 	subs	r6, r6, r0
    e1dc:	0a000005 	beq	e1f8 <CString::ftoa(char*, double, unsigned int)+0x1cc>
    e1e0:	e3a02030 	mov	r2, #48	; 0x30
    e1e4:	e0883006 	add	r3, r8, r6
    e1e8:	e5e82001 	strb	r2, [r8, #1]!
    e1ec:	e1580003 	cmp	r8, r3
    e1f0:	1afffffc 	bne	e1e8 <CString::ftoa(char*, double, unsigned int)+0x1bc>
    e1f4:	e0877006 	add	r7, r7, r6
    e1f8:	e28d1004 	add	r1, sp, #4
    e1fc:	e1a00007 	mov	r0, r7
    e200:	eb0007d8 	bl	10168 <strcpy>
    e204:	e1a00005 	mov	r0, r5
    e208:	e28dd010 	add	sp, sp, #16
    e20c:	ecbd8b02 	vpop	{d8}
    e210:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e214:	e1a00007 	mov	r0, r7
    e218:	e30512ec 	movw	r1, #21228	; 0x52ec
    e21c:	e3401001 	movt	r1, #1
    e220:	eb0007d0 	bl	10168 <strcpy>
    e224:	e1a00005 	mov	r0, r5
    e228:	e28dd010 	add	sp, sp, #16
    e22c:	ecbd8b02 	vpop	{d8}
    e230:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e234:	ee172a90 	vmov	r2, s15
    e238:	e3a03001 	mov	r3, #1
    e23c:	eaffff95 	b	e098 <CString::ftoa(char*, double, unsigned int)+0x6c>
    e240:	ee172a90 	vmov	r2, s15
    e244:	e3a03001 	mov	r3, #1
    e248:	ee171a90 	vmov	r1, s15
    e24c:	eaffffcd 	b	e188 <CString::ftoa(char*, double, unsigned int)+0x15c>
    e250:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    e254:	eaffffbc 	b	e14c <CString::ftoa(char*, double, unsigned int)+0x120>
    e258:	ffe00000 	.word	0xffe00000
    e25c:	41efffff 	.word	0x41efffff

0000e260 <CString::FormatV(char const*, std::__va_list)>:
    e260:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e264:	e1a07000 	mov	r7, r0
    e268:	e5900004 	ldr	r0, [r0, #4]
    e26c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    e270:	e1a06001 	mov	r6, r1
    e274:	e3500000 	cmp	r0, #0
    e278:	e58d200c 	str	r2, [sp, #12]
    e27c:	0a000000 	beq	e284 <CString::FormatV(char const*, std::__va_list)+0x24>
    e280:	eb000a3f 	bl	10b84 <operator delete[](void*)>
    e284:	e3a00040 	mov	r0, #64	; 0x40
    e288:	e30532f8 	movw	r3, #21240	; 0x52f8
    e28c:	e3403001 	movt	r3, #1
    e290:	e5870008 	str	r0, [r7, #8]
    e294:	e58d3034 	str	r3, [sp, #52]	; 0x34
    e298:	eb000a32 	bl	10b68 <operator new[](unsigned int)>
    e29c:	e30532fc 	movw	r3, #21244	; 0x52fc
    e2a0:	e3403001 	movt	r3, #1
    e2a4:	e58d3038 	str	r3, [sp, #56]	; 0x38
    e2a8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    e2ac:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    e2b0:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    e2b4:	e5870004 	str	r0, [r7, #4]
    e2b8:	e587000c 	str	r0, [r7, #12]
    e2bc:	e1d640d0 	ldrsb	r4, [r6]
    e2c0:	e3540000 	cmp	r4, #0
    e2c4:	0a000096 	beq	e524 <CString::FormatV(char const*, std::__va_list)+0x2c4>
    e2c8:	e3540025 	cmp	r4, #37	; 0x25
    e2cc:	13a01001 	movne	r1, #1
    e2d0:	11a00007 	movne	r0, r7
    e2d4:	1a0001b8 	bne	e9bc <CString::FormatV(char const*, std::__va_list)+0x75c>
    e2d8:	e1d650d1 	ldrsb	r5, [r6, #1]
    e2dc:	e3550025 	cmp	r5, #37	; 0x25
    e2e0:	0a0001d3 	beq	ea34 <CString::FormatV(char const*, std::__va_list)+0x7d4>
    e2e4:	e3550023 	cmp	r5, #35	; 0x23
    e2e8:	e3a04000 	mov	r4, #0
    e2ec:	12866001 	addne	r6, r6, #1
    e2f0:	13a02000 	movne	r2, #0
    e2f4:	03a02001 	moveq	r2, #1
    e2f8:	01d650d2 	ldrsbeq	r5, [r6, #2]
    e2fc:	02866002 	addeq	r6, r6, #2
    e300:	e355002d 	cmp	r5, #45	; 0x2d
    e304:	03a03001 	moveq	r3, #1
    e308:	13a03000 	movne	r3, #0
    e30c:	058d3010 	streq	r3, [sp, #16]
    e310:	01d650d1 	ldrsbeq	r5, [r6, #1]
    e314:	00866003 	addeq	r6, r6, r3
    e318:	158d3010 	strne	r3, [sp, #16]
    e31c:	e3550030 	cmp	r5, #48	; 0x30
    e320:	03a03001 	moveq	r3, #1
    e324:	13a03000 	movne	r3, #0
    e328:	058d3028 	streq	r3, [sp, #40]	; 0x28
    e32c:	01d650d1 	ldrsbeq	r5, [r6, #1]
    e330:	00866003 	addeq	r6, r6, r3
    e334:	158d3028 	strne	r3, [sp, #40]	; 0x28
    e338:	e2453030 	sub	r3, r5, #48	; 0x30
    e33c:	e6ef3073 	uxtb	r3, r3
    e340:	e3530009 	cmp	r3, #9
    e344:	8a000007 	bhi	e368 <CString::FormatV(char const*, std::__va_list)+0x108>
    e348:	e3a0100a 	mov	r1, #10
    e34c:	e0245491 	mla	r4, r1, r4, r5
    e350:	e1f650d1 	ldrsb	r5, [r6, #1]!
    e354:	e2453030 	sub	r3, r5, #48	; 0x30
    e358:	e2444030 	sub	r4, r4, #48	; 0x30
    e35c:	e6ef3073 	uxtb	r3, r3
    e360:	e3530009 	cmp	r3, #9
    e364:	9afffff8 	bls	e34c <CString::FormatV(char const*, std::__va_list)+0xec>
    e368:	e355002e 	cmp	r5, #46	; 0x2e
    e36c:	0a0001a0 	beq	e9f4 <CString::FormatV(char const*, std::__va_list)+0x794>
    e370:	e1d650d0 	ldrsb	r5, [r6]
    e374:	e3a01006 	mov	r1, #6
    e378:	e355006c 	cmp	r5, #108	; 0x6c
    e37c:	13a08000 	movne	r8, #0
    e380:	0a000193 	beq	e9d4 <CString::FormatV(char const*, std::__va_list)+0x774>
    e384:	e2453058 	sub	r3, r5, #88	; 0x58
    e388:	e3530020 	cmp	r3, #32
    e38c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e390:	ea00017e 	b	e990 <CString::FormatV(char const*, std::__va_list)+0x730>
    e394:	0000e960 	.word	0x0000e960
    e398:	0000e990 	.word	0x0000e990
    e39c:	0000e990 	.word	0x0000e990
    e3a0:	0000e990 	.word	0x0000e990
    e3a4:	0000e990 	.word	0x0000e990
    e3a8:	0000e990 	.word	0x0000e990
    e3ac:	0000e990 	.word	0x0000e990
    e3b0:	0000e990 	.word	0x0000e990
    e3b4:	0000e990 	.word	0x0000e990
    e3b8:	0000e990 	.word	0x0000e990
    e3bc:	0000e990 	.word	0x0000e990
    e3c0:	0000e8ec 	.word	0x0000e8ec
    e3c4:	0000e62c 	.word	0x0000e62c
    e3c8:	0000e990 	.word	0x0000e990
    e3cc:	0000e5a8 	.word	0x0000e5a8
    e3d0:	0000e990 	.word	0x0000e990
    e3d4:	0000e990 	.word	0x0000e990
    e3d8:	0000e62c 	.word	0x0000e62c
    e3dc:	0000e990 	.word	0x0000e990
    e3e0:	0000e990 	.word	0x0000e990
    e3e4:	0000e990 	.word	0x0000e990
    e3e8:	0000e990 	.word	0x0000e990
    e3ec:	0000e990 	.word	0x0000e990
    e3f0:	0000e744 	.word	0x0000e744
    e3f4:	0000e960 	.word	0x0000e960
    e3f8:	0000e990 	.word	0x0000e990
    e3fc:	0000e990 	.word	0x0000e990
    e400:	0000e534 	.word	0x0000e534
    e404:	0000e990 	.word	0x0000e990
    e408:	0000e418 	.word	0x0000e418
    e40c:	0000e990 	.word	0x0000e990
    e410:	0000e990 	.word	0x0000e990
    e414:	0000e960 	.word	0x0000e960
    e418:	e3a0c00a 	mov	ip, #10
    e41c:	e3580000 	cmp	r8, #0
    e420:	e59d300c 	ldr	r3, [sp, #12]
    e424:	1a0000d6 	bne	e784 <CString::FormatV(char const*, std::__va_list)+0x524>
    e428:	e593e000 	ldr	lr, [r3]
    e42c:	e2833004 	add	r3, r3, #4
    e430:	e58d300c 	str	r3, [sp, #12]
    e434:	e15c000e 	cmp	ip, lr
    e438:	93a03001 	movls	r3, #1
    e43c:	8a00026d 	bhi	edf8 <CString::FormatV(char const*, std::__va_list)+0xb98>
    e440:	e003039c 	mul	r3, ip, r3
    e444:	e731f31e 	udiv	r1, lr, r3
    e448:	e15c0001 	cmp	ip, r1
    e44c:	e1a02001 	mov	r2, r1
    e450:	9afffffa 	bls	e440 <CString::FormatV(char const*, std::__va_list)+0x1e0>
    e454:	e3550058 	cmp	r5, #88	; 0x58
    e458:	e28d5044 	add	r5, sp, #68	; 0x44
    e45c:	e58d5014 	str	r5, [sp, #20]
    e460:	13a08057 	movne	r8, #87	; 0x57
    e464:	03a08037 	moveq	r8, #55	; 0x37
    e468:	e1a00001 	mov	r0, r1
    e46c:	ea000001 	b	e478 <CString::FormatV(char const*, std::__va_list)+0x218>
    e470:	e730f31e 	udiv	r0, lr, r3
    e474:	e1a02000 	mov	r2, r0
    e478:	e06ee093 	mls	lr, r3, r0, lr
    e47c:	e3520009 	cmp	r2, #9
    e480:	e733fc13 	udiv	r3, r3, ip
    e484:	e0881002 	add	r1, r8, r2
    e488:	e2822030 	add	r2, r2, #48	; 0x30
    e48c:	e2855001 	add	r5, r5, #1
    e490:	e6af1071 	sxtb	r1, r1
    e494:	96af1072 	sxtbls	r1, r2
    e498:	e3530000 	cmp	r3, #0
    e49c:	e5451001 	strb	r1, [r5, #-1]
    e4a0:	1afffff2 	bne	e470 <CString::FormatV(char const*, std::__va_list)+0x210>
    e4a4:	e5c53000 	strb	r3, [r5]
    e4a8:	e59d0014 	ldr	r0, [sp, #20]
    e4ac:	eb00066e 	bl	fe6c <strlen>
    e4b0:	e59d3010 	ldr	r3, [sp, #16]
    e4b4:	e1a05000 	mov	r5, r0
    e4b8:	e3530000 	cmp	r3, #0
    e4bc:	1a000165 	bne	ea58 <CString::FormatV(char const*, std::__va_list)+0x7f8>
    e4c0:	e1500004 	cmp	r0, r4
    e4c4:	2a00000f 	bcs	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    e4c8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    e4cc:	e0444000 	sub	r4, r4, r0
    e4d0:	e1a01004 	mov	r1, r4
    e4d4:	e1a00007 	mov	r0, r7
    e4d8:	e3530000 	cmp	r3, #0
    e4dc:	03a05020 	moveq	r5, #32
    e4e0:	13a05030 	movne	r5, #48	; 0x30
    e4e4:	ebfffd16 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e4e8:	e2443001 	sub	r3, r4, #1
    e4ec:	e597200c 	ldr	r2, [r7, #12]
    e4f0:	e2433001 	sub	r3, r3, #1
    e4f4:	e3730001 	cmn	r3, #1
    e4f8:	e2821001 	add	r1, r2, #1
    e4fc:	e587100c 	str	r1, [r7, #12]
    e500:	e5c25000 	strb	r5, [r2]
    e504:	1afffff8 	bne	e4ec <CString::FormatV(char const*, std::__va_list)+0x28c>
    e508:	e59d1014 	ldr	r1, [sp, #20]
    e50c:	e1a00007 	mov	r0, r7
    e510:	ebfffde3 	bl	dca4 <CString::PutString(char const*)>
    e514:	e2866001 	add	r6, r6, #1
    e518:	e1d640d0 	ldrsb	r4, [r6]
    e51c:	e3540000 	cmp	r4, #0
    e520:	1affff68 	bne	e2c8 <CString::FormatV(char const*, std::__va_list)+0x68>
    e524:	e597300c 	ldr	r3, [r7, #12]
    e528:	e5c34000 	strb	r4, [r3]
    e52c:	e28dd06c 	add	sp, sp, #108	; 0x6c
    e530:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e534:	e59d300c 	ldr	r3, [sp, #12]
    e538:	e2835004 	add	r5, r3, #4
    e53c:	e5939000 	ldr	r9, [r3]
    e540:	e1a00009 	mov	r0, r9
    e544:	eb000648 	bl	fe6c <strlen>
    e548:	e59d3010 	ldr	r3, [sp, #16]
    e54c:	e1a08000 	mov	r8, r0
    e550:	e3530000 	cmp	r3, #0
    e554:	1a0001e5 	bne	ecf0 <CString::FormatV(char const*, std::__va_list)+0xa90>
    e558:	e1500004 	cmp	r0, r4
    e55c:	2a00000c 	bcs	e594 <CString::FormatV(char const*, std::__va_list)+0x334>
    e560:	e0444000 	sub	r4, r4, r0
    e564:	e1a00007 	mov	r0, r7
    e568:	e1a01004 	mov	r1, r4
    e56c:	ebfffcf4 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e570:	e2443001 	sub	r3, r4, #1
    e574:	e3a00020 	mov	r0, #32
    e578:	e597200c 	ldr	r2, [r7, #12]
    e57c:	e2433001 	sub	r3, r3, #1
    e580:	e3730001 	cmn	r3, #1
    e584:	e2821001 	add	r1, r2, #1
    e588:	e587100c 	str	r1, [r7, #12]
    e58c:	e5c20000 	strb	r0, [r2]
    e590:	1afffff8 	bne	e578 <CString::FormatV(char const*, std::__va_list)+0x318>
    e594:	e1a01009 	mov	r1, r9
    e598:	e1a00007 	mov	r0, r7
    e59c:	e58d500c 	str	r5, [sp, #12]
    e5a0:	ebfffdbf 	bl	dca4 <CString::PutString(char const*)>
    e5a4:	eaffffda 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    e5a8:	e59d300c 	ldr	r3, [sp, #12]
    e5ac:	e28d2044 	add	r2, sp, #68	; 0x44
    e5b0:	e1a05002 	mov	r5, r2
    e5b4:	e58d2014 	str	r2, [sp, #20]
    e5b8:	e2833007 	add	r3, r3, #7
    e5bc:	e1a00002 	mov	r0, r2
    e5c0:	e3c33007 	bic	r3, r3, #7
    e5c4:	e2832008 	add	r2, r3, #8
    e5c8:	e58d200c 	str	r2, [sp, #12]
    e5cc:	ed930b00 	vldr	d0, [r3]
    e5d0:	ebfffe95 	bl	e02c <CString::ftoa(char*, double, unsigned int)>
    e5d4:	e1a00005 	mov	r0, r5
    e5d8:	eb000623 	bl	fe6c <strlen>
    e5dc:	e59d3010 	ldr	r3, [sp, #16]
    e5e0:	e1a05000 	mov	r5, r0
    e5e4:	e3530000 	cmp	r3, #0
    e5e8:	1a0001d3 	bne	ed3c <CString::FormatV(char const*, std::__va_list)+0xadc>
    e5ec:	e1500004 	cmp	r0, r4
    e5f0:	2affffc4 	bcs	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    e5f4:	e0444000 	sub	r4, r4, r0
    e5f8:	e1a00007 	mov	r0, r7
    e5fc:	e1a01004 	mov	r1, r4
    e600:	ebfffccf 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e604:	e2443001 	sub	r3, r4, #1
    e608:	e3a00020 	mov	r0, #32
    e60c:	e597200c 	ldr	r2, [r7, #12]
    e610:	e2433001 	sub	r3, r3, #1
    e614:	e3730001 	cmn	r3, #1
    e618:	e2821001 	add	r1, r2, #1
    e61c:	e587100c 	str	r1, [r7, #12]
    e620:	e5c20000 	strb	r0, [r2]
    e624:	1afffff8 	bne	e60c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    e628:	eaffffb6 	b	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    e62c:	e3580000 	cmp	r8, #0
    e630:	e59d300c 	ldr	r3, [sp, #12]
    e634:	1a00014f 	bne	eb78 <CString::FormatV(char const*, std::__va_list)+0x918>
    e638:	e5930000 	ldr	r0, [r3]
    e63c:	e2833004 	add	r3, r3, #4
    e640:	e58d300c 	str	r3, [sp, #12]
    e644:	e3500000 	cmp	r0, #0
    e648:	aa0001ee 	bge	ee08 <CString::FormatV(char const*, std::__va_list)+0xba8>
    e64c:	e3a03001 	mov	r3, #1
    e650:	e2600000 	rsb	r0, r0, #0
    e654:	e58d3000 	str	r3, [sp]
    e658:	e58d3018 	str	r3, [sp, #24]
    e65c:	e3500009 	cmp	r0, #9
    e660:	e1a0e000 	mov	lr, r0
    e664:	da0001f8 	ble	ee4c <CString::FormatV(char const*, std::__va_list)+0xbec>
    e668:	e3a03001 	mov	r3, #1
    e66c:	e3a0100a 	mov	r1, #10
    e670:	e0030391 	mul	r3, r1, r3
    e674:	e732f310 	udiv	r2, r0, r3
    e678:	e3520009 	cmp	r2, #9
    e67c:	8afffffb 	bhi	e670 <CString::FormatV(char const*, std::__va_list)+0x410>
    e680:	e28d1044 	add	r1, sp, #68	; 0x44
    e684:	e59d503c 	ldr	r5, [sp, #60]	; 0x3c
    e688:	e58d1014 	str	r1, [sp, #20]
    e68c:	e1a0c001 	mov	ip, r1
    e690:	e730f310 	udiv	r0, r0, r3
    e694:	ea000001 	b	e6a0 <CString::FormatV(char const*, std::__va_list)+0x440>
    e698:	e730f31e 	udiv	r0, lr, r3
    e69c:	e1a02000 	mov	r2, r0
    e6a0:	e3520009 	cmp	r2, #9
    e6a4:	e2821057 	add	r1, r2, #87	; 0x57
    e6a8:	e2822030 	add	r2, r2, #48	; 0x30
    e6ac:	e06ee093 	mls	lr, r3, r0, lr
    e6b0:	e6af1071 	sxtb	r1, r1
    e6b4:	e28cc001 	add	ip, ip, #1
    e6b8:	96af1072 	sxtbls	r1, r2
    e6bc:	e0832395 	umull	r2, r3, r5, r3
    e6c0:	e1b031a3 	lsrs	r3, r3, #3
    e6c4:	e54c1001 	strb	r1, [ip, #-1]
    e6c8:	1afffff2 	bne	e698 <CString::FormatV(char const*, std::__va_list)+0x438>
    e6cc:	e5cc3000 	strb	r3, [ip]
    e6d0:	e59d0014 	ldr	r0, [sp, #20]
    e6d4:	eb0005e4 	bl	fe6c <strlen>
    e6d8:	e59d3010 	ldr	r3, [sp, #16]
    e6dc:	e3530000 	cmp	r3, #0
    e6e0:	e59d3000 	ldr	r3, [sp]
    e6e4:	e0805003 	add	r5, r0, r3
    e6e8:	0a0000ed 	beq	eaa4 <CString::FormatV(char const*, std::__va_list)+0x844>
    e6ec:	e59d3018 	ldr	r3, [sp, #24]
    e6f0:	e3530000 	cmp	r3, #0
    e6f4:	1a0001b6 	bne	edd4 <CString::FormatV(char const*, std::__va_list)+0xb74>
    e6f8:	e59d1014 	ldr	r1, [sp, #20]
    e6fc:	e1a00007 	mov	r0, r7
    e700:	ebfffd67 	bl	dca4 <CString::PutString(char const*)>
    e704:	e1550004 	cmp	r5, r4
    e708:	2affff81 	bcs	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    e70c:	e0444005 	sub	r4, r4, r5
    e710:	e1a00007 	mov	r0, r7
    e714:	e1a01004 	mov	r1, r4
    e718:	ebfffc89 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e71c:	e2443001 	sub	r3, r4, #1
    e720:	e3a00020 	mov	r0, #32
    e724:	e597200c 	ldr	r2, [r7, #12]
    e728:	e2433001 	sub	r3, r3, #1
    e72c:	e3730001 	cmn	r3, #1
    e730:	e2821001 	add	r1, r2, #1
    e734:	e587100c 	str	r1, [r7, #12]
    e738:	e5c20000 	strb	r0, [r2]
    e73c:	1afffff8 	bne	e724 <CString::FormatV(char const*, std::__va_list)+0x4c4>
    e740:	eaffff73 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    e744:	e3520000 	cmp	r2, #0
    e748:	03a0c008 	moveq	ip, #8
    e74c:	0affff32 	beq	e41c <CString::FormatV(char const*, std::__va_list)+0x1bc>
    e750:	e3a01001 	mov	r1, #1
    e754:	e1a00007 	mov	r0, r7
    e758:	ebfffc79 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e75c:	e597300c 	ldr	r3, [r7, #12]
    e760:	e3a02030 	mov	r2, #48	; 0x30
    e764:	e3580000 	cmp	r8, #0
    e768:	e2831001 	add	r1, r3, #1
    e76c:	e3a0c008 	mov	ip, #8
    e770:	e587100c 	str	r1, [r7, #12]
    e774:	e5c32000 	strb	r2, [r3]
    e778:	e59d300c 	ldr	r3, [sp, #12]
    e77c:	e1d650d0 	ldrsb	r5, [r6]
    e780:	0affff28 	beq	e428 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    e784:	ee80cb90 	vdup.32	d16, ip
    e788:	e2833007 	add	r3, r3, #7
    e78c:	e3c33007 	bic	r3, r3, #7
    e790:	e2832008 	add	r2, r3, #8
    e794:	e58d200c 	str	r2, [sp, #12]
    e798:	e1c320d0 	ldrd	r2, [r3]
    e79c:	f3e000b0 	vshr.u64	d16, d16, #32
    e7a0:	e1cd21f8 	strd	r2, [sp, #24]
    e7a4:	ec510b30 	vmov	r0, r1, d16
    e7a8:	edcd0b00 	vstr	d16, [sp]
    e7ac:	e1510003 	cmp	r1, r3
    e7b0:	01500002 	cmpeq	r0, r2
    e7b4:	8a000197 	bhi	ee18 <CString::FormatV(char const*, std::__va_list)+0xbb8>
    e7b8:	e58d5014 	str	r5, [sp, #20]
    e7bc:	e3a08001 	mov	r8, #1
    e7c0:	e58d4020 	str	r4, [sp, #32]
    e7c4:	e3a09000 	mov	r9, #0
    e7c8:	e58d702c 	str	r7, [sp, #44]	; 0x2c
    e7cc:	e1a04000 	mov	r4, r0
    e7d0:	e58d6030 	str	r6, [sp, #48]	; 0x30
    e7d4:	e1a05001 	mov	r5, r1
    e7d8:	e1a06002 	mov	r6, r2
    e7dc:	e1a07003 	mov	r7, r3
    e7e0:	e0030598 	mul	r3, r8, r5
    e7e4:	e1a00006 	mov	r0, r6
    e7e8:	e0233994 	mla	r3, r4, r9, r3
    e7ec:	e1a01007 	mov	r1, r7
    e7f0:	e0898498 	umull	r8, r9, r8, r4
    e7f4:	e0839009 	add	r9, r3, r9
    e7f8:	e1a02008 	mov	r2, r8
    e7fc:	e1a03009 	mov	r3, r9
    e800:	fa00178d 	blx	1463c <__aeabi_uldivmod>
    e804:	e1550001 	cmp	r5, r1
    e808:	01540000 	cmpeq	r4, r0
    e80c:	e1a0a000 	mov	sl, r0
    e810:	e1a0b001 	mov	fp, r1
    e814:	9afffff1 	bls	e7e0 <CString::FormatV(char const*, std::__va_list)+0x580>
    e818:	e59d5014 	ldr	r5, [sp, #20]
    e81c:	e59d4020 	ldr	r4, [sp, #32]
    e820:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
    e824:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    e828:	e3550058 	cmp	r5, #88	; 0x58
    e82c:	e28d5044 	add	r5, sp, #68	; 0x44
    e830:	13a03057 	movne	r3, #87	; 0x57
    e834:	03a03037 	moveq	r3, #55	; 0x37
    e838:	e58d5014 	str	r5, [sp, #20]
    e83c:	e58d4020 	str	r4, [sp, #32]
    e840:	e58d702c 	str	r7, [sp, #44]	; 0x2c
    e844:	e1a07003 	mov	r7, r3
    e848:	e58d6030 	str	r6, [sp, #48]	; 0x30
    e84c:	e1a06005 	mov	r6, r5
    e850:	e1cd41d8 	ldrd	r4, [sp, #24]
    e854:	ea000002 	b	e864 <CString::FormatV(char const*, std::__va_list)+0x604>
    e858:	fa001777 	blx	1463c <__aeabi_uldivmod>
    e85c:	e1a0a000 	mov	sl, r0
    e860:	e1a0b001 	mov	fp, r1
    e864:	e1a00004 	mov	r0, r4
    e868:	e1a01005 	mov	r1, r5
    e86c:	e1a02008 	mov	r2, r8
    e870:	e1a03009 	mov	r3, r9
    e874:	fa001770 	blx	1463c <__aeabi_uldivmod>
    e878:	e35b0000 	cmp	fp, #0
    e87c:	035a0009 	cmpeq	sl, #9
    e880:	e087c00a 	add	ip, r7, sl
    e884:	e2866001 	add	r6, r6, #1
    e888:	e28aa030 	add	sl, sl, #48	; 0x30
    e88c:	e6afc07c 	sxtb	ip, ip
    e890:	e1a04002 	mov	r4, r2
    e894:	96afc07a 	sxtbls	ip, sl
    e898:	e1a05003 	mov	r5, r3
    e89c:	e1a00008 	mov	r0, r8
    e8a0:	e1a01009 	mov	r1, r9
    e8a4:	e1cd20d0 	ldrd	r2, [sp]
    e8a8:	e546c001 	strb	ip, [r6, #-1]
    e8ac:	fa001762 	blx	1463c <__aeabi_uldivmod>
    e8b0:	e1a08000 	mov	r8, r0
    e8b4:	e1a09001 	mov	r9, r1
    e8b8:	e1a00004 	mov	r0, r4
    e8bc:	e1983009 	orrs	r3, r8, r9
    e8c0:	e1a01005 	mov	r1, r5
    e8c4:	e1a02008 	mov	r2, r8
    e8c8:	e1a03009 	mov	r3, r9
    e8cc:	1affffe1 	bne	e858 <CString::FormatV(char const*, std::__va_list)+0x5f8>
    e8d0:	e1a05006 	mov	r5, r6
    e8d4:	e3a03000 	mov	r3, #0
    e8d8:	e59d4020 	ldr	r4, [sp, #32]
    e8dc:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
    e8e0:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    e8e4:	e5c53000 	strb	r3, [r5]
    e8e8:	eafffeee 	b	e4a8 <CString::FormatV(char const*, std::__va_list)+0x248>
    e8ec:	e59d3010 	ldr	r3, [sp, #16]
    e8f0:	e3530000 	cmp	r3, #0
    e8f4:	e59d300c 	ldr	r3, [sp, #12]
    e8f8:	e2835004 	add	r5, r3, #4
    e8fc:	e1d380d0 	ldrsb	r8, [r3]
    e900:	1a000085 	bne	eb1c <CString::FormatV(char const*, std::__va_list)+0x8bc>
    e904:	e3540001 	cmp	r4, #1
    e908:	9a00000b 	bls	e93c <CString::FormatV(char const*, std::__va_list)+0x6dc>
    e90c:	e2441001 	sub	r1, r4, #1
    e910:	e1a00007 	mov	r0, r7
    e914:	ebfffc0a 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e918:	e2444002 	sub	r4, r4, #2
    e91c:	e3a01020 	mov	r1, #32
    e920:	e597300c 	ldr	r3, [r7, #12]
    e924:	e2444001 	sub	r4, r4, #1
    e928:	e3740001 	cmn	r4, #1
    e92c:	e2832001 	add	r2, r3, #1
    e930:	e587200c 	str	r2, [r7, #12]
    e934:	e5c31000 	strb	r1, [r3]
    e938:	1afffff8 	bne	e920 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    e93c:	e3a01001 	mov	r1, #1
    e940:	e1a00007 	mov	r0, r7
    e944:	ebfffbfe 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e948:	e597300c 	ldr	r3, [r7, #12]
    e94c:	e58d500c 	str	r5, [sp, #12]
    e950:	e2832001 	add	r2, r3, #1
    e954:	e587200c 	str	r2, [r7, #12]
    e958:	e5c38000 	strb	r8, [r3]
    e95c:	eafffeec 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    e960:	e3520000 	cmp	r2, #0
    e964:	03a0c010 	moveq	ip, #16
    e968:	0afffeab 	beq	e41c <CString::FormatV(char const*, std::__va_list)+0x1bc>
    e96c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    e970:	e3550058 	cmp	r5, #88	; 0x58
    e974:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    e978:	e1a00007 	mov	r0, r7
    e97c:	11a01003 	movne	r1, r3
    e980:	ebfffcc7 	bl	dca4 <CString::PutString(char const*)>
    e984:	e1d650d0 	ldrsb	r5, [r6]
    e988:	e3a0c010 	mov	ip, #16
    e98c:	eafffea2 	b	e41c <CString::FormatV(char const*, std::__va_list)+0x1bc>
    e990:	e3a01001 	mov	r1, #1
    e994:	e1a00007 	mov	r0, r7
    e998:	ebfffbe9 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e99c:	e597300c 	ldr	r3, [r7, #12]
    e9a0:	e3a01001 	mov	r1, #1
    e9a4:	e3a02025 	mov	r2, #37	; 0x25
    e9a8:	e0830001 	add	r0, r3, r1
    e9ac:	e587000c 	str	r0, [r7, #12]
    e9b0:	e1a00007 	mov	r0, r7
    e9b4:	e5c32000 	strb	r2, [r3]
    e9b8:	e1d640d0 	ldrsb	r4, [r6]
    e9bc:	ebfffbe0 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e9c0:	e597300c 	ldr	r3, [r7, #12]
    e9c4:	e2832001 	add	r2, r3, #1
    e9c8:	e587200c 	str	r2, [r7, #12]
    e9cc:	e5c34000 	strb	r4, [r3]
    e9d0:	eafffecf 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    e9d4:	e1d650d1 	ldrsb	r5, [r6, #1]
    e9d8:	e355006c 	cmp	r5, #108	; 0x6c
    e9dc:	03a08001 	moveq	r8, #1
    e9e0:	13a08000 	movne	r8, #0
    e9e4:	01d650d2 	ldrsbeq	r5, [r6, #2]
    e9e8:	00866008 	addeq	r6, r6, r8
    e9ec:	e2866001 	add	r6, r6, #1
    e9f0:	eafffe63 	b	e384 <CString::FormatV(char const*, std::__va_list)+0x124>
    e9f4:	e1d650d1 	ldrsb	r5, [r6, #1]
    e9f8:	e3a01000 	mov	r1, #0
    e9fc:	e2866001 	add	r6, r6, #1
    ea00:	e2453030 	sub	r3, r5, #48	; 0x30
    ea04:	e6ef3073 	uxtb	r3, r3
    ea08:	e3530009 	cmp	r3, #9
    ea0c:	8afffe59 	bhi	e378 <CString::FormatV(char const*, std::__va_list)+0x118>
    ea10:	e3a0000a 	mov	r0, #10
    ea14:	e0215190 	mla	r1, r0, r1, r5
    ea18:	e1f650d1 	ldrsb	r5, [r6, #1]!
    ea1c:	e2453030 	sub	r3, r5, #48	; 0x30
    ea20:	e2411030 	sub	r1, r1, #48	; 0x30
    ea24:	e6ef3073 	uxtb	r3, r3
    ea28:	e3530009 	cmp	r3, #9
    ea2c:	9afffff8 	bls	ea14 <CString::FormatV(char const*, std::__va_list)+0x7b4>
    ea30:	eafffe50 	b	e378 <CString::FormatV(char const*, std::__va_list)+0x118>
    ea34:	e3a01001 	mov	r1, #1
    ea38:	e1a00007 	mov	r0, r7
    ea3c:	ebfffbc0 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea40:	e597300c 	ldr	r3, [r7, #12]
    ea44:	e2866002 	add	r6, r6, #2
    ea48:	e2832001 	add	r2, r3, #1
    ea4c:	e587200c 	str	r2, [r7, #12]
    ea50:	e5c35000 	strb	r5, [r3]
    ea54:	eafffe18 	b	e2bc <CString::FormatV(char const*, std::__va_list)+0x5c>
    ea58:	e59d1014 	ldr	r1, [sp, #20]
    ea5c:	e1a00007 	mov	r0, r7
    ea60:	ebfffc8f 	bl	dca4 <CString::PutString(char const*)>
    ea64:	e1550004 	cmp	r5, r4
    ea68:	2afffea9 	bcs	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ea6c:	e0444005 	sub	r4, r4, r5
    ea70:	e1a00007 	mov	r0, r7
    ea74:	e1a01004 	mov	r1, r4
    ea78:	ebfffbb1 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea7c:	e2443001 	sub	r3, r4, #1
    ea80:	e3a00020 	mov	r0, #32
    ea84:	e597200c 	ldr	r2, [r7, #12]
    ea88:	e2433001 	sub	r3, r3, #1
    ea8c:	e3730001 	cmn	r3, #1
    ea90:	e2821001 	add	r1, r2, #1
    ea94:	e587100c 	str	r1, [r7, #12]
    ea98:	e5c20000 	strb	r0, [r2]
    ea9c:	1afffff8 	bne	ea84 <CString::FormatV(char const*, std::__va_list)+0x824>
    eaa0:	eafffe9b 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    eaa4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    eaa8:	e3530000 	cmp	r3, #0
    eaac:	1a0000b5 	bne	ed88 <CString::FormatV(char const*, std::__va_list)+0xb28>
    eab0:	e1550004 	cmp	r5, r4
    eab4:	2a00000c 	bcs	eaec <CString::FormatV(char const*, std::__va_list)+0x88c>
    eab8:	e0444005 	sub	r4, r4, r5
    eabc:	e1a00007 	mov	r0, r7
    eac0:	e1a01004 	mov	r1, r4
    eac4:	ebfffb9e 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eac8:	e2443001 	sub	r3, r4, #1
    eacc:	e3a00020 	mov	r0, #32
    ead0:	e597200c 	ldr	r2, [r7, #12]
    ead4:	e2433001 	sub	r3, r3, #1
    ead8:	e3730001 	cmn	r3, #1
    eadc:	e2821001 	add	r1, r2, #1
    eae0:	e587100c 	str	r1, [r7, #12]
    eae4:	e5c20000 	strb	r0, [r2]
    eae8:	1afffff8 	bne	ead0 <CString::FormatV(char const*, std::__va_list)+0x870>
    eaec:	e59d3018 	ldr	r3, [sp, #24]
    eaf0:	e3530000 	cmp	r3, #0
    eaf4:	0afffe83 	beq	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    eaf8:	e3a01001 	mov	r1, #1
    eafc:	e1a00007 	mov	r0, r7
    eb00:	ebfffb8f 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb04:	e597300c 	ldr	r3, [r7, #12]
    eb08:	e3a0202d 	mov	r2, #45	; 0x2d
    eb0c:	e2831001 	add	r1, r3, #1
    eb10:	e587100c 	str	r1, [r7, #12]
    eb14:	e5c32000 	strb	r2, [r3]
    eb18:	eafffe7a 	b	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    eb1c:	e3a01001 	mov	r1, #1
    eb20:	e1a00007 	mov	r0, r7
    eb24:	ebfffb86 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb28:	e597300c 	ldr	r3, [r7, #12]
    eb2c:	e3540001 	cmp	r4, #1
    eb30:	e2832001 	add	r2, r3, #1
    eb34:	e587200c 	str	r2, [r7, #12]
    eb38:	e5c38000 	strb	r8, [r3]
    eb3c:	9a00000b 	bls	eb70 <CString::FormatV(char const*, std::__va_list)+0x910>
    eb40:	e2441001 	sub	r1, r4, #1
    eb44:	e1a00007 	mov	r0, r7
    eb48:	ebfffb7d 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb4c:	e2444002 	sub	r4, r4, #2
    eb50:	e3a01020 	mov	r1, #32
    eb54:	e597300c 	ldr	r3, [r7, #12]
    eb58:	e2444001 	sub	r4, r4, #1
    eb5c:	e3740001 	cmn	r4, #1
    eb60:	e2832001 	add	r2, r3, #1
    eb64:	e587200c 	str	r2, [r7, #12]
    eb68:	e5c31000 	strb	r1, [r3]
    eb6c:	1afffff8 	bne	eb54 <CString::FormatV(char const*, std::__va_list)+0x8f4>
    eb70:	e58d500c 	str	r5, [sp, #12]
    eb74:	eafffe66 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    eb78:	e2833007 	add	r3, r3, #7
    eb7c:	e3c33007 	bic	r3, r3, #7
    eb80:	e2832008 	add	r2, r3, #8
    eb84:	e58d200c 	str	r2, [sp, #12]
    eb88:	e1c320d0 	ldrd	r2, [r3]
    eb8c:	e3520000 	cmp	r2, #0
    eb90:	e1a09003 	mov	r9, r3
    eb94:	e2d33000 	sbcs	r3, r3, #0
    eb98:	e1a08002 	mov	r8, r2
    eb9c:	aa0000ad 	bge	ee58 <CString::FormatV(char const*, std::__va_list)+0xbf8>
    eba0:	e3a03001 	mov	r3, #1
    eba4:	e2782000 	rsbs	r2, r8, #0
    eba8:	e1a01003 	mov	r1, r3
    ebac:	e58d3000 	str	r3, [sp]
    ebb0:	e2e93000 	rsc	r3, r9, #0
    ebb4:	e1a08002 	mov	r8, r2
    ebb8:	e1a09003 	mov	r9, r3
    ebbc:	e58d1018 	str	r1, [sp, #24]
    ebc0:	e1a03009 	mov	r3, r9
    ebc4:	e1a02008 	mov	r2, r8
    ebc8:	e358000a 	cmp	r8, #10
    ebcc:	e1cd22f0 	strd	r2, [sp, #32]
    ebd0:	e2d33000 	sbcs	r3, r3, #0
    ebd4:	e3a0a001 	mov	sl, #1
    ebd8:	a58d4014 	strge	r4, [sp, #20]
    ebdc:	e3a0b000 	mov	fp, #0
    ebe0:	a1a04008 	movge	r4, r8
    ebe4:	a1a05009 	movge	r5, r9
    ebe8:	ba000012 	blt	ec38 <CString::FormatV(char const*, std::__va_list)+0x9d8>
    ebec:	e09a200a 	adds	r2, sl, sl
    ebf0:	e1a00004 	mov	r0, r4
    ebf4:	e0ab300b 	adc	r3, fp, fp
    ebf8:	e0922002 	adds	r2, r2, r2
    ebfc:	e0a33003 	adc	r3, r3, r3
    ec00:	e09aa002 	adds	sl, sl, r2
    ec04:	e0abb003 	adc	fp, fp, r3
    ec08:	e09aa00a 	adds	sl, sl, sl
    ec0c:	e0abb00b 	adc	fp, fp, fp
    ec10:	e1a01005 	mov	r1, r5
    ec14:	e1a0200a 	mov	r2, sl
    ec18:	e1a0300b 	mov	r3, fp
    ec1c:	fa001686 	blx	1463c <__aeabi_uldivmod>
    ec20:	e3510000 	cmp	r1, #0
    ec24:	03500009 	cmpeq	r0, #9
    ec28:	e1a08000 	mov	r8, r0
    ec2c:	e1a09001 	mov	r9, r1
    ec30:	8affffed 	bhi	ebec <CString::FormatV(char const*, std::__va_list)+0x98c>
    ec34:	e59d4014 	ldr	r4, [sp, #20]
    ec38:	e28d3044 	add	r3, sp, #68	; 0x44
    ec3c:	e58d702c 	str	r7, [sp, #44]	; 0x2c
    ec40:	e58d6030 	str	r6, [sp, #48]	; 0x30
    ec44:	e1a07004 	mov	r7, r4
    ec48:	e58d3014 	str	r3, [sp, #20]
    ec4c:	e1a06003 	mov	r6, r3
    ec50:	e1cd42d0 	ldrd	r4, [sp, #32]
    ec54:	ea000002 	b	ec64 <CString::FormatV(char const*, std::__va_list)+0xa04>
    ec58:	fa001677 	blx	1463c <__aeabi_uldivmod>
    ec5c:	e1a08000 	mov	r8, r0
    ec60:	e1a09001 	mov	r9, r1
    ec64:	e1a00004 	mov	r0, r4
    ec68:	e1a01005 	mov	r1, r5
    ec6c:	e1a0200a 	mov	r2, sl
    ec70:	e1a0300b 	mov	r3, fp
    ec74:	fa001670 	blx	1463c <__aeabi_uldivmod>
    ec78:	e3590000 	cmp	r9, #0
    ec7c:	03580009 	cmpeq	r8, #9
    ec80:	e288c057 	add	ip, r8, #87	; 0x57
    ec84:	e2866001 	add	r6, r6, #1
    ec88:	e2888030 	add	r8, r8, #48	; 0x30
    ec8c:	e6afc07c 	sxtb	ip, ip
    ec90:	e1a04002 	mov	r4, r2
    ec94:	96afc078 	sxtbls	ip, r8
    ec98:	e1a05003 	mov	r5, r3
    ec9c:	e1a0000a 	mov	r0, sl
    eca0:	e3a03000 	mov	r3, #0
    eca4:	e1a0100b 	mov	r1, fp
    eca8:	e3a0200a 	mov	r2, #10
    ecac:	e546c001 	strb	ip, [r6, #-1]
    ecb0:	fa001661 	blx	1463c <__aeabi_uldivmod>
    ecb4:	e1a0a000 	mov	sl, r0
    ecb8:	e1a0b001 	mov	fp, r1
    ecbc:	e1a00004 	mov	r0, r4
    ecc0:	e19a300b 	orrs	r3, sl, fp
    ecc4:	e1a01005 	mov	r1, r5
    ecc8:	e1a0200a 	mov	r2, sl
    eccc:	e1a0300b 	mov	r3, fp
    ecd0:	1affffe0 	bne	ec58 <CString::FormatV(char const*, std::__va_list)+0x9f8>
    ecd4:	e1a05006 	mov	r5, r6
    ecd8:	e3a03000 	mov	r3, #0
    ecdc:	e1a04007 	mov	r4, r7
    ece0:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    ece4:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
    ece8:	e5c53000 	strb	r3, [r5]
    ecec:	eafffe77 	b	e6d0 <CString::FormatV(char const*, std::__va_list)+0x470>
    ecf0:	e1a01009 	mov	r1, r9
    ecf4:	e1a00007 	mov	r0, r7
    ecf8:	ebfffbe9 	bl	dca4 <CString::PutString(char const*)>
    ecfc:	e1580004 	cmp	r8, r4
    ed00:	2affff9a 	bcs	eb70 <CString::FormatV(char const*, std::__va_list)+0x910>
    ed04:	e0444008 	sub	r4, r4, r8
    ed08:	e1a00007 	mov	r0, r7
    ed0c:	e1a01004 	mov	r1, r4
    ed10:	ebfffb0b 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed14:	e2443001 	sub	r3, r4, #1
    ed18:	e3a00020 	mov	r0, #32
    ed1c:	e597200c 	ldr	r2, [r7, #12]
    ed20:	e2433001 	sub	r3, r3, #1
    ed24:	e3730001 	cmn	r3, #1
    ed28:	e2821001 	add	r1, r2, #1
    ed2c:	e587100c 	str	r1, [r7, #12]
    ed30:	e5c20000 	strb	r0, [r2]
    ed34:	1afffff8 	bne	ed1c <CString::FormatV(char const*, std::__va_list)+0xabc>
    ed38:	eaffff8c 	b	eb70 <CString::FormatV(char const*, std::__va_list)+0x910>
    ed3c:	e59d1014 	ldr	r1, [sp, #20]
    ed40:	e1a00007 	mov	r0, r7
    ed44:	ebfffbd6 	bl	dca4 <CString::PutString(char const*)>
    ed48:	e1550004 	cmp	r5, r4
    ed4c:	2afffdf0 	bcs	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ed50:	e0444005 	sub	r4, r4, r5
    ed54:	e1a00007 	mov	r0, r7
    ed58:	e1a01004 	mov	r1, r4
    ed5c:	ebfffaf8 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed60:	e2443001 	sub	r3, r4, #1
    ed64:	e3a00020 	mov	r0, #32
    ed68:	e597200c 	ldr	r2, [r7, #12]
    ed6c:	e2433001 	sub	r3, r3, #1
    ed70:	e3730001 	cmn	r3, #1
    ed74:	e2821001 	add	r1, r2, #1
    ed78:	e587100c 	str	r1, [r7, #12]
    ed7c:	e5c20000 	strb	r0, [r2]
    ed80:	1afffff8 	bne	ed68 <CString::FormatV(char const*, std::__va_list)+0xb08>
    ed84:	eafffde2 	b	e514 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ed88:	e59d3018 	ldr	r3, [sp, #24]
    ed8c:	e3530000 	cmp	r3, #0
    ed90:	1a000024 	bne	ee28 <CString::FormatV(char const*, std::__va_list)+0xbc8>
    ed94:	e1550004 	cmp	r5, r4
    ed98:	2afffdda 	bcs	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    ed9c:	e0444005 	sub	r4, r4, r5
    eda0:	e1a00007 	mov	r0, r7
    eda4:	e1a01004 	mov	r1, r4
    eda8:	ebfffae5 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    edac:	e2443001 	sub	r3, r4, #1
    edb0:	e3a00030 	mov	r0, #48	; 0x30
    edb4:	e597200c 	ldr	r2, [r7, #12]
    edb8:	e2433001 	sub	r3, r3, #1
    edbc:	e3730001 	cmn	r3, #1
    edc0:	e2821001 	add	r1, r2, #1
    edc4:	e587100c 	str	r1, [r7, #12]
    edc8:	e5c20000 	strb	r0, [r2]
    edcc:	1afffff8 	bne	edb4 <CString::FormatV(char const*, std::__va_list)+0xb54>
    edd0:	eafffdcc 	b	e508 <CString::FormatV(char const*, std::__va_list)+0x2a8>
    edd4:	e3a01001 	mov	r1, #1
    edd8:	e1a00007 	mov	r0, r7
    eddc:	ebfffad8 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ede0:	e597300c 	ldr	r3, [r7, #12]
    ede4:	e3a0202d 	mov	r2, #45	; 0x2d
    ede8:	e2831001 	add	r1, r3, #1
    edec:	e587100c 	str	r1, [r7, #12]
    edf0:	e5c32000 	strb	r2, [r3]
    edf4:	eafffe3f 	b	e6f8 <CString::FormatV(char const*, std::__va_list)+0x498>
    edf8:	e1a0200e 	mov	r2, lr
    edfc:	e3a03001 	mov	r3, #1
    ee00:	e1a0100e 	mov	r1, lr
    ee04:	eafffd92 	b	e454 <CString::FormatV(char const*, std::__va_list)+0x1f4>
    ee08:	e3a03000 	mov	r3, #0
    ee0c:	e58d3000 	str	r3, [sp]
    ee10:	e58d3018 	str	r3, [sp, #24]
    ee14:	eafffe10 	b	e65c <CString::FormatV(char const*, std::__va_list)+0x3fc>
    ee18:	e1cda1d8 	ldrd	sl, [sp, #24]
    ee1c:	e3a08001 	mov	r8, #1
    ee20:	e3a09000 	mov	r9, #0
    ee24:	eafffe7f 	b	e828 <CString::FormatV(char const*, std::__va_list)+0x5c8>
    ee28:	e3a01001 	mov	r1, #1
    ee2c:	e1a00007 	mov	r0, r7
    ee30:	ebfffac3 	bl	d944 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee34:	e597300c 	ldr	r3, [r7, #12]
    ee38:	e3a0202d 	mov	r2, #45	; 0x2d
    ee3c:	e2831001 	add	r1, r3, #1
    ee40:	e587100c 	str	r1, [r7, #12]
    ee44:	e5c32000 	strb	r2, [r3]
    ee48:	eaffffd1 	b	ed94 <CString::FormatV(char const*, std::__va_list)+0xb34>
    ee4c:	e1a02000 	mov	r2, r0
    ee50:	e3a03001 	mov	r3, #1
    ee54:	eafffe09 	b	e680 <CString::FormatV(char const*, std::__va_list)+0x420>
    ee58:	e3a03000 	mov	r3, #0
    ee5c:	e58d3000 	str	r3, [sp]
    ee60:	e58d3018 	str	r3, [sp, #24]
    ee64:	eaffff55 	b	ebc0 <CString::FormatV(char const*, std::__va_list)+0x960>

0000ee68 <CString::Format(char const*, ...)>:
    ee68:	e92d000e 	push	{r1, r2, r3}
    ee6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ee70:	e24dd008 	sub	sp, sp, #8
    ee74:	e28d3010 	add	r3, sp, #16
    ee78:	e1a02003 	mov	r2, r3
    ee7c:	e59d100c 	ldr	r1, [sp, #12]
    ee80:	e58d3004 	str	r3, [sp, #4]
    ee84:	ebfffcf5 	bl	e260 <CString::FormatV(char const*, std::__va_list)>
    ee88:	e28dd008 	add	sp, sp, #8
    ee8c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ee90:	e28dd00c 	add	sp, sp, #12
    ee94:	e12fff1e 	bx	lr

0000ee98 <__aeabi_atexit>:
    ee98:	e12fff1e 	bx	lr

0000ee9c <__errno>:
    ee9c:	e59f0000 	ldr	r0, [pc]	; eea4 <__errno+0x8>
    eea0:	e12fff1e 	bx	lr
    eea4:	00017270 	.word	0x00017270

0000eea8 <set_qemu_exit_status>:
    eea8:	e307326c 	movw	r3, #29292	; 0x726c
    eeac:	e3403001 	movt	r3, #1
    eeb0:	e5830008 	str	r0, [r3, #8]
    eeb4:	e12fff1e 	bx	lr

0000eeb8 <halt>:
    eeb8:	f10c0080 	cpsid	i
    eebc:	f10c0040 	cpsid	f
    eec0:	f57ff04f 	dsb	sy
    eec4:	e320f003 	wfi
    eec8:	eafffffc 	b	eec0 <halt+0x8>

0000eecc <reboot>:
    eecc:	e3a03000 	mov	r3, #0
    eed0:	e3433f10 	movt	r3, #16144	; 0x3f10
    eed4:	e3a01001 	mov	r1, #1
    eed8:	e3451a00 	movt	r1, #23040	; 0x5a00
    eedc:	e3a02020 	mov	r2, #32
    eee0:	e3452a00 	movt	r2, #23040	; 0x5a00
    eee4:	e5831024 	str	r1, [r3, #36]	; 0x24
    eee8:	e583201c 	str	r2, [r3, #28]
    eeec:	eafffffe 	b	eeec <reboot+0x20>

0000eef0 <sysinit>:
    eef0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    eef4:	e24ddf4b 	sub	sp, sp, #300	; 0x12c
    eef8:	f1080040 	cpsie	f
    eefc:	f1080080 	cpsie	i
    ef00:	eb000853 	bl	11054 <InvalidateDataCacheL1Only>
    ef04:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    ef08:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    ef0c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    ef10:	f57ff06f 	isb	sy
    ef14:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    ef18:	eee83a10 	vmsr	fpexc, r3
    ef1c:	e3a03403 	mov	r3, #50331648	; 0x3000000
    ef20:	eee13a10 	vmsr	fpscr, r3
    ef24:	e30742fc 	movw	r4, #29436	; 0x72fc
    ef28:	e3404001 	movt	r4, #1
    ef2c:	e3070240 	movw	r0, #29248	; 0x7240
    ef30:	e3400001 	movt	r0, #1
    ef34:	e0442000 	sub	r2, r4, r0
    ef38:	e3a01000 	mov	r1, #0
    ef3c:	eb0005ee 	bl	106fc <memset>
    ef40:	e3540982 	cmp	r4, #2129920	; 0x208000
    ef44:	8a00001e 	bhi	efc4 <sysinit+0xd4>
    ef48:	e28d0010 	add	r0, sp, #16
    ef4c:	e3065f10 	movw	r5, #28432	; 0x6f10
    ef50:	e3405001 	movt	r5, #1
    ef54:	ebffee97 	bl	a9b8 <CMachineInfo::CMachineInfo()>
    ef58:	e3a01001 	mov	r1, #1
    ef5c:	e28d004c 	add	r0, sp, #76	; 0x4c
    ef60:	e3064f04 	movw	r4, #28420	; 0x6f04
    ef64:	e3404001 	movt	r4, #1
    ef68:	eb0009cb 	bl	1169c <CMemorySystem::CMemorySystem(bool)>
    ef6c:	e1a0000d 	mov	r0, sp
    ef70:	ebfffa8d 	bl	d9ac <CString::CString()>
    ef74:	e3a03003 	mov	r3, #3
    ef78:	e3a0202d 	mov	r2, #45	; 0x2d
    ef7c:	e1a0000d 	mov	r0, sp
    ef80:	e3051300 	movw	r1, #21248	; 0x5300
    ef84:	e3401001 	movt	r1, #1
    ef88:	ebffffb6 	bl	ee68 <CString::Format(char const*, ...)>
    ef8c:	e1a0000d 	mov	r0, sp
    ef90:	ebfffabd 	bl	da8c <CString::operator char const*() const>
    ef94:	e1a01000 	mov	r1, r0
    ef98:	e59f004c 	ldr	r0, [pc, #76]	; efec <sysinit+0xfc>
    ef9c:	eb000471 	bl	10168 <strcpy>
    efa0:	e1540005 	cmp	r4, r5
    efa4:	2a000003 	bcs	efb8 <sysinit+0xc8>
    efa8:	e4943004 	ldr	r3, [r4], #4
    efac:	e12fff33 	blx	r3
    efb0:	e1540005 	cmp	r4, r5
    efb4:	3afffffb 	bcc	efa8 <sysinit+0xb8>
    efb8:	ebffe42c 	bl	8070 <main>
    efbc:	e3500001 	cmp	r0, #1
    efc0:	0a000000 	beq	efc8 <sysinit+0xd8>
    efc4:	ebffffbb 	bl	eeb8 <halt>
    efc8:	eb0006c9 	bl	10af4 <IsChainBootEnabled>
    efcc:	e3500000 	cmp	r0, #0
    efd0:	1a000000 	bne	efd8 <sysinit+0xe8>
    efd4:	ebffffbc 	bl	eecc <reboot>
    efd8:	e28d004c 	add	r0, sp, #76	; 0x4c
    efdc:	eb000a0f 	bl	11820 <CMemorySystem::Destructor()>
    efe0:	f10c0040 	cpsid	f
    efe4:	eb0006c8 	bl	10b0c <DoChainBoot>
    efe8:	eafffff9 	b	efd4 <sysinit+0xe4>
    efec:	00017278 	.word	0x00017278

0000eff0 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>:
    eff0:	e2800001 	add	r0, r0, #1
    eff4:	f57ff06f 	isb	sy
    eff8:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    effc:	f57ff06f 	isb	sy
    f000:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    f004:	e0433002 	sub	r3, r3, r2
    f008:	e1500003 	cmp	r0, r3
    f00c:	8afffffa 	bhi	effc <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0xc>
    f010:	e12fff1e 	bx	lr

0000f014 <CTimer::CTimer(CInterruptSystem*)>:
    f014:	e92d4070 	push	{r4, r5, r6, lr}
    f018:	e1a04000 	mov	r4, r0
    f01c:	e3a05000 	mov	r5, #0
    f020:	e3a06001 	mov	r6, #1
    f024:	e2800018 	add	r0, r0, #24
    f028:	e5845004 	str	r5, [r4, #4]
    f02c:	e5841000 	str	r1, [r4]
    f030:	e5845008 	str	r5, [r4, #8]
    f034:	e5845014 	str	r5, [r4, #20]
    f038:	e5846010 	str	r6, [r4, #16]
    f03c:	e584500c 	str	r5, [r4, #12]
    f040:	eb001371 	bl	13e0c <CPtrList::CPtrList()>
    f044:	e3073284 	movw	r3, #29316	; 0x7284
    f048:	e3403001 	movt	r3, #1
    f04c:	e3a02d35 	mov	r2, #3392	; 0xd40
    f050:	e3402003 	movt	r2, #3
    f054:	e3a010c8 	mov	r1, #200	; 0xc8
    f058:	e584601c 	str	r6, [r4, #28]
    f05c:	e5930000 	ldr	r0, [r3]
    f060:	e5845028 	str	r5, [r4, #40]	; 0x28
    f064:	e1500005 	cmp	r0, r5
    f068:	e584503c 	str	r5, [r4, #60]	; 0x3c
    f06c:	e5842020 	str	r2, [r4, #32]
    f070:	e5841024 	str	r1, [r4, #36]	; 0x24
    f074:	1a000002 	bne	f084 <CTimer::CTimer(CInterruptSystem*)+0x70>
    f078:	e5834000 	str	r4, [r3]
    f07c:	e1a00004 	mov	r0, r4
    f080:	e8bd8070 	pop	{r4, r5, r6, pc}
    f084:	e3051340 	movw	r1, #21312	; 0x5340
    f088:	e3401001 	movt	r1, #1
    f08c:	e305034c 	movw	r0, #21324	; 0x534c
    f090:	e3400001 	movt	r0, #1
    f094:	e3a02040 	mov	r2, #64	; 0x40
    f098:	eb000c40 	bl	121a0 <assertion_failed>

0000f09c <CTimer::~CTimer()>:
    f09c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f0a0:	e1a08000 	mov	r8, r0
    f0a4:	e5900000 	ldr	r0, [r0]
    f0a8:	e3500000 	cmp	r0, #0
    f0ac:	0a00002f 	beq	f170 <CTimer::~CTimer()+0xd4>
    f0b0:	e3a03000 	mov	r3, #0
    f0b4:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    f0b8:	e3a01049 	mov	r1, #73	; 0x49
    f0bc:	e2884018 	add	r4, r8, #24
    f0c0:	eb000ba7 	bl	11f64 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f0c4:	e1a00004 	mov	r0, r4
    f0c8:	eb00135d 	bl	13e44 <CPtrList::GetFirst()>
    f0cc:	e2505000 	subs	r5, r0, #0
    f0d0:	e3047d43 	movw	r7, #19779	; 0x4d43
    f0d4:	e3447b54 	movt	r7, #19284	; 0x4b54
    f0d8:	0a000011 	beq	f124 <CTimer::~CTimer()+0x88>
    f0dc:	e1a01005 	mov	r1, r5
    f0e0:	e1a00004 	mov	r0, r4
    f0e4:	eb00136e 	bl	13ea4 <CPtrList::GetPtr(TPtrListElement*)>
    f0e8:	e2506000 	subs	r6, r0, #0
    f0ec:	0a000013 	beq	f140 <CTimer::~CTimer()+0xa4>
    f0f0:	e5963000 	ldr	r3, [r6]
    f0f4:	e1530007 	cmp	r3, r7
    f0f8:	1a000016 	bne	f158 <CTimer::~CTimer()+0xbc>
    f0fc:	e1a01005 	mov	r1, r5
    f100:	e1a00004 	mov	r0, r4
    f104:	eb0013f5 	bl	140e0 <CPtrList::Remove(TPtrListElement*)>
    f108:	e1a00006 	mov	r0, r6
    f10c:	e3a01014 	mov	r1, #20
    f110:	eb0006a1 	bl	10b9c <operator delete(void*, unsigned int)>
    f114:	e1a00004 	mov	r0, r4
    f118:	eb001349 	bl	13e44 <CPtrList::GetFirst()>
    f11c:	e2505000 	subs	r5, r0, #0
    f120:	1affffed 	bne	f0dc <CTimer::~CTimer()+0x40>
    f124:	e3073284 	movw	r3, #29316	; 0x7284
    f128:	e3403001 	movt	r3, #1
    f12c:	e1a00004 	mov	r0, r4
    f130:	e5835000 	str	r5, [r3]
    f134:	eb001337 	bl	13e18 <CPtrList::~CPtrList()>
    f138:	e1a00008 	mov	r0, r8
    f13c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f140:	e3051340 	movw	r1, #21312	; 0x5340
    f144:	e3401001 	movt	r1, #1
    f148:	e3050374 	movw	r0, #21364	; 0x5374
    f14c:	e3400001 	movt	r0, #1
    f150:	e3a02057 	mov	r2, #87	; 0x57
    f154:	eb000c11 	bl	121a0 <assertion_failed>
    f158:	e3051340 	movw	r1, #21312	; 0x5340
    f15c:	e3401001 	movt	r1, #1
    f160:	e3050380 	movw	r0, #21376	; 0x5380
    f164:	e3400001 	movt	r0, #1
    f168:	e3a02058 	mov	r2, #88	; 0x58
    f16c:	eb000c0b 	bl	121a0 <assertion_failed>
    f170:	e3051340 	movw	r1, #21312	; 0x5340
    f174:	e3401001 	movt	r1, #1
    f178:	e305035c 	movw	r0, #21340	; 0x535c
    f17c:	e3400001 	movt	r0, #1
    f180:	e3a02046 	mov	r2, #70	; 0x46
    f184:	eb000c05 	bl	121a0 <assertion_failed>

0000f188 <CTimer::SetTimeZone(int)>:
    f188:	e2813e59 	add	r3, r1, #1424	; 0x590
    f18c:	e3002b3e 	movw	r2, #2878	; 0xb3e
    f190:	e283300f 	add	r3, r3, #15
    f194:	e1530002 	cmp	r3, r2
    f198:	95801014 	strls	r1, [r0, #20]
    f19c:	93a00001 	movls	r0, #1
    f1a0:	83a00000 	movhi	r0, #0
    f1a4:	e12fff1e 	bx	lr

0000f1a8 <CTimer::GetTimeZone() const>:
    f1a8:	e5900014 	ldr	r0, [r0, #20]
    f1ac:	e12fff1e 	bx	lr

0000f1b0 <CTimer::SetTime(unsigned int, bool)>:
    f1b0:	e92d4070 	push	{r4, r5, r6, lr}
    f1b4:	e1a05001 	mov	r5, r1
    f1b8:	e5901014 	ldr	r1, [r0, #20]
    f1bc:	e3a0303c 	mov	r3, #60	; 0x3c
    f1c0:	e3520000 	cmp	r2, #0
    f1c4:	e1a04000 	mov	r4, r0
    f1c8:	e0010193 	mul	r1, r3, r1
    f1cc:	1a000002 	bne	f1dc <CTimer::SetTime(unsigned int, bool)+0x2c>
    f1d0:	e3510000 	cmp	r1, #0
    f1d4:	ba00001b 	blt	f248 <CTimer::SetTime(unsigned int, bool)+0x98>
    f1d8:	e0855001 	add	r5, r5, r1
    f1dc:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    f1e0:	e3520000 	cmp	r2, #0
    f1e4:	0a000009 	beq	f210 <CTimer::SetTime(unsigned int, bool)+0x60>
    f1e8:	e594300c 	ldr	r3, [r4, #12]
    f1ec:	e0450001 	sub	r0, r5, r1
    f1f0:	e1510003 	cmp	r1, r3
    f1f4:	d0431001 	suble	r1, r3, r1
    f1f8:	c3a01000 	movgt	r1, #0
    f1fc:	e12fff32 	blx	r2
    f200:	e3500000 	cmp	r0, #0
    f204:	1a000001 	bne	f210 <CTimer::SetTime(unsigned int, bool)+0x60>
    f208:	e3a00000 	mov	r0, #0
    f20c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f210:	e5940010 	ldr	r0, [r4, #16]
    f214:	e3500000 	cmp	r0, #0
    f218:	1a000002 	bne	f228 <CTimer::SetTime(unsigned int, bool)+0x78>
    f21c:	e3a00001 	mov	r0, #1
    f220:	e584500c 	str	r5, [r4, #12]
    f224:	e8bd8070 	pop	{r4, r5, r6, pc}
    f228:	eb000a08 	bl	11a50 <EnterCritical>
    f22c:	e5943010 	ldr	r3, [r4, #16]
    f230:	e584500c 	str	r5, [r4, #12]
    f234:	e3530000 	cmp	r3, #0
    f238:	0a000006 	beq	f258 <CTimer::SetTime(unsigned int, bool)+0xa8>
    f23c:	eb000a30 	bl	11b04 <LeaveCritical>
    f240:	e3a00001 	mov	r0, #1
    f244:	e8bd8070 	pop	{r4, r5, r6, pc}
    f248:	e2613000 	rsb	r3, r1, #0
    f24c:	e1530005 	cmp	r3, r5
    f250:	daffffe0 	ble	f1d8 <CTimer::SetTime(unsigned int, bool)+0x28>
    f254:	eaffffeb 	b	f208 <CTimer::SetTime(unsigned int, bool)+0x58>
    f258:	e3a00001 	mov	r0, #1
    f25c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f260 <CTimer::GetClockTicks()>:
    f260:	f57ff06f 	isb	sy
    f264:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    f268:	e12fff1e 	bx	lr

0000f26c <CTimer::GetTicks() const>:
    f26c:	e5900004 	ldr	r0, [r0, #4]
    f270:	e12fff1e 	bx	lr

0000f274 <CTimer::GetUptime() const>:
    f274:	e5900008 	ldr	r0, [r0, #8]
    f278:	e12fff1e 	bx	lr

0000f27c <CTimer::GetTime() const>:
    f27c:	e590000c 	ldr	r0, [r0, #12]
    f280:	e12fff1e 	bx	lr

0000f284 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    f284:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f288:	e1a04000 	mov	r4, r0
    f28c:	e5900010 	ldr	r0, [r0, #16]
    f290:	e1a05001 	mov	r5, r1
    f294:	e1a06002 	mov	r6, r2
    f298:	e3500000 	cmp	r0, #0
    f29c:	1a000011 	bne	f2e8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    f2a0:	e594700c 	ldr	r7, [r4, #12]
    f2a4:	e5944004 	ldr	r4, [r4, #4]
    f2a8:	e3550000 	cmp	r5, #0
    f2ac:	0a000016 	beq	f30c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
    f2b0:	e3560000 	cmp	r6, #0
    f2b4:	e5857000 	str	r7, [r5]
    f2b8:	0a000019 	beq	f324 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    f2bc:	e308051f 	movw	r0, #34079	; 0x851f
    f2c0:	e34501eb 	movt	r0, #20971	; 0x51eb
    f2c4:	e3a02064 	mov	r2, #100	; 0x64
    f2c8:	e3023710 	movw	r3, #10000	; 0x2710
    f2cc:	e0810094 	umull	r0, r1, r4, r0
    f2d0:	e3a00001 	mov	r0, #1
    f2d4:	e1a012a1 	lsr	r1, r1, #5
    f2d8:	e0614192 	mls	r1, r2, r1, r4
    f2dc:	e0030193 	mul	r3, r3, r1
    f2e0:	e5863000 	str	r3, [r6]
    f2e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f2e8:	eb0009d8 	bl	11a50 <EnterCritical>
    f2ec:	e5943010 	ldr	r3, [r4, #16]
    f2f0:	e594700c 	ldr	r7, [r4, #12]
    f2f4:	e3530000 	cmp	r3, #0
    f2f8:	e5944004 	ldr	r4, [r4, #4]
    f2fc:	0affffe9 	beq	f2a8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    f300:	eb0009ff 	bl	11b04 <LeaveCritical>
    f304:	e3550000 	cmp	r5, #0
    f308:	1affffe8 	bne	f2b0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    f30c:	e3051340 	movw	r1, #21312	; 0x5340
    f310:	e3401001 	movt	r1, #1
    f314:	e30503a8 	movw	r0, #21416	; 0x53a8
    f318:	e3400001 	movt	r0, #1
    f31c:	e300210a 	movw	r2, #266	; 0x10a
    f320:	eb000b9e 	bl	121a0 <assertion_failed>
    f324:	e3051340 	movw	r1, #21312	; 0x5340
    f328:	e3401001 	movt	r1, #1
    f32c:	e30503b8 	movw	r0, #21432	; 0x53b8
    f330:	e3400001 	movt	r0, #1
    f334:	e300210d 	movw	r2, #269	; 0x10d
    f338:	eb000b98 	bl	121a0 <assertion_failed>

0000f33c <CTimer::GetUniversalTime() const>:
    f33c:	e5902014 	ldr	r2, [r0, #20]
    f340:	e3a0303c 	mov	r3, #60	; 0x3c
    f344:	e590000c 	ldr	r0, [r0, #12]
    f348:	e0030293 	mul	r3, r3, r2
    f34c:	e1530000 	cmp	r3, r0
    f350:	d0400003 	suble	r0, r0, r3
    f354:	c3a00000 	movgt	r0, #0
    f358:	e12fff1e 	bx	lr

0000f35c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    f35c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f360:	e1a04000 	mov	r4, r0
    f364:	e5900010 	ldr	r0, [r0, #16]
    f368:	e1a06001 	mov	r6, r1
    f36c:	e1a07002 	mov	r7, r2
    f370:	e3500000 	cmp	r0, #0
    f374:	1a000019 	bne	f3e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    f378:	e594500c 	ldr	r5, [r4, #12]
    f37c:	e5948004 	ldr	r8, [r4, #4]
    f380:	e5942014 	ldr	r2, [r4, #20]
    f384:	e3a0303c 	mov	r3, #60	; 0x3c
    f388:	e0030293 	mul	r3, r3, r2
    f38c:	e1530005 	cmp	r3, r5
    f390:	ca000010 	bgt	f3d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    f394:	e3560000 	cmp	r6, #0
    f398:	0a00001e 	beq	f418 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    f39c:	e3570000 	cmp	r7, #0
    f3a0:	e0453003 	sub	r3, r5, r3
    f3a4:	e5863000 	str	r3, [r6]
    f3a8:	0a000014 	beq	f400 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    f3ac:	e308451f 	movw	r4, #34079	; 0x851f
    f3b0:	e34541eb 	movt	r4, #20971	; 0x51eb
    f3b4:	e3a01064 	mov	r1, #100	; 0x64
    f3b8:	e3023710 	movw	r3, #10000	; 0x2710
    f3bc:	e3a00001 	mov	r0, #1
    f3c0:	e0854498 	umull	r4, r5, r8, r4
    f3c4:	e1a022a5 	lsr	r2, r5, #5
    f3c8:	e0688291 	mls	r8, r1, r2, r8
    f3cc:	e0080893 	mul	r8, r3, r8
    f3d0:	e5878000 	str	r8, [r7]
    f3d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f3d8:	e3a00000 	mov	r0, #0
    f3dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f3e0:	eb00099a 	bl	11a50 <EnterCritical>
    f3e4:	e5943010 	ldr	r3, [r4, #16]
    f3e8:	e594500c 	ldr	r5, [r4, #12]
    f3ec:	e3530000 	cmp	r3, #0
    f3f0:	e5948004 	ldr	r8, [r4, #4]
    f3f4:	0affffe1 	beq	f380 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f3f8:	eb0009c1 	bl	11b04 <LeaveCritical>
    f3fc:	eaffffdf 	b	f380 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f400:	e3051340 	movw	r1, #21312	; 0x5340
    f404:	e3401001 	movt	r1, #1
    f408:	e30503b8 	movw	r0, #21432	; 0x53b8
    f40c:	e3400001 	movt	r0, #1
    f410:	e3002132 	movw	r2, #306	; 0x132
    f414:	eb000b61 	bl	121a0 <assertion_failed>
    f418:	e3051340 	movw	r1, #21312	; 0x5340
    f41c:	e3401001 	movt	r1, #1
    f420:	e30503a8 	movw	r0, #21416	; 0x53a8
    f424:	e3400001 	movt	r0, #1
    f428:	e300212f 	movw	r2, #303	; 0x12f
    f42c:	eb000b5b 	bl	121a0 <assertion_failed>

0000f430 <CTimer::GetTimeString()>:
    f430:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f434:	e1a04000 	mov	r4, r0
    f438:	e5900010 	ldr	r0, [r0, #16]
    f43c:	e24dd014 	sub	sp, sp, #20
    f440:	e3500000 	cmp	r0, #0
    f444:	1a00006c 	bne	f5fc <CTimer::GetTimeString()+0x1cc>
    f448:	e594500c 	ldr	r5, [r4, #12]
    f44c:	e5949004 	ldr	r9, [r4, #4]
    f450:	e1950009 	orrs	r0, r5, r9
    f454:	0a000051 	beq	f5a0 <CTimer::GetTimeString()+0x170>
    f458:	e3086889 	movw	r6, #34953	; 0x8889
    f45c:	e3486888 	movt	r6, #34952	; 0x8888
    f460:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    f464:	e34971a2 	movt	r7, #37282	; 0x91a2
    f468:	e3044507 	movw	r4, #17671	; 0x4507
    f46c:	e34c422e 	movt	r4, #49710	; 0xc22e
    f470:	e0813596 	umull	r3, r1, r6, r5
    f474:	e3a0003c 	mov	r0, #60	; 0x3c
    f478:	e0832695 	umull	r2, r3, r5, r6
    f47c:	e308c51f 	movw	ip, #34079	; 0x851f
    f480:	e345c1eb 	movt	ip, #20971	; 0x51eb
    f484:	e1a012a1 	lsr	r1, r1, #5
    f488:	e1a082a3 	lsr	r8, r3, #5
    f48c:	e0873597 	umull	r3, r7, r7, r5
    f490:	e3a0a064 	mov	sl, #100	; 0x64
    f494:	e0843594 	umull	r3, r4, r4, r5
    f498:	e3a0ee19 	mov	lr, #400	; 0x190
    f49c:	e0863196 	umull	r3, r6, r6, r1
    f4a0:	e1a075a7 	lsr	r7, r7, #11
    f4a4:	e0685890 	mls	r8, r0, r8, r5
    f4a8:	e1a04824 	lsr	r4, r4, #16
    f4ac:	e1a062a6 	lsr	r6, r6, #5
    f4b0:	e30057b2 	movw	r5, #1970	; 0x7b2
    f4b4:	e300216d 	movw	r2, #365	; 0x16d
    f4b8:	e300316e 	movw	r3, #366	; 0x16e
    f4bc:	e0661690 	mls	r6, r0, r6, r1
    f4c0:	ea000001 	b	f4cc <CTimer::GetTimeString()+0x9c>
    f4c4:	e0444000 	sub	r4, r4, r0
    f4c8:	e2855001 	add	r5, r5, #1
    f4cc:	e0810c95 	umull	r0, r1, r5, ip
    f4d0:	e1a002a1 	lsr	r0, r1, #5
    f4d4:	e1a013a1 	lsr	r1, r1, #7
    f4d8:	e060509a 	mls	r0, sl, r0, r5
    f4dc:	e061519e 	mls	r1, lr, r1, r5
    f4e0:	e3500000 	cmp	r0, #0
    f4e4:	e16f1f11 	clz	r1, r1
    f4e8:	01a012a1 	lsreq	r1, r1, #5
    f4ec:	0a000002 	beq	f4fc <CTimer::GetTimeString()+0xcc>
    f4f0:	e3150003 	tst	r5, #3
    f4f4:	03a01001 	moveq	r1, #1
    f4f8:	13a01000 	movne	r1, #0
    f4fc:	e3510000 	cmp	r1, #0
    f500:	01a00002 	moveq	r0, r2
    f504:	11a00003 	movne	r0, r3
    f508:	e1540000 	cmp	r4, r0
    f50c:	2affffec 	bcs	f4c4 <CTimer::GetTimeString()+0x94>
    f510:	e3050308 	movw	r0, #21256	; 0x5308
    f514:	e3400001 	movt	r0, #1
    f518:	e3a0a000 	mov	sl, #0
    f51c:	ea000001 	b	f528 <CTimer::GetTimeString()+0xf8>
    f520:	e0444003 	sub	r4, r4, r3
    f524:	e28aa001 	add	sl, sl, #1
    f528:	e35a0001 	cmp	sl, #1
    f52c:	13a02000 	movne	r2, #0
    f530:	02012001 	andeq	r2, r1, #1
    f534:	e3a0301d 	mov	r3, #29
    f538:	e3520000 	cmp	r2, #0
    f53c:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    f540:	e1540003 	cmp	r4, r3
    f544:	2afffff5 	bcs	f520 <CTimer::GetTimeString()+0xf0>
    f548:	e308251f 	movw	r2, #34079	; 0x851f
    f54c:	e34521eb 	movt	r2, #20971	; 0x51eb
    f550:	e3a01064 	mov	r1, #100	; 0x64
    f554:	e3a00010 	mov	r0, #16
    f558:	e0832299 	umull	r2, r3, r9, r2
    f55c:	e1a0b2a3 	lsr	fp, r3, #5
    f560:	e06b9b91 	mls	fp, r1, fp, r9
    f564:	eb00057e 	bl	10b64 <operator new(unsigned int)>
    f568:	e1a09000 	mov	r9, r0
    f56c:	ebfff90e 	bl	d9ac <CString::CString()>
    f570:	e30037b7 	movw	r3, #1975	; 0x7b7
    f574:	e1550003 	cmp	r5, r3
    f578:	8a00000a 	bhi	f5a8 <CTimer::GetTimeString()+0x178>
    f57c:	e1a00009 	mov	r0, r9
    f580:	e58db004 	str	fp, [sp, #4]
    f584:	e1a03006 	mov	r3, r6
    f588:	e58d8000 	str	r8, [sp]
    f58c:	e1a02007 	mov	r2, r7
    f590:	e30513e8 	movw	r1, #21480	; 0x53e8
    f594:	e3401001 	movt	r1, #1
    f598:	ebfffe32 	bl	ee68 <CString::Format(char const*, ...)>
    f59c:	e1a00009 	mov	r0, r9
    f5a0:	e28dd014 	add	sp, sp, #20
    f5a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5a8:	e30a0aab 	movw	r0, #43691	; 0xaaab
    f5ac:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    f5b0:	e3a0c018 	mov	ip, #24
    f5b4:	e30721d0 	movw	r2, #29136	; 0x71d0
    f5b8:	e3402001 	movt	r2, #1
    f5bc:	e0810097 	umull	r0, r1, r7, r0
    f5c0:	e58db00c 	str	fp, [sp, #12]
    f5c4:	e58d8008 	str	r8, [sp, #8]
    f5c8:	e2843001 	add	r3, r4, #1
    f5cc:	e1a00221 	lsr	r0, r1, #4
    f5d0:	e30513cc 	movw	r1, #21452	; 0x53cc
    f5d4:	e3401001 	movt	r1, #1
    f5d8:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    f5dc:	e067709c 	mls	r7, ip, r0, r7
    f5e0:	e58d6004 	str	r6, [sp, #4]
    f5e4:	e1a00009 	mov	r0, r9
    f5e8:	e58d7000 	str	r7, [sp]
    f5ec:	ebfffe1d 	bl	ee68 <CString::Format(char const*, ...)>
    f5f0:	e1a00009 	mov	r0, r9
    f5f4:	e28dd014 	add	sp, sp, #20
    f5f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5fc:	eb000913 	bl	11a50 <EnterCritical>
    f600:	e5943010 	ldr	r3, [r4, #16]
    f604:	e594500c 	ldr	r5, [r4, #12]
    f608:	e3530000 	cmp	r3, #0
    f60c:	e5949004 	ldr	r9, [r4, #4]
    f610:	0affff8e 	beq	f450 <CTimer::GetTimeString()+0x20>
    f614:	eb00093a 	bl	11b04 <LeaveCritical>
    f618:	eaffff8c 	b	f450 <CTimer::GetTimeString()+0x20>

0000f61c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    f61c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f620:	e1a09000 	mov	r9, r0
    f624:	e1a04002 	mov	r4, r2
    f628:	e3a00014 	mov	r0, #20
    f62c:	e1a05001 	mov	r5, r1
    f630:	e1a08003 	mov	r8, r3
    f634:	eb00054a 	bl	10b64 <operator new(unsigned int)>
    f638:	e3540000 	cmp	r4, #0
    f63c:	e5996004 	ldr	r6, [r9, #4]
    f640:	e0866005 	add	r6, r6, r5
    f644:	0a000039 	beq	f730 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    f648:	e1a07000 	mov	r7, r0
    f64c:	e599001c 	ldr	r0, [r9, #28]
    f650:	e59d3020 	ldr	r3, [sp, #32]
    f654:	e3042d43 	movw	r2, #19779	; 0x4d43
    f658:	e3442b54 	movt	r2, #19284	; 0x4b54
    f65c:	e3500000 	cmp	r0, #0
    f660:	e9870150 	stmib	r7, {r4, r6, r8}
    f664:	e5873010 	str	r3, [r7, #16]
    f668:	e5872000 	str	r2, [r7]
    f66c:	1a000025 	bne	f708 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
    f670:	e2895018 	add	r5, r9, #24
    f674:	e1a00005 	mov	r0, r5
    f678:	eb0011f1 	bl	13e44 <CPtrList::GetFirst()>
    f67c:	e2504000 	subs	r4, r0, #0
    f680:	0a000030 	beq	f748 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    f684:	e3048d43 	movw	r8, #19779	; 0x4d43
    f688:	e3448b54 	movt	r8, #19284	; 0x4b54
    f68c:	e1a01004 	mov	r1, r4
    f690:	e1a00005 	mov	r0, r5
    f694:	eb001202 	bl	13ea4 <CPtrList::GetPtr(TPtrListElement*)>
    f698:	e3500000 	cmp	r0, #0
    f69c:	0a00000d 	beq	f6d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
    f6a0:	e5903000 	ldr	r3, [r0]
    f6a4:	e1530008 	cmp	r3, r8
    f6a8:	1a000010 	bne	f6f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    f6ac:	e5903008 	ldr	r3, [r0, #8]
    f6b0:	e1a01004 	mov	r1, r4
    f6b4:	e1a00005 	mov	r0, r5
    f6b8:	e0433006 	sub	r3, r3, r6
    f6bc:	e3530000 	cmp	r3, #0
    f6c0:	ca000012 	bgt	f710 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
    f6c4:	eb0011e0 	bl	13e4c <CPtrList::GetNext(TPtrListElement*)>
    f6c8:	e3500000 	cmp	r0, #0
    f6cc:	0a00001d 	beq	f748 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    f6d0:	e1a04000 	mov	r4, r0
    f6d4:	eaffffec 	b	f68c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
    f6d8:	e3051340 	movw	r1, #21312	; 0x5340
    f6dc:	e3401001 	movt	r1, #1
    f6e0:	e30503fc 	movw	r0, #21500	; 0x53fc
    f6e4:	e3400001 	movt	r0, #1
    f6e8:	e3002199 	movw	r2, #409	; 0x199
    f6ec:	eb000aab 	bl	121a0 <assertion_failed>
    f6f0:	e3051340 	movw	r1, #21312	; 0x5340
    f6f4:	e3401001 	movt	r1, #1
    f6f8:	e305040c 	movw	r0, #21516	; 0x540c
    f6fc:	e3400001 	movt	r0, #1
    f700:	e300219a 	movw	r2, #410	; 0x19a
    f704:	eb000aa5 	bl	121a0 <assertion_failed>
    f708:	eb0008d0 	bl	11a50 <EnterCritical>
    f70c:	eaffffd7 	b	f670 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x54>
    f710:	e1a02007 	mov	r2, r7
    f714:	eb0011f8 	bl	13efc <CPtrList::InsertBefore(TPtrListElement*, void*)>
    f718:	e599301c 	ldr	r3, [r9, #28]
    f71c:	e3530000 	cmp	r3, #0
    f720:	0a000000 	beq	f728 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    f724:	eb0008f6 	bl	11b04 <LeaveCritical>
    f728:	e1a00007 	mov	r0, r7
    f72c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f730:	e3051340 	movw	r1, #21312	; 0x5340
    f734:	e3401001 	movt	r1, #1
    f738:	e305085c 	movw	r0, #22620	; 0x585c
    f73c:	e3400001 	movt	r0, #1
    f740:	e3002189 	movw	r2, #393	; 0x189
    f744:	eb000a95 	bl	121a0 <assertion_failed>
    f748:	e1a01004 	mov	r1, r4
    f74c:	e1a00005 	mov	r0, r5
    f750:	e1a02007 	mov	r2, r7
    f754:	eb001225 	bl	13ff0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    f758:	eaffffee 	b	f718 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>

0000f75c <CTimer::CancelKernelTimer(unsigned int)>:
    f75c:	e92d4070 	push	{r4, r5, r6, lr}
    f760:	e2514000 	subs	r4, r1, #0
    f764:	0a00001c 	beq	f7dc <CTimer::CancelKernelTimer(unsigned int)+0x80>
    f768:	e1a05000 	mov	r5, r0
    f76c:	e590001c 	ldr	r0, [r0, #28]
    f770:	e3500000 	cmp	r0, #0
    f774:	1a000016 	bne	f7d4 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    f778:	e2856018 	add	r6, r5, #24
    f77c:	e1a01004 	mov	r1, r4
    f780:	e1a00006 	mov	r0, r6
    f784:	eb0012a2 	bl	14214 <CPtrList::Find(void*)>
    f788:	e2501000 	subs	r1, r0, #0
    f78c:	0a00000b 	beq	f7c0 <CTimer::CancelKernelTimer(unsigned int)+0x64>
    f790:	e5942000 	ldr	r2, [r4]
    f794:	e3043d43 	movw	r3, #19779	; 0x4d43
    f798:	e3443b54 	movt	r3, #19284	; 0x4b54
    f79c:	e1520003 	cmp	r2, r3
    f7a0:	1a000013 	bne	f7f4 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    f7a4:	e1a00006 	mov	r0, r6
    f7a8:	eb00124c 	bl	140e0 <CPtrList::Remove(TPtrListElement*)>
    f7ac:	e3a03000 	mov	r3, #0
    f7b0:	e5843000 	str	r3, [r4]
    f7b4:	e1a00004 	mov	r0, r4
    f7b8:	e3a01014 	mov	r1, #20
    f7bc:	eb0004f6 	bl	10b9c <operator delete(void*, unsigned int)>
    f7c0:	e595301c 	ldr	r3, [r5, #28]
    f7c4:	e3530000 	cmp	r3, #0
    f7c8:	08bd8070 	popeq	{r4, r5, r6, pc}
    f7cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    f7d0:	ea0008cb 	b	11b04 <LeaveCritical>
    f7d4:	eb00089d 	bl	11a50 <EnterCritical>
    f7d8:	eaffffe6 	b	f778 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    f7dc:	e3051340 	movw	r1, #21312	; 0x5340
    f7e0:	e3401001 	movt	r1, #1
    f7e4:	e3050374 	movw	r0, #21364	; 0x5374
    f7e8:	e3400001 	movt	r0, #1
    f7ec:	e30021b6 	movw	r2, #438	; 0x1b6
    f7f0:	eb000a6a 	bl	121a0 <assertion_failed>
    f7f4:	e3051340 	movw	r1, #21312	; 0x5340
    f7f8:	e3401001 	movt	r1, #1
    f7fc:	e3050380 	movw	r0, #21376	; 0x5380
    f800:	e3400001 	movt	r0, #1
    f804:	e30021bd 	movw	r2, #445	; 0x1bd
    f808:	eb000a64 	bl	121a0 <assertion_failed>

0000f80c <CTimer::PollKernelTimers()>:
    f80c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f810:	e1a06000 	mov	r6, r0
    f814:	e590001c 	ldr	r0, [r0, #28]
    f818:	e3500000 	cmp	r0, #0
    f81c:	1a00004b 	bne	f950 <CTimer::PollKernelTimers()+0x144>
    f820:	e2867018 	add	r7, r6, #24
    f824:	e1a00007 	mov	r0, r7
    f828:	eb001185 	bl	13e44 <CPtrList::GetFirst()>
    f82c:	e2505000 	subs	r5, r0, #0
    f830:	13a09000 	movne	r9, #0
    f834:	13048d43 	movwne	r8, #19779	; 0x4d43
    f838:	13448b54 	movtne	r8, #19284	; 0x4b54
    f83c:	0a000026 	beq	f8dc <CTimer::PollKernelTimers()+0xd0>
    f840:	e1a01005 	mov	r1, r5
    f844:	e1a00007 	mov	r0, r7
    f848:	eb001195 	bl	13ea4 <CPtrList::GetPtr(TPtrListElement*)>
    f84c:	e2504000 	subs	r4, r0, #0
    f850:	0a000032 	beq	f920 <CTimer::PollKernelTimers()+0x114>
    f854:	e5943000 	ldr	r3, [r4]
    f858:	e1530008 	cmp	r3, r8
    f85c:	1a000035 	bne	f938 <CTimer::PollKernelTimers()+0x12c>
    f860:	e5962004 	ldr	r2, [r6, #4]
    f864:	e5943008 	ldr	r3, [r4, #8]
    f868:	e0433002 	sub	r3, r3, r2
    f86c:	e3530000 	cmp	r3, #0
    f870:	ca000019 	bgt	f8dc <CTimer::PollKernelTimers()+0xd0>
    f874:	e1a01005 	mov	r1, r5
    f878:	e1a00007 	mov	r0, r7
    f87c:	eb001172 	bl	13e4c <CPtrList::GetNext(TPtrListElement*)>
    f880:	e1a01005 	mov	r1, r5
    f884:	e1a0a000 	mov	sl, r0
    f888:	e1a00007 	mov	r0, r7
    f88c:	eb001213 	bl	140e0 <CPtrList::Remove(TPtrListElement*)>
    f890:	e596301c 	ldr	r3, [r6, #28]
    f894:	e3530000 	cmp	r3, #0
    f898:	1a000014 	bne	f8f0 <CTimer::PollKernelTimers()+0xe4>
    f89c:	e5943004 	ldr	r3, [r4, #4]
    f8a0:	e3530000 	cmp	r3, #0
    f8a4:	0a000015 	beq	f900 <CTimer::PollKernelTimers()+0xf4>
    f8a8:	e5942010 	ldr	r2, [r4, #16]
    f8ac:	e1a00004 	mov	r0, r4
    f8b0:	e594100c 	ldr	r1, [r4, #12]
    f8b4:	e12fff33 	blx	r3
    f8b8:	e1a00004 	mov	r0, r4
    f8bc:	e5849000 	str	r9, [r4]
    f8c0:	e3a01014 	mov	r1, #20
    f8c4:	eb0004b4 	bl	10b9c <operator delete(void*, unsigned int)>
    f8c8:	e596001c 	ldr	r0, [r6, #28]
    f8cc:	e3500000 	cmp	r0, #0
    f8d0:	1a000010 	bne	f918 <CTimer::PollKernelTimers()+0x10c>
    f8d4:	e25a5000 	subs	r5, sl, #0
    f8d8:	1affffd8 	bne	f840 <CTimer::PollKernelTimers()+0x34>
    f8dc:	e596301c 	ldr	r3, [r6, #28]
    f8e0:	e3530000 	cmp	r3, #0
    f8e4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f8e8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    f8ec:	ea000884 	b	11b04 <LeaveCritical>
    f8f0:	eb000883 	bl	11b04 <LeaveCritical>
    f8f4:	e5943004 	ldr	r3, [r4, #4]
    f8f8:	e3530000 	cmp	r3, #0
    f8fc:	1affffe9 	bne	f8a8 <CTimer::PollKernelTimers()+0x9c>
    f900:	e3051340 	movw	r1, #21312	; 0x5340
    f904:	e3401001 	movt	r1, #1
    f908:	e305085c 	movw	r0, #22620	; 0x585c
    f90c:	e3400001 	movt	r0, #1
    f910:	e30021e1 	movw	r2, #481	; 0x1e1
    f914:	eb000a21 	bl	121a0 <assertion_failed>
    f918:	eb00084c 	bl	11a50 <EnterCritical>
    f91c:	eaffffec 	b	f8d4 <CTimer::PollKernelTimers()+0xc8>
    f920:	e3051340 	movw	r1, #21312	; 0x5340
    f924:	e3401001 	movt	r1, #1
    f928:	e3050374 	movw	r0, #21364	; 0x5374
    f92c:	e3400001 	movt	r0, #1
    f930:	e30021d2 	movw	r2, #466	; 0x1d2
    f934:	eb000a19 	bl	121a0 <assertion_failed>
    f938:	e3051340 	movw	r1, #21312	; 0x5340
    f93c:	e3401001 	movt	r1, #1
    f940:	e3050380 	movw	r0, #21376	; 0x5380
    f944:	e3400001 	movt	r0, #1
    f948:	e30021d3 	movw	r2, #467	; 0x1d3
    f94c:	eb000a13 	bl	121a0 <assertion_failed>
    f950:	eb00083e 	bl	11a50 <EnterCritical>
    f954:	eaffffb1 	b	f820 <CTimer::PollKernelTimers()+0x14>

0000f958 <CTimer::InterruptHandler()>:
    f958:	e92d4070 	push	{r4, r5, r6, lr}
    f95c:	e1a04000 	mov	r4, r0
    f960:	ec5ecf2e 	mrrc	15, 2, ip, lr, cr14
    f964:	e3a02000 	mov	r2, #0
    f968:	e3020710 	movw	r0, #10000	; 0x2710
    f96c:	e182200c 	orr	r2, r2, ip
    f970:	e3a01000 	mov	r1, #0
    f974:	e0922000 	adds	r2, r2, r0
    f978:	e0ae3001 	adc	r3, lr, r1
    f97c:	e1a00002 	mov	r0, r2
    f980:	e3a01000 	mov	r1, #0
    f984:	e1a02003 	mov	r2, r3
    f988:	e3a03000 	mov	r3, #0
    f98c:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    f990:	e5940010 	ldr	r0, [r4, #16]
    f994:	e3500000 	cmp	r0, #0
    f998:	1a000018 	bne	fa00 <CTimer::InterruptHandler()+0xa8>
    f99c:	e5943004 	ldr	r3, [r4, #4]
    f9a0:	e308051f 	movw	r0, #34079	; 0x851f
    f9a4:	e34501eb 	movt	r0, #20971	; 0x51eb
    f9a8:	e2833001 	add	r3, r3, #1
    f9ac:	e3a0c064 	mov	ip, #100	; 0x64
    f9b0:	e5843004 	str	r3, [r4, #4]
    f9b4:	e0810093 	umull	r0, r1, r3, r0
    f9b8:	e1a022a1 	lsr	r2, r1, #5
    f9bc:	e062329c 	mls	r2, ip, r2, r3
    f9c0:	e3520000 	cmp	r2, #0
    f9c4:	0a00001a 	beq	fa34 <CTimer::InterruptHandler()+0xdc>
    f9c8:	e1a00004 	mov	r0, r4
    f9cc:	ebffff8e 	bl	f80c <CTimer::PollKernelTimers()>
    f9d0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f9d4:	e3530000 	cmp	r3, #0
    f9d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    f9dc:	e284602c 	add	r6, r4, #44	; 0x2c
    f9e0:	e3a05000 	mov	r5, #0
    f9e4:	e4963004 	ldr	r3, [r6], #4
    f9e8:	e2855001 	add	r5, r5, #1
    f9ec:	e12fff33 	blx	r3
    f9f0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f9f4:	e1530005 	cmp	r3, r5
    f9f8:	8afffff9 	bhi	f9e4 <CTimer::InterruptHandler()+0x8c>
    f9fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa00:	eb000812 	bl	11a50 <EnterCritical>
    fa04:	e5943004 	ldr	r3, [r4, #4]
    fa08:	e308051f 	movw	r0, #34079	; 0x851f
    fa0c:	e34501eb 	movt	r0, #20971	; 0x51eb
    fa10:	e2833001 	add	r3, r3, #1
    fa14:	e3a0c064 	mov	ip, #100	; 0x64
    fa18:	e5843004 	str	r3, [r4, #4]
    fa1c:	e5942010 	ldr	r2, [r4, #16]
    fa20:	e0810093 	umull	r0, r1, r3, r0
    fa24:	e1a012a1 	lsr	r1, r1, #5
    fa28:	e063319c 	mls	r3, ip, r1, r3
    fa2c:	e3530000 	cmp	r3, #0
    fa30:	1a000005 	bne	fa4c <CTimer::InterruptHandler()+0xf4>
    fa34:	e5943008 	ldr	r3, [r4, #8]
    fa38:	e2833001 	add	r3, r3, #1
    fa3c:	e5843008 	str	r3, [r4, #8]
    fa40:	e594300c 	ldr	r3, [r4, #12]
    fa44:	e2833001 	add	r3, r3, #1
    fa48:	e584300c 	str	r3, [r4, #12]
    fa4c:	e3520000 	cmp	r2, #0
    fa50:	0affffdc 	beq	f9c8 <CTimer::InterruptHandler()+0x70>
    fa54:	eb00082a 	bl	11b04 <LeaveCritical>
    fa58:	eaffffda 	b	f9c8 <CTimer::InterruptHandler()+0x70>

0000fa5c <CTimer::InterruptHandler(void*)>:
    fa5c:	e3500000 	cmp	r0, #0
    fa60:	0a000000 	beq	fa68 <CTimer::InterruptHandler(void*)+0xc>
    fa64:	eaffffbb 	b	f958 <CTimer::InterruptHandler()>
    fa68:	e3051340 	movw	r1, #21312	; 0x5340
    fa6c:	e3401001 	movt	r1, #1
    fa70:	e3050434 	movw	r0, #21556	; 0x5434
    fa74:	e3400001 	movt	r0, #1
    fa78:	e92d4010 	push	{r4, lr}
    fa7c:	e3a02f8a 	mov	r2, #552	; 0x228
    fa80:	eb0009c6 	bl	121a0 <assertion_failed>

0000fa84 <CTimer::TuneMsDelay()>:
    fa84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fa88:	e1a06000 	mov	r6, r0
    fa8c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    fa90:	e24dd00c 	sub	sp, sp, #12
    fa94:	e3025710 	movw	r5, #10000	; 0x2710
    fa98:	e5963020 	ldr	r3, [r6, #32]
    fa9c:	e308451f 	movw	r4, #34079	; 0x851f
    faa0:	e34541eb 	movt	r4, #20971	; 0x51eb
    faa4:	e5967004 	ldr	r7, [r6, #4]
    faa8:	e0000390 	mul	r0, r0, r3
    faac:	eb000c41 	bl	12bb8 <DelayLoop>
    fab0:	e5962004 	ldr	r2, [r6, #4]
    fab4:	e5963020 	ldr	r3, [r6, #32]
    fab8:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    fabc:	e3411062 	movt	r1, #4194	; 0x1062
    fac0:	e0422007 	sub	r2, r2, r7
    fac4:	e735f215 	udiv	r5, r5, r2
    fac8:	e0030593 	mul	r3, r3, r5
    facc:	e0832394 	umull	r2, r3, r4, r3
    fad0:	e1a032a3 	lsr	r3, r3, #5
    fad4:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    fad8:	e5863020 	str	r3, [r6, #32]
    fadc:	e0832291 	umull	r2, r3, r1, r2
    fae0:	e1a03323 	lsr	r3, r3, #6
    fae4:	e5863024 	str	r3, [r6, #36]	; 0x24
    fae8:	ebffea98 	bl	a550 <CLogger::Get()>
    faec:	e0832495 	umull	r2, r3, r5, r4
    faf0:	e3a0c064 	mov	ip, #100	; 0x64
    faf4:	e0841594 	umull	r1, r4, r4, r5
    faf8:	e1a012a3 	lsr	r1, r3, #5
    fafc:	e3a02003 	mov	r2, #3
    fb00:	e1a042a4 	lsr	r4, r4, #5
    fb04:	e3053440 	movw	r3, #21568	; 0x5440
    fb08:	e3403001 	movt	r3, #1
    fb0c:	e065519c 	mls	r5, ip, r1, r5
    fb10:	e58d4000 	str	r4, [sp]
    fb14:	e59f100c 	ldr	r1, [pc, #12]	; fb28 <CTimer::TuneMsDelay()+0xa4>
    fb18:	e58d5004 	str	r5, [sp, #4]
    fb1c:	ebffe9c8 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb20:	e28dd00c 	add	sp, sp, #12
    fb24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fb28:	00015338 	.word	0x00015338

0000fb2c <CTimer::Initialize()>:
    fb2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fb30:	e1a06000 	mov	r6, r0
    fb34:	e5900000 	ldr	r0, [r0]
    fb38:	e24dd00c 	sub	sp, sp, #12
    fb3c:	e3500000 	cmp	r0, #0
    fb40:	0a000028 	beq	fbe8 <CTimer::Initialize()+0xbc>
    fb44:	e1a03006 	mov	r3, r6
    fb48:	e3a01049 	mov	r1, #73	; 0x49
    fb4c:	e30f2a5c 	movw	r2, #64092	; 0xfa5c
    fb50:	e3402000 	movt	r2, #0
    fb54:	eb0008c3 	bl	11e68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    fb58:	ec51cf0e 	mrrc	15, 0, ip, r1, cr14
    fb5c:	e3a04000 	mov	r4, #0
    fb60:	e3022710 	movw	r2, #10000	; 0x2710
    fb64:	e184000c 	orr	r0, r4, ip
    fb68:	e3a03000 	mov	r3, #0
    fb6c:	e0900002 	adds	r0, r0, r2
    fb70:	e0a11003 	adc	r1, r1, r3
    fb74:	e1a02000 	mov	r2, r0
    fb78:	e3a03000 	mov	r3, #0
    fb7c:	e1a00001 	mov	r0, r1
    fb80:	e3a01000 	mov	r1, #0
    fb84:	ec402f2e 	mcrr	15, 2, r2, r0, cr14
    fb88:	e3a03001 	mov	r3, #1
    fb8c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    fb90:	e1a00006 	mov	r0, r6
    fb94:	ebffffba 	bl	fa84 <CTimer::TuneMsDelay()>
    fb98:	ee1e6f10 	mrc	15, 0, r6, cr14, cr0, {0}
    fb9c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    fba0:	e3a02b3e 	mov	r2, #63488	; 0xf800
    fba4:	e3402124 	movt	r2, #292	; 0x124
    fba8:	e30a3aab 	movw	r3, #43691	; 0xaaab
    fbac:	e34036aa 	movt	r3, #1706	; 0x6aa
    fbb0:	e5917008 	ldr	r7, [r1, #8]
    fbb4:	e1570003 	cmp	r7, r3
    fbb8:	01560002 	cmpeq	r6, r2
    fbbc:	0a000006 	beq	fbdc <CTimer::Initialize()+0xb0>
    fbc0:	ebffea62 	bl	a550 <CLogger::Get()>
    fbc4:	e3053458 	movw	r3, #21592	; 0x5458
    fbc8:	e3403001 	movt	r3, #1
    fbcc:	e88d00c0 	stm	sp, {r6, r7}
    fbd0:	e1a02004 	mov	r2, r4
    fbd4:	e59f1024 	ldr	r1, [pc, #36]	; fc00 <CTimer::Initialize()+0xd4>
    fbd8:	ebffe999 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fbdc:	e3a00001 	mov	r0, #1
    fbe0:	e28dd00c 	add	sp, sp, #12
    fbe4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fbe8:	e3051340 	movw	r1, #21312	; 0x5340
    fbec:	e3401001 	movt	r1, #1
    fbf0:	e305035c 	movw	r0, #21340	; 0x535c
    fbf4:	e3400001 	movt	r0, #1
    fbf8:	e3a02064 	mov	r2, #100	; 0x64
    fbfc:	eb000967 	bl	121a0 <assertion_failed>
    fc00:	00015338 	.word	0x00015338

0000fc04 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
    fc04:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    fc08:	e92d4010 	push	{r4, lr}
    fc0c:	e3530000 	cmp	r3, #0
    fc10:	1a000008 	bne	fc38 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
    fc14:	e3510000 	cmp	r1, #0
    fc18:	e5801028 	str	r1, [r0, #40]	; 0x28
    fc1c:	18bd8010 	popne	{r4, pc}
    fc20:	e3051340 	movw	r1, #21312	; 0x5340
    fc24:	e3401001 	movt	r1, #1
    fc28:	e30504b0 	movw	r0, #21680	; 0x54b0
    fc2c:	e3400001 	movt	r0, #1
    fc30:	e3a02d09 	mov	r2, #576	; 0x240
    fc34:	eb000959 	bl	121a0 <assertion_failed>
    fc38:	e3051340 	movw	r1, #21312	; 0x5340
    fc3c:	e3401001 	movt	r1, #1
    fc40:	e3050494 	movw	r0, #21652	; 0x5494
    fc44:	e3400001 	movt	r0, #1
    fc48:	e300223e 	movw	r2, #574	; 0x23e
    fc4c:	eb000953 	bl	121a0 <assertion_failed>

0000fc50 <CTimer::RegisterPeriodicHandler(void (*)())>:
    fc50:	e3510000 	cmp	r1, #0
    fc54:	e92d4010 	push	{r4, lr}
    fc58:	0a00000a 	beq	fc88 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
    fc5c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    fc60:	e3530003 	cmp	r3, #3
    fc64:	8a00000d 	bhi	fca0 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    fc68:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    fc6c:	e0803103 	add	r3, r0, r3, lsl #2
    fc70:	e583102c 	str	r1, [r3, #44]	; 0x2c
    fc74:	f57ff04f 	dsb	sy
    fc78:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    fc7c:	e2833001 	add	r3, r3, #1
    fc80:	e580303c 	str	r3, [r0, #60]	; 0x3c
    fc84:	e8bd8010 	pop	{r4, pc}
    fc88:	e3051340 	movw	r1, #21312	; 0x5340
    fc8c:	e3401001 	movt	r1, #1
    fc90:	e305085c 	movw	r0, #22620	; 0x585c
    fc94:	e3400001 	movt	r0, #1
    fc98:	e3002245 	movw	r2, #581	; 0x245
    fc9c:	eb00093f 	bl	121a0 <assertion_failed>
    fca0:	e3051340 	movw	r1, #21312	; 0x5340
    fca4:	e3401001 	movt	r1, #1
    fca8:	e30504cc 	movw	r0, #21708	; 0x54cc
    fcac:	e3400001 	movt	r0, #1
    fcb0:	e3002247 	movw	r2, #583	; 0x247
    fcb4:	eb000939 	bl	121a0 <assertion_failed>

0000fcb8 <CTimer::SimpleMsDelay(unsigned int)>:
    fcb8:	e3500000 	cmp	r0, #0
    fcbc:	012fff1e 	bxeq	lr
    fcc0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    fcc4:	e0000093 	mul	r0, r3, r0
    fcc8:	e3500000 	cmp	r0, #0
    fccc:	012fff1e 	bxeq	lr
    fcd0:	eafffcc6 	b	eff0 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

0000fcd4 <CTimer::SimpleusDelay(unsigned int)>:
    fcd4:	e3500000 	cmp	r0, #0
    fcd8:	012fff1e 	bxeq	lr
    fcdc:	eafffcc3 	b	eff0 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

0000fce0 <CTimer::IsLeapYear(unsigned int)>:
    fce0:	e308251f 	movw	r2, #34079	; 0x851f
    fce4:	e34521eb 	movt	r2, #20971	; 0x51eb
    fce8:	e3a01064 	mov	r1, #100	; 0x64
    fcec:	e083c092 	umull	ip, r3, r2, r0
    fcf0:	e1a032a3 	lsr	r3, r3, #5
    fcf4:	e0630391 	mls	r3, r1, r3, r0
    fcf8:	e3530000 	cmp	r3, #0
    fcfc:	0a000003 	beq	fd10 <CTimer::IsLeapYear(unsigned int)+0x30>
    fd00:	e3100003 	tst	r0, #3
    fd04:	03a00001 	moveq	r0, #1
    fd08:	13a00000 	movne	r0, #0
    fd0c:	e12fff1e 	bx	lr
    fd10:	e0832290 	umull	r2, r3, r0, r2
    fd14:	e3a02e19 	mov	r2, #400	; 0x190
    fd18:	e1a033a3 	lsr	r3, r3, #7
    fd1c:	e0600392 	mls	r0, r2, r3, r0
    fd20:	e16f0f10 	clz	r0, r0
    fd24:	e1a002a0 	lsr	r0, r0, #5
    fd28:	e12fff1e 	bx	lr

0000fd2c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    fd2c:	e3500001 	cmp	r0, #1
    fd30:	0a000003 	beq	fd44 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    fd34:	e3053308 	movw	r3, #21256	; 0x5308
    fd38:	e3403001 	movt	r3, #1
    fd3c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    fd40:	e12fff1e 	bx	lr
    fd44:	e308251f 	movw	r2, #34079	; 0x851f
    fd48:	e34521eb 	movt	r2, #20971	; 0x51eb
    fd4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fd50:	e3a0e064 	mov	lr, #100	; 0x64
    fd54:	e0832291 	umull	r2, r3, r1, r2
    fd58:	e1a0c2a3 	lsr	ip, r3, #5
    fd5c:	e06c1c9e 	mls	ip, lr, ip, r1
    fd60:	e35c0000 	cmp	ip, #0
    fd64:	0a000008 	beq	fd8c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    fd68:	e3110003 	tst	r1, #3
    fd6c:	03a01001 	moveq	r1, #1
    fd70:	13a01000 	movne	r1, #0
    fd74:	e3510000 	cmp	r1, #0
    fd78:	13a0001d 	movne	r0, #29
    fd7c:	03053308 	movweq	r3, #21256	; 0x5308
    fd80:	03403001 	movteq	r3, #1
    fd84:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    fd88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fd8c:	e1a033a3 	lsr	r3, r3, #7
    fd90:	e3a02e19 	mov	r2, #400	; 0x190
    fd94:	e0611392 	mls	r1, r2, r3, r1
    fd98:	e16f1f11 	clz	r1, r1
    fd9c:	e1a012a1 	lsr	r1, r1, #5
    fda0:	eafffff3 	b	fd74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000fda4 <CTimer::Get()>:
    fda4:	e3073284 	movw	r3, #29316	; 0x7284
    fda8:	e3403001 	movt	r3, #1
    fdac:	e5930000 	ldr	r0, [r3]
    fdb0:	e3500000 	cmp	r0, #0
    fdb4:	0a000000 	beq	fdbc <CTimer::Get()+0x18>
    fdb8:	e12fff1e 	bx	lr
    fdbc:	e3051340 	movw	r1, #21312	; 0x5340
    fdc0:	e3401001 	movt	r1, #1
    fdc4:	e3050500 	movw	r0, #21760	; 0x5500
    fdc8:	e3400001 	movt	r0, #1
    fdcc:	e92d4010 	push	{r4, lr}
    fdd0:	e3a02fa2 	mov	r2, #648	; 0x288
    fdd4:	eb0008f1 	bl	121a0 <assertion_failed>

0000fdd8 <memmove>:
    fdd8:	e1500001 	cmp	r0, r1
    fddc:	9a00000a 	bls	fe0c <memmove+0x34>
    fde0:	e0813002 	add	r3, r1, r2
    fde4:	e1500003 	cmp	r0, r3
    fde8:	2a000007 	bcs	fe0c <memmove+0x34>
    fdec:	e3520000 	cmp	r2, #0
    fdf0:	e0802002 	add	r2, r0, r2
    fdf4:	012fff1e 	bxeq	lr
    fdf8:	e173c0d1 	ldrsb	ip, [r3, #-1]!
    fdfc:	e1510003 	cmp	r1, r3
    fe00:	e562c001 	strb	ip, [r2, #-1]!
    fe04:	1afffffb 	bne	fdf8 <memmove+0x20>
    fe08:	e12fff1e 	bx	lr
    fe0c:	ea000251 	b	10758 <memcpy>

0000fe10 <memcmp>:
    fe10:	e3520000 	cmp	r2, #0
    fe14:	0a00000e 	beq	fe54 <memcmp+0x44>
    fe18:	e5d0c000 	ldrb	ip, [r0]
    fe1c:	e5d13000 	ldrb	r3, [r1]
    fe20:	e15c0003 	cmp	ip, r3
    fe24:	ca00000c 	bgt	fe5c <memcmp+0x4c>
    fe28:	ba00000d 	blt	fe64 <memcmp+0x54>
    fe2c:	e0812002 	add	r2, r1, r2
    fe30:	e2811001 	add	r1, r1, #1
    fe34:	ea000004 	b	fe4c <memcmp+0x3c>
    fe38:	e5f0c001 	ldrb	ip, [r0, #1]!
    fe3c:	e4d13001 	ldrb	r3, [r1], #1
    fe40:	e15c0003 	cmp	ip, r3
    fe44:	ca000004 	bgt	fe5c <memcmp+0x4c>
    fe48:	ba000005 	blt	fe64 <memcmp+0x54>
    fe4c:	e1510002 	cmp	r1, r2
    fe50:	1afffff8 	bne	fe38 <memcmp+0x28>
    fe54:	e3a00000 	mov	r0, #0
    fe58:	e12fff1e 	bx	lr
    fe5c:	e3a00001 	mov	r0, #1
    fe60:	e12fff1e 	bx	lr
    fe64:	e3e00000 	mvn	r0, #0
    fe68:	e12fff1e 	bx	lr

0000fe6c <strlen>:
    fe6c:	e1d010d0 	ldrsb	r1, [r0]
    fe70:	e2803001 	add	r3, r0, #1
    fe74:	e3510000 	cmp	r1, #0
    fe78:	0a000003 	beq	fe8c <strlen+0x20>
    fe7c:	e0431000 	sub	r1, r3, r0
    fe80:	e0d320d1 	ldrsb	r2, [r3], #1
    fe84:	e3520000 	cmp	r2, #0
    fe88:	1afffffb 	bne	fe7c <strlen+0x10>
    fe8c:	e1a00001 	mov	r0, r1
    fe90:	e12fff1e 	bx	lr

0000fe94 <strcmp>:
    fe94:	e1d030d0 	ldrsb	r3, [r0]
    fe98:	e1d120d0 	ldrsb	r2, [r1]
    fe9c:	e3530000 	cmp	r3, #0
    fea0:	1a000007 	bne	fec4 <strcmp+0x30>
    fea4:	ea000008 	b	fecc <strcmp+0x38>
    fea8:	e1530002 	cmp	r3, r2
    feac:	ca00000b 	bgt	fee0 <strcmp+0x4c>
    feb0:	ba00000c 	blt	fee8 <strcmp+0x54>
    feb4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    feb8:	e3530000 	cmp	r3, #0
    febc:	0a00000b 	beq	fef0 <strcmp+0x5c>
    fec0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fec4:	e3520000 	cmp	r2, #0
    fec8:	1afffff6 	bne	fea8 <strcmp+0x14>
    fecc:	e1530002 	cmp	r3, r2
    fed0:	ca000002 	bgt	fee0 <strcmp+0x4c>
    fed4:	b3e00000 	mvnlt	r0, #0
    fed8:	a3a00000 	movge	r0, #0
    fedc:	e12fff1e 	bx	lr
    fee0:	e3a00001 	mov	r0, #1
    fee4:	e12fff1e 	bx	lr
    fee8:	e3e00000 	mvn	r0, #0
    feec:	e12fff1e 	bx	lr
    fef0:	e1d120d1 	ldrsb	r2, [r1, #1]
    fef4:	e1530002 	cmp	r3, r2
    fef8:	dafffff5 	ble	fed4 <strcmp+0x40>
    fefc:	eafffff7 	b	fee0 <strcmp+0x4c>

0000ff00 <strcasecmp>:
    ff00:	e2400001 	sub	r0, r0, #1
    ff04:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ff08:	e2432061 	sub	r2, r3, #97	; 0x61
    ff0c:	e3520019 	cmp	r2, #25
    ff10:	92433020 	subls	r3, r3, #32
    ff14:	e3530000 	cmp	r3, #0
    ff18:	0a00001f 	beq	ff9c <strcasecmp+0x9c>
    ff1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ff20:	e0d120d1 	ldrsb	r2, [r1], #1
    ff24:	e242c061 	sub	ip, r2, #97	; 0x61
    ff28:	e1a0e002 	mov	lr, r2
    ff2c:	e35c0019 	cmp	ip, #25
    ff30:	9242e020 	subls	lr, r2, #32
    ff34:	e35e0000 	cmp	lr, #0
    ff38:	1a000006 	bne	ff58 <strcasecmp+0x58>
    ff3c:	e35c0019 	cmp	ip, #25
    ff40:	92422020 	subls	r2, r2, #32
    ff44:	e1530002 	cmp	r3, r2
    ff48:	ca000011 	bgt	ff94 <strcasecmp+0x94>
    ff4c:	b3e00000 	mvnlt	r0, #0
    ff50:	a3a00000 	movge	r0, #0
    ff54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ff58:	e153000e 	cmp	r3, lr
    ff5c:	ca00000c 	bgt	ff94 <strcasecmp+0x94>
    ff60:	ba000016 	blt	ffc0 <strcasecmp+0xc0>
    ff64:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ff68:	e2432061 	sub	r2, r3, #97	; 0x61
    ff6c:	e3520019 	cmp	r2, #25
    ff70:	92433020 	subls	r3, r3, #32
    ff74:	e3530000 	cmp	r3, #0
    ff78:	1affffe8 	bne	ff20 <strcasecmp+0x20>
    ff7c:	e1d120d0 	ldrsb	r2, [r1]
    ff80:	e242c061 	sub	ip, r2, #97	; 0x61
    ff84:	e35c0019 	cmp	ip, #25
    ff88:	92422020 	subls	r2, r2, #32
    ff8c:	e1530002 	cmp	r3, r2
    ff90:	daffffed 	ble	ff4c <strcasecmp+0x4c>
    ff94:	e3a00001 	mov	r0, #1
    ff98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ff9c:	e1d120d0 	ldrsb	r2, [r1]
    ffa0:	e242c061 	sub	ip, r2, #97	; 0x61
    ffa4:	e35c0019 	cmp	ip, #25
    ffa8:	92422020 	subls	r2, r2, #32
    ffac:	e1530002 	cmp	r3, r2
    ffb0:	ca000004 	bgt	ffc8 <strcasecmp+0xc8>
    ffb4:	b3e00000 	mvnlt	r0, #0
    ffb8:	a3a00000 	movge	r0, #0
    ffbc:	e12fff1e 	bx	lr
    ffc0:	e3e00000 	mvn	r0, #0
    ffc4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ffc8:	e3a00001 	mov	r0, #1
    ffcc:	e12fff1e 	bx	lr

0000ffd0 <strncmp>:
    ffd0:	e3520000 	cmp	r2, #0
    ffd4:	0a000016 	beq	10034 <strncmp+0x64>
    ffd8:	e1d030d0 	ldrsb	r3, [r0]
    ffdc:	e1d1c0d0 	ldrsb	ip, [r1]
    ffe0:	e3530000 	cmp	r3, #0
    ffe4:	0a000015 	beq	10040 <strncmp+0x70>
    ffe8:	e35c0000 	cmp	ip, #0
    ffec:	0a000013 	beq	10040 <strncmp+0x70>
    fff0:	e15c0003 	cmp	ip, r3
    fff4:	ba000016 	blt	10054 <strncmp+0x84>
    fff8:	d0802002 	addle	r2, r0, r2
    fffc:	d2800001 	addle	r0, r0, #1
   10000:	da000009 	ble	1002c <strncmp+0x5c>
   10004:	ea000014 	b	1005c <strncmp+0x8c>
   10008:	e0d030d1 	ldrsb	r3, [r0], #1
   1000c:	e3530000 	cmp	r3, #0
   10010:	0a000009 	beq	1003c <strncmp+0x6c>
   10014:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10018:	e35c0000 	cmp	ip, #0
   1001c:	0a000007 	beq	10040 <strncmp+0x70>
   10020:	e153000c 	cmp	r3, ip
   10024:	ca00000a 	bgt	10054 <strncmp+0x84>
   10028:	ba00000b 	blt	1005c <strncmp+0x8c>
   1002c:	e1500002 	cmp	r0, r2
   10030:	1afffff4 	bne	10008 <strncmp+0x38>
   10034:	e3a00000 	mov	r0, #0
   10038:	e12fff1e 	bx	lr
   1003c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   10040:	e153000c 	cmp	r3, ip
   10044:	ca000002 	bgt	10054 <strncmp+0x84>
   10048:	b3e00000 	mvnlt	r0, #0
   1004c:	a3a00000 	movge	r0, #0
   10050:	e12fff1e 	bx	lr
   10054:	e3a00001 	mov	r0, #1
   10058:	e12fff1e 	bx	lr
   1005c:	e3e00000 	mvn	r0, #0
   10060:	e12fff1e 	bx	lr

00010064 <strncasecmp>:
   10064:	e3520000 	cmp	r2, #0
   10068:	0a00002d 	beq	10124 <strncasecmp+0xc0>
   1006c:	e92d4030 	push	{r4, r5, lr}
   10070:	e2400001 	sub	r0, r0, #1
   10074:	e1a05001 	mov	r5, r1
   10078:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1007c:	e2431061 	sub	r1, r3, #97	; 0x61
   10080:	e3510019 	cmp	r1, #25
   10084:	92433020 	subls	r3, r3, #32
   10088:	e3530000 	cmp	r3, #0
   1008c:	0a00001d 	beq	10108 <strncasecmp+0xa4>
   10090:	e0d5c0d1 	ldrsb	ip, [r5], #1
   10094:	e24c4061 	sub	r4, ip, #97	; 0x61
   10098:	e1a0e00c 	mov	lr, ip
   1009c:	e3540019 	cmp	r4, #25
   100a0:	e1a01005 	mov	r1, r5
   100a4:	924ce020 	subls	lr, ip, #32
   100a8:	e35e0000 	cmp	lr, #0
   100ac:	1a000006 	bne	100cc <strncasecmp+0x68>
   100b0:	e3540019 	cmp	r4, #25
   100b4:	9a00000e 	bls	100f4 <strncasecmp+0x90>
   100b8:	e15c0003 	cmp	ip, r3
   100bc:	ba000014 	blt	10114 <strncasecmp+0xb0>
   100c0:	c3e00000 	mvngt	r0, #0
   100c4:	d3a00000 	movle	r0, #0
   100c8:	e8bd8030 	pop	{r4, r5, pc}
   100cc:	e153000e 	cmp	r3, lr
   100d0:	ca00000f 	bgt	10114 <strncasecmp+0xb0>
   100d4:	ba000010 	blt	1011c <strncasecmp+0xb8>
   100d8:	e2522001 	subs	r2, r2, #1
   100dc:	1affffe5 	bne	10078 <strncasecmp+0x14>
   100e0:	e1d1c0d0 	ldrsb	ip, [r1]
   100e4:	e24c2061 	sub	r2, ip, #97	; 0x61
   100e8:	e3520019 	cmp	r2, #25
   100ec:	93a02000 	movls	r2, #0
   100f0:	8a000002 	bhi	10100 <strncasecmp+0x9c>
   100f4:	e3520000 	cmp	r2, #0
   100f8:	e24cc020 	sub	ip, ip, #32
   100fc:	1affffed 	bne	100b8 <strncasecmp+0x54>
   10100:	e3a00000 	mov	r0, #0
   10104:	e8bd8030 	pop	{r4, r5, pc}
   10108:	e1d5c0d0 	ldrsb	ip, [r5]
   1010c:	e24c4061 	sub	r4, ip, #97	; 0x61
   10110:	eaffffe6 	b	100b0 <strncasecmp+0x4c>
   10114:	e3a00001 	mov	r0, #1
   10118:	e8bd8030 	pop	{r4, r5, pc}
   1011c:	e3e00000 	mvn	r0, #0
   10120:	e8bd8030 	pop	{r4, r5, pc}
   10124:	e1d1c0d0 	ldrsb	ip, [r1]
   10128:	e24c2061 	sub	r2, ip, #97	; 0x61
   1012c:	e3520019 	cmp	r2, #25
   10130:	8a00000a 	bhi	10160 <strncasecmp+0xfc>
   10134:	e3a02000 	mov	r2, #0
   10138:	e24cc020 	sub	ip, ip, #32
   1013c:	e3520000 	cmp	r2, #0
   10140:	0a000006 	beq	10160 <strncasecmp+0xfc>
   10144:	e15c0003 	cmp	ip, r3
   10148:	ba000002 	blt	10158 <strncasecmp+0xf4>
   1014c:	c3e00000 	mvngt	r0, #0
   10150:	d3a00000 	movle	r0, #0
   10154:	e12fff1e 	bx	lr
   10158:	e3a00001 	mov	r0, #1
   1015c:	e12fff1e 	bx	lr
   10160:	e3a00000 	mov	r0, #0
   10164:	e12fff1e 	bx	lr

00010168 <strcpy>:
   10168:	e1d130d0 	ldrsb	r3, [r1]
   1016c:	e1a02000 	mov	r2, r0
   10170:	e3530000 	cmp	r3, #0
   10174:	0a000003 	beq	10188 <strcpy+0x20>
   10178:	e4c23001 	strb	r3, [r2], #1
   1017c:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10180:	e3530000 	cmp	r3, #0
   10184:	1afffffb 	bne	10178 <strcpy+0x10>
   10188:	e3a03000 	mov	r3, #0
   1018c:	e5c23000 	strb	r3, [r2]
   10190:	e12fff1e 	bx	lr

00010194 <strncpy>:
   10194:	e3520000 	cmp	r2, #0
   10198:	012fff1e 	bxeq	lr
   1019c:	e1d1c0d0 	ldrsb	ip, [r1]
   101a0:	e35c0000 	cmp	ip, #0
   101a4:	0a000009 	beq	101d0 <strncpy+0x3c>
   101a8:	e0802002 	add	r2, r0, r2
   101ac:	e1a03000 	mov	r3, r0
   101b0:	ea000002 	b	101c0 <strncpy+0x2c>
   101b4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   101b8:	e35c0000 	cmp	ip, #0
   101bc:	0a000004 	beq	101d4 <strncpy+0x40>
   101c0:	e4c3c001 	strb	ip, [r3], #1
   101c4:	e1530002 	cmp	r3, r2
   101c8:	1afffff9 	bne	101b4 <strncpy+0x20>
   101cc:	e12fff1e 	bx	lr
   101d0:	e1a03000 	mov	r3, r0
   101d4:	e3a02000 	mov	r2, #0
   101d8:	e5c32000 	strb	r2, [r3]
   101dc:	e12fff1e 	bx	lr

000101e0 <strcat>:
   101e0:	e1d030d0 	ldrsb	r3, [r0]
   101e4:	e3530000 	cmp	r3, #0
   101e8:	e1a03000 	mov	r3, r0
   101ec:	0a000002 	beq	101fc <strcat+0x1c>
   101f0:	e1f320d1 	ldrsb	r2, [r3, #1]!
   101f4:	e3520000 	cmp	r2, #0
   101f8:	1afffffc 	bne	101f0 <strcat+0x10>
   101fc:	e1d120d0 	ldrsb	r2, [r1]
   10200:	e3520000 	cmp	r2, #0
   10204:	0a000003 	beq	10218 <strcat+0x38>
   10208:	e4c32001 	strb	r2, [r3], #1
   1020c:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10210:	e3520000 	cmp	r2, #0
   10214:	1afffffb 	bne	10208 <strcat+0x28>
   10218:	e3a02000 	mov	r2, #0
   1021c:	e5c32000 	strb	r2, [r3]
   10220:	e12fff1e 	bx	lr

00010224 <strchr>:
   10224:	e1d020d0 	ldrsb	r2, [r0]
   10228:	e3520000 	cmp	r2, #0
   1022c:	0a000009 	beq	10258 <strchr+0x34>
   10230:	e1510002 	cmp	r1, r2
   10234:	1a000002 	bne	10244 <strchr+0x20>
   10238:	ea000008 	b	10260 <strchr+0x3c>
   1023c:	e1530001 	cmp	r3, r1
   10240:	012fff1e 	bxeq	lr
   10244:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10248:	e3530000 	cmp	r3, #0
   1024c:	1afffffa 	bne	1023c <strchr+0x18>
   10250:	e1a00003 	mov	r0, r3
   10254:	e12fff1e 	bx	lr
   10258:	e1a00002 	mov	r0, r2
   1025c:	e12fff1e 	bx	lr
   10260:	e12fff1e 	bx	lr

00010264 <strstr>:
   10264:	e1d030d0 	ldrsb	r3, [r0]
   10268:	e3530000 	cmp	r3, #0
   1026c:	1a000003 	bne	10280 <strstr+0x1c>
   10270:	e1d130d0 	ldrsb	r3, [r1]
   10274:	e3530000 	cmp	r3, #0
   10278:	13a00000 	movne	r0, #0
   1027c:	e12fff1e 	bx	lr
   10280:	e92d4010 	push	{r4, lr}
   10284:	e1d140d0 	ldrsb	r4, [r1]
   10288:	e3540000 	cmp	r4, #0
   1028c:	08bd8010 	popeq	{r4, pc}
   10290:	e1d030d0 	ldrsb	r3, [r0]
   10294:	e1530004 	cmp	r3, r4
   10298:	01a02001 	moveq	r2, r1
   1029c:	01a0c000 	moveq	ip, r0
   102a0:	0a000003 	beq	102b4 <strstr+0x50>
   102a4:	ea000006 	b	102c4 <strstr+0x60>
   102a8:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   102ac:	e15e0003 	cmp	lr, r3
   102b0:	1a000003 	bne	102c4 <strstr+0x60>
   102b4:	e1f230d1 	ldrsb	r3, [r2, #1]!
   102b8:	e3530000 	cmp	r3, #0
   102bc:	1afffff9 	bne	102a8 <strstr+0x44>
   102c0:	e8bd8010 	pop	{r4, pc}
   102c4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   102c8:	e3530000 	cmp	r3, #0
   102cc:	1affffed 	bne	10288 <strstr+0x24>
   102d0:	e1a00003 	mov	r0, r3
   102d4:	e8bd8010 	pop	{r4, pc}

000102d8 <strtok_r>:
   102d8:	e3500000 	cmp	r0, #0
   102dc:	0a00002c 	beq	10394 <strtok_r+0xbc>
   102e0:	e92d4030 	push	{r4, r5, lr}
   102e4:	e1d0e0d0 	ldrsb	lr, [r0]
   102e8:	e35e0000 	cmp	lr, #0
   102ec:	11d140d0 	ldrsbne	r4, [r1]
   102f0:	0a000024 	beq	10388 <strtok_r+0xb0>
   102f4:	e3540000 	cmp	r4, #0
   102f8:	0a000008 	beq	10320 <strtok_r+0x48>
   102fc:	e15e0004 	cmp	lr, r4
   10300:	0a000019 	beq	1036c <strtok_r+0x94>
   10304:	e1a0c001 	mov	ip, r1
   10308:	ea000001 	b	10314 <strtok_r+0x3c>
   1030c:	e15e0003 	cmp	lr, r3
   10310:	0a000015 	beq	1036c <strtok_r+0x94>
   10314:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10318:	e3530000 	cmp	r3, #0
   1031c:	1afffffa 	bne	1030c <strtok_r+0x34>
   10320:	e35e0000 	cmp	lr, #0
   10324:	0a000017 	beq	10388 <strtok_r+0xb0>
   10328:	e1a05000 	mov	r5, r0
   1032c:	e3540000 	cmp	r4, #0
   10330:	0a000008 	beq	10358 <strtok_r+0x80>
   10334:	e15e0004 	cmp	lr, r4
   10338:	0a00000d 	beq	10374 <strtok_r+0x9c>
   1033c:	e1a0c001 	mov	ip, r1
   10340:	ea000001 	b	1034c <strtok_r+0x74>
   10344:	e15e0003 	cmp	lr, r3
   10348:	0a000009 	beq	10374 <strtok_r+0x9c>
   1034c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10350:	e3530000 	cmp	r3, #0
   10354:	1afffffa 	bne	10344 <strtok_r+0x6c>
   10358:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   1035c:	e35e0000 	cmp	lr, #0
   10360:	1afffff1 	bne	1032c <strtok_r+0x54>
   10364:	e5825000 	str	r5, [r2]
   10368:	e8bd8030 	pop	{r4, r5, pc}
   1036c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   10370:	eaffffdf 	b	102f4 <strtok_r+0x1c>
   10374:	e3a03000 	mov	r3, #0
   10378:	e2855001 	add	r5, r5, #1
   1037c:	e5453001 	strb	r3, [r5, #-1]
   10380:	e5825000 	str	r5, [r2]
   10384:	e8bd8030 	pop	{r4, r5, pc}
   10388:	e3a00000 	mov	r0, #0
   1038c:	e5820000 	str	r0, [r2]
   10390:	e8bd8030 	pop	{r4, r5, pc}
   10394:	e5920000 	ldr	r0, [r2]
   10398:	e3500000 	cmp	r0, #0
   1039c:	1affffcf 	bne	102e0 <strtok_r+0x8>
   103a0:	e12fff1e 	bx	lr

000103a4 <strtoul>:
   103a4:	e3510000 	cmp	r1, #0
   103a8:	e92d4070 	push	{r4, r5, r6, lr}
   103ac:	e2425002 	sub	r5, r2, #2
   103b0:	e3c2e010 	bic	lr, r2, #16
   103b4:	15810000 	strne	r0, [r1]
   103b8:	e3520000 	cmp	r2, #0
   103bc:	13550022 	cmpne	r5, #34	; 0x22
   103c0:	83a05001 	movhi	r5, #1
   103c4:	93a05000 	movls	r5, #0
   103c8:	8a000036 	bhi	104a8 <strtoul+0x104>
   103cc:	e1d0c0d0 	ldrsb	ip, [r0]
   103d0:	e1a04000 	mov	r4, r0
   103d4:	e2800001 	add	r0, r0, #1
   103d8:	e35c0020 	cmp	ip, #32
   103dc:	e24c3009 	sub	r3, ip, #9
   103e0:	e6ef3073 	uxtb	r3, r3
   103e4:	0afffff8 	beq	103cc <strtoul+0x28>
   103e8:	e3530004 	cmp	r3, #4
   103ec:	9afffff6 	bls	103cc <strtoul+0x28>
   103f0:	e35c002b 	cmp	ip, #43	; 0x2b
   103f4:	0a00002d 	beq	104b0 <strtoul+0x10c>
   103f8:	e35c002d 	cmp	ip, #45	; 0x2d
   103fc:	03a06001 	moveq	r6, #1
   10400:	13a06000 	movne	r6, #0
   10404:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   10408:	01a04000 	moveq	r4, r0
   1040c:	e35c0030 	cmp	ip, #48	; 0x30
   10410:	0a00002b 	beq	104c4 <strtoul+0x120>
   10414:	e3520000 	cmp	r2, #0
   10418:	03a0200a 	moveq	r2, #10
   1041c:	e35c002f 	cmp	ip, #47	; 0x2f
   10420:	e1a0300c 	mov	r3, ip
   10424:	da00001c 	ble	1049c <strtoul+0xf8>
   10428:	e3a05001 	mov	r5, #1
   1042c:	e3a0e000 	mov	lr, #0
   10430:	ea000007 	b	10454 <strtoul+0xb0>
   10434:	e150000e 	cmp	r0, lr
   10438:	e3a05000 	mov	r5, #0
   1043c:	e1a0e000 	mov	lr, r0
   10440:	3a000028 	bcc	104e8 <strtoul+0x144>
   10444:	e1f430d1 	ldrsb	r3, [r4, #1]!
   10448:	e353002f 	cmp	r3, #47	; 0x2f
   1044c:	e1a0c003 	mov	ip, r3
   10450:	da000029 	ble	104fc <strtoul+0x158>
   10454:	e24cc061 	sub	ip, ip, #97	; 0x61
   10458:	e35c0019 	cmp	ip, #25
   1045c:	92433020 	subls	r3, r3, #32
   10460:	e3530040 	cmp	r3, #64	; 0x40
   10464:	c2433007 	subgt	r3, r3, #7
   10468:	e2433030 	sub	r3, r3, #48	; 0x30
   1046c:	e1520003 	cmp	r2, r3
   10470:	e020329e 	mla	r0, lr, r2, r3
   10474:	caffffee 	bgt	10434 <strtoul+0x90>
   10478:	e2255001 	eor	r5, r5, #1
   1047c:	e1a0000e 	mov	r0, lr
   10480:	e3510000 	cmp	r1, #0
   10484:	e0055006 	and	r5, r5, r6
   10488:	0a000000 	beq	10490 <strtoul+0xec>
   1048c:	e5814000 	str	r4, [r1]
   10490:	e3550000 	cmp	r5, #0
   10494:	12600000 	rsbne	r0, r0, #0
   10498:	e8bd8070 	pop	{r4, r5, r6, pc}
   1049c:	e3510000 	cmp	r1, #0
   104a0:	13a00000 	movne	r0, #0
   104a4:	1afffff8 	bne	1048c <strtoul+0xe8>
   104a8:	e3a00000 	mov	r0, #0
   104ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   104b0:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   104b4:	e3a06000 	mov	r6, #0
   104b8:	e1a04000 	mov	r4, r0
   104bc:	e35c0030 	cmp	ip, #48	; 0x30
   104c0:	1affffd3 	bne	10414 <strtoul+0x70>
   104c4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   104c8:	e2840001 	add	r0, r4, #1
   104cc:	e3cc3020 	bic	r3, ip, #32
   104d0:	e3530058 	cmp	r3, #88	; 0x58
   104d4:	0a00000a 	beq	10504 <strtoul+0x160>
   104d8:	e3520000 	cmp	r2, #0
   104dc:	e1a04000 	mov	r4, r0
   104e0:	03a02008 	moveq	r2, #8
   104e4:	eaffffcc 	b	1041c <strtoul+0x78>
   104e8:	e1510005 	cmp	r1, r5
   104ec:	0a00000a 	beq	1051c <strtoul+0x178>
   104f0:	e5814000 	str	r4, [r1]
   104f4:	e3e00000 	mvn	r0, #0
   104f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   104fc:	e3a05001 	mov	r5, #1
   10500:	eaffffde 	b	10480 <strtoul+0xdc>
   10504:	e35e0000 	cmp	lr, #0
   10508:	1affffe6 	bne	104a8 <strtoul+0x104>
   1050c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   10510:	e3a02010 	mov	r2, #16
   10514:	e2844002 	add	r4, r4, #2
   10518:	eaffffbf 	b	1041c <strtoul+0x78>
   1051c:	e3e00000 	mvn	r0, #0
   10520:	e8bd8070 	pop	{r4, r5, r6, pc}

00010524 <strtoull>:
   10524:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10528:	e251e000 	subs	lr, r1, #0
   1052c:	e2428002 	sub	r8, r2, #2
   10530:	e3c21010 	bic	r1, r2, #16
   10534:	158e0000 	strne	r0, [lr]
   10538:	e3520000 	cmp	r2, #0
   1053c:	13580022 	cmpne	r8, #34	; 0x22
   10540:	83a08001 	movhi	r8, #1
   10544:	93a08000 	movls	r8, #0
   10548:	8a000040 	bhi	10650 <strtoull+0x12c>
   1054c:	e1d0a0d0 	ldrsb	sl, [r0]
   10550:	e1a0c000 	mov	ip, r0
   10554:	e2800001 	add	r0, r0, #1
   10558:	e35a0020 	cmp	sl, #32
   1055c:	e24a3009 	sub	r3, sl, #9
   10560:	e6ef3073 	uxtb	r3, r3
   10564:	0afffff8 	beq	1054c <strtoull+0x28>
   10568:	e3530004 	cmp	r3, #4
   1056c:	9afffff6 	bls	1054c <strtoull+0x28>
   10570:	e35a002b 	cmp	sl, #43	; 0x2b
   10574:	0a000038 	beq	1065c <strtoull+0x138>
   10578:	e35a002d 	cmp	sl, #45	; 0x2d
   1057c:	03a09001 	moveq	r9, #1
   10580:	13a09000 	movne	r9, #0
   10584:	01dca0d1 	ldrsbeq	sl, [ip, #1]
   10588:	01a0c000 	moveq	ip, r0
   1058c:	e35a0030 	cmp	sl, #48	; 0x30
   10590:	0a000036 	beq	10670 <strtoull+0x14c>
   10594:	e3520000 	cmp	r2, #0
   10598:	03a0200a 	moveq	r2, #10
   1059c:	e35a002f 	cmp	sl, #47	; 0x2f
   105a0:	e1a0300a 	mov	r3, sl
   105a4:	da00004b 	ble	106d8 <strtoull+0x1b4>
   105a8:	e3a08001 	mov	r8, #1
   105ac:	e3a04000 	mov	r4, #0
   105b0:	e3a05000 	mov	r5, #0
   105b4:	e1a06002 	mov	r6, r2
   105b8:	e1a07fc2 	asr	r7, r2, #31
   105bc:	ea00000b 	b	105f0 <strtoull+0xcc>
   105c0:	e0900003 	adds	r0, r0, r3
   105c4:	e3a08000 	mov	r8, #0
   105c8:	e0a11fc3 	adc	r1, r1, r3, asr #31
   105cc:	e1510005 	cmp	r1, r5
   105d0:	e1a05001 	mov	r5, r1
   105d4:	01500004 	cmpeq	r0, r4
   105d8:	e1a04000 	mov	r4, r0
   105dc:	3a00002c 	bcc	10694 <strtoull+0x170>
   105e0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   105e4:	e353002f 	cmp	r3, #47	; 0x2f
   105e8:	e1a0a003 	mov	sl, r3
   105ec:	da00002e 	ble	106ac <strtoull+0x188>
   105f0:	e24aa061 	sub	sl, sl, #97	; 0x61
   105f4:	e00b0592 	mul	fp, r2, r5
   105f8:	e35a0019 	cmp	sl, #25
   105fc:	e02bb794 	mla	fp, r4, r7, fp
   10600:	92433020 	subls	r3, r3, #32
   10604:	e0810492 	umull	r0, r1, r2, r4
   10608:	e3530040 	cmp	r3, #64	; 0x40
   1060c:	c2433007 	subgt	r3, r3, #7
   10610:	e08b1001 	add	r1, fp, r1
   10614:	e2433030 	sub	r3, r3, #48	; 0x30
   10618:	e1520003 	cmp	r2, r3
   1061c:	caffffe7 	bgt	105c0 <strtoull+0x9c>
   10620:	e2288001 	eor	r8, r8, #1
   10624:	e1a00004 	mov	r0, r4
   10628:	e1a01005 	mov	r1, r5
   1062c:	e35e0000 	cmp	lr, #0
   10630:	e0088009 	and	r8, r8, r9
   10634:	0a000000 	beq	1063c <strtoull+0x118>
   10638:	e58ec000 	str	ip, [lr]
   1063c:	e3580000 	cmp	r8, #0
   10640:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10644:	e2700000 	rsbs	r0, r0, #0
   10648:	e2e11000 	rsc	r1, r1, #0
   1064c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10650:	e3a00000 	mov	r0, #0
   10654:	e3a01000 	mov	r1, #0
   10658:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1065c:	e1dca0d1 	ldrsb	sl, [ip, #1]
   10660:	e3a09000 	mov	r9, #0
   10664:	e1a0c000 	mov	ip, r0
   10668:	e35a0030 	cmp	sl, #48	; 0x30
   1066c:	1affffc8 	bne	10594 <strtoull+0x70>
   10670:	e1dca0d1 	ldrsb	sl, [ip, #1]
   10674:	e28c0001 	add	r0, ip, #1
   10678:	e3ca3020 	bic	r3, sl, #32
   1067c:	e3530058 	cmp	r3, #88	; 0x58
   10680:	0a00000b 	beq	106b4 <strtoull+0x190>
   10684:	e3520000 	cmp	r2, #0
   10688:	e1a0c000 	mov	ip, r0
   1068c:	03a02008 	moveq	r2, #8
   10690:	eaffffc1 	b	1059c <strtoull+0x78>
   10694:	e15e0008 	cmp	lr, r8
   10698:	0a00000b 	beq	106cc <strtoull+0x1a8>
   1069c:	e58ec000 	str	ip, [lr]
   106a0:	e3e00000 	mvn	r0, #0
   106a4:	e3a01000 	mov	r1, #0
   106a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106ac:	e3a08001 	mov	r8, #1
   106b0:	eaffffdd 	b	1062c <strtoull+0x108>
   106b4:	e3510000 	cmp	r1, #0
   106b8:	1affffe4 	bne	10650 <strtoull+0x12c>
   106bc:	e1dca0d2 	ldrsb	sl, [ip, #2]
   106c0:	e3a02010 	mov	r2, #16
   106c4:	e28cc002 	add	ip, ip, #2
   106c8:	eaffffb3 	b	1059c <strtoull+0x78>
   106cc:	e3e00000 	mvn	r0, #0
   106d0:	e3a01000 	mov	r1, #0
   106d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106d8:	e35e0000 	cmp	lr, #0
   106dc:	e3a00000 	mov	r0, #0
   106e0:	e3a01000 	mov	r1, #0
   106e4:	1affffd3 	bne	10638 <strtoull+0x114>
   106e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000106ec <atoi>:
   106ec:	e3a0200a 	mov	r2, #10
   106f0:	e3a01000 	mov	r1, #0
   106f4:	eaffff2a 	b	103a4 <strtoul>

000106f8 <char2int>:
   106f8:	e12fff1e 	bx	lr

000106fc <memset>:
   106fc:	e3100003 	tst	r0, #3
   10700:	1a00000d 	bne	1073c <memset+0x40>
   10704:	e3520010 	cmp	r2, #16
   10708:	3a00000b 	bcc	1073c <memset+0x40>
   1070c:	e1813401 	orr	r3, r1, r1, lsl #8
   10710:	e183c803 	orr	ip, r3, r3, lsl #16
   10714:	e1a03000 	mov	r3, r0
   10718:	e583c000 	str	ip, [r3]
   1071c:	e583c004 	str	ip, [r3, #4]
   10720:	e583c008 	str	ip, [r3, #8]
   10724:	e583c00c 	str	ip, [r3, #12]
   10728:	e2833010 	add	r3, r3, #16
   1072c:	e2422010 	sub	r2, r2, #16
   10730:	e352000f 	cmp	r2, #15
   10734:	8afffff7 	bhi	10718 <memset+0x1c>
   10738:	ea000000 	b	10740 <memset+0x44>
   1073c:	e1a03000 	mov	r3, r0
   10740:	e3520000 	cmp	r2, #0
   10744:	012fff1e 	bxeq	lr
   10748:	e4c31001 	strb	r1, [r3], #1
   1074c:	e2522001 	subs	r2, r2, #1
   10750:	1afffffc 	bne	10748 <memset+0x4c>
   10754:	e12fff1e 	bx	lr

00010758 <memcpy>:
   10758:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   1075c:	e352007f 	cmp	r2, #127	; 0x7f
   10760:	9a00000b 	bls	10794 <memcpy+0x3c>
   10764:	e3110003 	tst	r1, #3
   10768:	1a000009 	bne	10794 <memcpy+0x3c>
   1076c:	e3100003 	tst	r0, #3
   10770:	1a000007 	bne	10794 <memcpy+0x3c>
   10774:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   10778:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   1077c:	e2422020 	sub	r2, r2, #32
   10780:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10784:	f5d1f040 	pld	[r1, #64]	; 0x40
   10788:	e352001f 	cmp	r2, #31
   1078c:	8afffff9 	bhi	10778 <memcpy+0x20>
   10790:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   10794:	e3520000 	cmp	r2, #0
   10798:	0a000003 	beq	107ac <memcpy+0x54>
   1079c:	e4d13001 	ldrb	r3, [r1], #1
   107a0:	e2522001 	subs	r2, r2, #1
   107a4:	e4c03001 	strb	r3, [r0], #1
   107a8:	1afffffb 	bne	1079c <memcpy+0x44>
   107ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   107b0:	e12fff1e 	bx	lr

000107b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   107b4:	e3510001 	cmp	r1, #1
   107b8:	91a03002 	movls	r3, r2
   107bc:	83823001 	orrhi	r3, r2, #1
   107c0:	e92d4070 	push	{r4, r5, r6, lr}
   107c4:	e3530000 	cmp	r3, #0
   107c8:	e1a04000 	mov	r4, r0
   107cc:	e59f0120 	ldr	r0, [pc, #288]	; 108f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x140>
   107d0:	e3a03000 	mov	r3, #0
   107d4:	e24dd020 	sub	sp, sp, #32
   107d8:	e5c42004 	strb	r2, [r4, #4]
   107dc:	e5841008 	str	r1, [r4, #8]
   107e0:	e5840000 	str	r0, [r4]
   107e4:	e1c431b0 	strh	r3, [r4, #16]
   107e8:	e1c431b2 	strh	r3, [r4, #18]
   107ec:	0a000002 	beq	107fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x48>
   107f0:	e1a00004 	mov	r0, r4
   107f4:	e28dd020 	add	sp, sp, #32
   107f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   107fc:	e3075288 	movw	r5, #29320	; 0x7288
   10800:	e3405001 	movt	r5, #1
   10804:	e5950004 	ldr	r0, [r5, #4]
   10808:	e1500003 	cmp	r0, r3
   1080c:	1a000027 	bne	108b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xfc>
   10810:	e5956000 	ldr	r6, [r5]
   10814:	e3560000 	cmp	r6, #0
   10818:	0a00000b 	beq	1084c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x98>
   1081c:	e5943008 	ldr	r3, [r4, #8]
   10820:	e3a02000 	mov	r2, #0
   10824:	e7862103 	str	r2, [r6, r3, lsl #2]
   10828:	e5953004 	ldr	r3, [r5, #4]
   1082c:	e3530000 	cmp	r3, #0
   10830:	1a000020 	bne	108b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x104>
   10834:	e1a00004 	mov	r0, r4
   10838:	e3a01000 	mov	r1, #0
   1083c:	eb000034 	bl	10914 <CVirtualGPIOPin::Write(unsigned int)>
   10840:	e1a00004 	mov	r0, r4
   10844:	e28dd020 	add	sp, sp, #32
   10848:	e8bd8070 	pop	{r4, r5, r6, pc}
   1084c:	e3a00001 	mov	r0, #1
   10850:	eb000442 	bl	11960 <CMemorySystem::GetCoherentPage(unsigned int)>
   10854:	e1a01006 	mov	r1, r6
   10858:	e5850000 	str	r0, [r5]
   1085c:	e28d0008 	add	r0, sp, #8
   10860:	eb0007b6 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10864:	e595c000 	ldr	ip, [r5]
   10868:	e3a03004 	mov	r3, #4
   1086c:	e28d0008 	add	r0, sp, #8
   10870:	e38cc103 	orr	ip, ip, #-1073741824	; 0xc0000000
   10874:	e58d3000 	str	r3, [sp]
   10878:	e28d2010 	add	r2, sp, #16
   1087c:	e3081020 	movw	r1, #32800	; 0x8020
   10880:	e3401004 	movt	r1, #4
   10884:	e3a03010 	mov	r3, #16
   10888:	e58dc01c 	str	ip, [sp, #28]
   1088c:	eb0007b7 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10890:	e3500000 	cmp	r0, #0
   10894:	0a000009 	beq	108c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x10c>
   10898:	e28d0008 	add	r0, sp, #8
   1089c:	eb0007ae 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   108a0:	e5956000 	ldr	r6, [r5]
   108a4:	e3560000 	cmp	r6, #0
   108a8:	0affffde 	beq	10828 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x74>
   108ac:	eaffffda 	b	1081c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x68>
   108b0:	eb000466 	bl	11a50 <EnterCritical>
   108b4:	eaffffd5 	b	10810 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x5c>
   108b8:	eb000491 	bl	11b04 <LeaveCritical>
   108bc:	eaffffdc 	b	10834 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x80>
   108c0:	e3a03010 	mov	r3, #16
   108c4:	e58d0000 	str	r0, [sp]
   108c8:	e28d2010 	add	r2, sp, #16
   108cc:	e3a01010 	mov	r1, #16
   108d0:	e3401004 	movt	r1, #4
   108d4:	e28d0008 	add	r0, sp, #8
   108d8:	eb0007a4 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   108dc:	e3500000 	cmp	r0, #0
   108e0:	05850000 	streq	r0, [r5]
   108e4:	159d301c 	ldrne	r3, [sp, #28]
   108e8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   108ec:	15853000 	strne	r3, [r5]
   108f0:	eaffffe8 	b	10898 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe4>
   108f4:	00015548 	.word	0x00015548

000108f8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   108f8:	e12fff1e 	bx	lr

000108fc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   108fc:	e92d4010 	push	{r4, lr}
   10900:	e3a01014 	mov	r1, #20
   10904:	e1a04000 	mov	r4, r0
   10908:	eb0000a3 	bl	10b9c <operator delete(void*, unsigned int)>
   1090c:	e1a00004 	mov	r0, r4
   10910:	e8bd8010 	pop	{r4, pc}

00010914 <CVirtualGPIOPin::Write(unsigned int)>:
   10914:	e5d03004 	ldrb	r3, [r0, #4]
   10918:	e92d4070 	push	{r4, r5, r6, lr}
   1091c:	e1a04000 	mov	r4, r0
   10920:	e3530000 	cmp	r3, #0
   10924:	e24dd028 	sub	sp, sp, #40	; 0x28
   10928:	e1a05001 	mov	r5, r1
   1092c:	0a000013 	beq	10980 <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   10930:	e5901008 	ldr	r1, [r0, #8]
   10934:	e3510000 	cmp	r1, #0
   10938:	1a000035 	bne	10a14 <CVirtualGPIOPin::Write(unsigned int)+0x100>
   1093c:	e28d000c 	add	r0, sp, #12
   10940:	eb00077e 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10944:	e3a03008 	mov	r3, #8
   10948:	e58d3000 	str	r3, [sp]
   1094c:	e3a03014 	mov	r3, #20
   10950:	e3a0c082 	mov	ip, #130	; 0x82
   10954:	e28d000c 	add	r0, sp, #12
   10958:	e3081041 	movw	r1, #32833	; 0x8041
   1095c:	e3401003 	movt	r1, #3
   10960:	e08d2003 	add	r2, sp, r3
   10964:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10968:	e58dc020 	str	ip, [sp, #32]
   1096c:	eb00077f 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10970:	e28d000c 	add	r0, sp, #12
   10974:	eb000778 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   10978:	e28dd028 	add	sp, sp, #40	; 0x28
   1097c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10980:	e5903008 	ldr	r3, [r0, #8]
   10984:	e3530001 	cmp	r3, #1
   10988:	8afffffa 	bhi	10978 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   1098c:	e3076288 	movw	r6, #29320	; 0x7288
   10990:	e3406001 	movt	r6, #1
   10994:	e3510001 	cmp	r1, #1
   10998:	93a03000 	movls	r3, #0
   1099c:	83a03001 	movhi	r3, #1
   109a0:	e5962000 	ldr	r2, [r6]
   109a4:	e3520000 	cmp	r2, #0
   109a8:	03833001 	orreq	r3, r3, #1
   109ac:	e3530000 	cmp	r3, #0
   109b0:	1afffff0 	bne	10978 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   109b4:	e5960004 	ldr	r0, [r6, #4]
   109b8:	e3500000 	cmp	r0, #0
   109bc:	1a000018 	bne	10a24 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   109c0:	e1d411b0 	ldrh	r1, [r4, #16]
   109c4:	e1d431b2 	ldrh	r3, [r4, #18]
   109c8:	e584500c 	str	r5, [r4, #12]
   109cc:	e0412003 	sub	r2, r1, r3
   109d0:	e6bf2072 	sxth	r2, r2
   109d4:	e3520000 	cmp	r2, #0
   109d8:	da000013 	ble	10a2c <CVirtualGPIOPin::Write(unsigned int)+0x118>
   109dc:	e3550000 	cmp	r5, #0
   109e0:	1a000006 	bne	10a00 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   109e4:	e2833001 	add	r3, r3, #1
   109e8:	e6ff3073 	uxth	r3, r3
   109ec:	e1c431b2 	strh	r3, [r4, #18]
   109f0:	e5940008 	ldr	r0, [r4, #8]
   109f4:	e1833801 	orr	r3, r3, r1, lsl #16
   109f8:	e5962000 	ldr	r2, [r6]
   109fc:	e7823100 	str	r3, [r2, r0, lsl #2]
   10a00:	e5963004 	ldr	r3, [r6, #4]
   10a04:	e3530000 	cmp	r3, #0
   10a08:	0affffda 	beq	10978 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10a0c:	eb00043c 	bl	11b04 <LeaveCritical>
   10a10:	eaffffd8 	b	10978 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10a14:	e59f1028 	ldr	r1, [pc, #40]	; 10a44 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   10a18:	e3a0205b 	mov	r2, #91	; 0x5b
   10a1c:	e2810014 	add	r0, r1, #20
   10a20:	eb0005de 	bl	121a0 <assertion_failed>
   10a24:	eb000409 	bl	11a50 <EnterCritical>
   10a28:	eaffffe4 	b	109c0 <CVirtualGPIOPin::Write(unsigned int)+0xac>
   10a2c:	e3550000 	cmp	r5, #0
   10a30:	0afffff2 	beq	10a00 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   10a34:	e2811001 	add	r1, r1, #1
   10a38:	e6ff1071 	uxth	r1, r1
   10a3c:	e1c411b0 	strh	r1, [r4, #16]
   10a40:	eaffffea 	b	109f0 <CVirtualGPIOPin::Write(unsigned int)+0xdc>
   10a44:	00015550 	.word	0x00015550

00010a48 <CVirtualGPIOPin::Invert()>:
   10a48:	e590100c 	ldr	r1, [r0, #12]
   10a4c:	e2211001 	eor	r1, r1, #1
   10a50:	eaffffaf 	b	10914 <CVirtualGPIOPin::Write(unsigned int)>

00010a54 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   10a54:	e3073288 	movw	r3, #29320	; 0x7288
   10a58:	e3403001 	movt	r3, #1
   10a5c:	e3a02000 	mov	r2, #0
   10a60:	e5832004 	str	r2, [r3, #4]
   10a64:	e12fff1e 	bx	lr

00010a68 <ChainBootStub(void const*, unsigned int)>:
   10a68:	e2811003 	add	r1, r1, #3
   10a6c:	e1b01121 	lsrs	r1, r1, #2
   10a70:	0a000008 	beq	10a98 <ChainBootStub(void const*, unsigned int)+0x30>
   10a74:	e2811d7f 	add	r1, r1, #8128	; 0x1fc0
   10a78:	e2400004 	sub	r0, r0, #4
   10a7c:	e281103f 	add	r1, r1, #63	; 0x3f
   10a80:	e3073ffc 	movw	r3, #32764	; 0x7ffc
   10a84:	e1a01101 	lsl	r1, r1, #2
   10a88:	e5b02004 	ldr	r2, [r0, #4]!
   10a8c:	e5a32004 	str	r2, [r3, #4]!
   10a90:	e1530001 	cmp	r3, r1
   10a94:	1afffffb 	bne	10a88 <ChainBootStub(void const*, unsigned int)+0x20>
   10a98:	e3a03000 	mov	r3, #0
   10a9c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10aa0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10aa4:	f57ff04f 	dsb	sy
   10aa8:	f57ff06f 	isb	sy
   10aac:	e3a03902 	mov	r3, #32768	; 0x8000
   10ab0:	e12fff13 	bx	r3

00010ab4 <EnableChainBoot>:
   10ab4:	e3073290 	movw	r3, #29328	; 0x7290
   10ab8:	e3403001 	movt	r3, #1
   10abc:	e92d4010 	push	{r4, lr}
   10ac0:	e3a02b01 	mov	r2, #1024	; 0x400
   10ac4:	e5831004 	str	r1, [r3, #4]
   10ac8:	e3001a68 	movw	r1, #2664	; 0xa68
   10acc:	e3401001 	movt	r1, #1
   10ad0:	e5830000 	str	r0, [r3]
   10ad4:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   10ad8:	ebffff1e 	bl	10758 <memcpy>
   10adc:	e3a03000 	mov	r3, #0
   10ae0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10ae4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10ae8:	f57ff04f 	dsb	sy
   10aec:	f57ff06f 	isb	sy
   10af0:	e8bd8010 	pop	{r4, pc}

00010af4 <IsChainBootEnabled>:
   10af4:	e3073290 	movw	r3, #29328	; 0x7290
   10af8:	e3403001 	movt	r3, #1
   10afc:	e5930000 	ldr	r0, [r3]
   10b00:	e2900000 	adds	r0, r0, #0
   10b04:	13a00001 	movne	r0, #1
   10b08:	e12fff1e 	bx	lr

00010b0c <DoChainBoot>:
   10b0c:	e3073290 	movw	r3, #29328	; 0x7290
   10b10:	e3403001 	movt	r3, #1
   10b14:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   10b18:	e8930003 	ldm	r3, {r0, r1}
   10b1c:	e12fff12 	bx	r2

00010b20 <operator new(unsigned int, int)>:
   10b20:	eaffffff 	b	10b24 <operator new[](unsigned int, int)>

00010b24 <operator new[](unsigned int, int)>:
   10b24:	e3510000 	cmp	r1, #0
   10b28:	0a000001 	beq	10b34 <operator new[](unsigned int, int)+0x10>
   10b2c:	e3510002 	cmp	r1, #2
   10b30:	1a000005 	bne	10b4c <operator new[](unsigned int, int)+0x28>
   10b34:	e307329c 	movw	r3, #29340	; 0x729c
   10b38:	e3403001 	movt	r3, #1
   10b3c:	e1a01000 	mov	r1, r0
   10b40:	e5930000 	ldr	r0, [r3]
   10b44:	e280000c 	add	r0, r0, #12
   10b48:	ea000039 	b	10c34 <CHeapAllocator::Allocate(unsigned int)>
   10b4c:	e3a00000 	mov	r0, #0
   10b50:	e12fff1e 	bx	lr

00010b54 <operator new(unsigned int, void*)>:
   10b54:	e1a00001 	mov	r0, r1
   10b58:	e12fff1e 	bx	lr

00010b5c <operator new[](unsigned int, void*)>:
   10b5c:	e1a00001 	mov	r0, r1
   10b60:	e12fff1e 	bx	lr

00010b64 <operator new(unsigned int)>:
   10b64:	eaffffff 	b	10b68 <operator new[](unsigned int)>

00010b68 <operator new[](unsigned int)>:
   10b68:	e307329c 	movw	r3, #29340	; 0x729c
   10b6c:	e3403001 	movt	r3, #1
   10b70:	e1a01000 	mov	r1, r0
   10b74:	e5930000 	ldr	r0, [r3]
   10b78:	e280000c 	add	r0, r0, #12
   10b7c:	ea00002c 	b	10c34 <CHeapAllocator::Allocate(unsigned int)>

00010b80 <operator delete(void*)>:
   10b80:	eaffffff 	b	10b84 <operator delete[](void*)>

00010b84 <operator delete[](void*)>:
   10b84:	e307329c 	movw	r3, #29340	; 0x729c
   10b88:	e3403001 	movt	r3, #1
   10b8c:	e1a01000 	mov	r1, r0
   10b90:	e5930000 	ldr	r0, [r3]
   10b94:	e280000c 	add	r0, r0, #12
   10b98:	ea0000a3 	b	10e2c <CHeapAllocator::Free(void*)>

00010b9c <operator delete(void*, unsigned int)>:
   10b9c:	eaffffff 	b	10ba0 <operator delete[](void*, unsigned int)>

00010ba0 <operator delete[](void*, unsigned int)>:
   10ba0:	e307329c 	movw	r3, #29340	; 0x729c
   10ba4:	e3403001 	movt	r3, #1
   10ba8:	e1a01000 	mov	r1, r0
   10bac:	e5930000 	ldr	r0, [r3]
   10bb0:	e280000c 	add	r0, r0, #12
   10bb4:	ea00009c 	b	10e2c <CHeapAllocator::Free(void*)>

00010bb8 <CHeapAllocator::CHeapAllocator(char const*)>:
   10bb8:	e92d4010 	push	{r4, lr}
   10bbc:	e1a04000 	mov	r4, r0
   10bc0:	e3a03000 	mov	r3, #0
   10bc4:	e3a0c001 	mov	ip, #1
   10bc8:	e3a020a8 	mov	r2, #168	; 0xa8
   10bcc:	e5841000 	str	r1, [r4]
   10bd0:	e2800010 	add	r0, r0, #16
   10bd4:	e1a01003 	mov	r1, r3
   10bd8:	e5843004 	str	r3, [r4, #4]
   10bdc:	e5843008 	str	r3, [r4, #8]
   10be0:	e584300c 	str	r3, [r4, #12]
   10be4:	e584c0b8 	str	ip, [r4, #184]	; 0xb8
   10be8:	ebfffec3 	bl	106fc <memset>
   10bec:	e59f3020 	ldr	r3, [pc, #32]	; 10c14 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   10bf0:	e1a02004 	mov	r2, r4
   10bf4:	e283001c 	add	r0, r3, #28
   10bf8:	e5b31004 	ldr	r1, [r3, #4]!
   10bfc:	e2822008 	add	r2, r2, #8
   10c00:	e1530000 	cmp	r3, r0
   10c04:	e5821008 	str	r1, [r2, #8]
   10c08:	1afffffa 	bne	10bf8 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   10c0c:	e1a00004 	mov	r0, r4
   10c10:	e8bd8010 	pop	{r4, pc}
   10c14:	000171fc 	.word	0x000171fc

00010c18 <CHeapAllocator::~CHeapAllocator()>:
   10c18:	e12fff1e 	bx	lr

00010c1c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   10c1c:	e0812002 	add	r2, r1, r2
   10c20:	e980000e 	stmib	r0, {r1, r2, r3}
   10c24:	e12fff1e 	bx	lr

00010c28 <CHeapAllocator::GetFreeSpace() const>:
   10c28:	e9900005 	ldmib	r0, {r0, r2}
   10c2c:	e0420000 	sub	r0, r2, r0
   10c30:	e12fff1e 	bx	lr

00010c34 <CHeapAllocator::Allocate(unsigned int)>:
   10c34:	e5903004 	ldr	r3, [r0, #4]
   10c38:	e3530000 	cmp	r3, #0
   10c3c:	0a000078 	beq	10e24 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   10c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10c44:	e1a06000 	mov	r6, r0
   10c48:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   10c4c:	e1a04001 	mov	r4, r1
   10c50:	e3500000 	cmp	r0, #0
   10c54:	1a000045 	bne	10d70 <CHeapAllocator::Allocate(unsigned int)+0x13c>
   10c58:	e5963010 	ldr	r3, [r6, #16]
   10c5c:	e2862010 	add	r2, r6, #16
   10c60:	e3530000 	cmp	r3, #0
   10c64:	0a000007 	beq	10c88 <CHeapAllocator::Allocate(unsigned int)+0x54>
   10c68:	e1540003 	cmp	r4, r3
   10c6c:	8a000002 	bhi	10c7c <CHeapAllocator::Allocate(unsigned int)+0x48>
   10c70:	ea000016 	b	10cd0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   10c74:	e1530004 	cmp	r3, r4
   10c78:	2a000014 	bcs	10cd0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   10c7c:	e5b23008 	ldr	r3, [r2, #8]!
   10c80:	e3530000 	cmp	r3, #0
   10c84:	1afffffa 	bne	10c74 <CHeapAllocator::Allocate(unsigned int)+0x40>
   10c88:	e5965004 	ldr	r5, [r6, #4]
   10c8c:	e284307f 	add	r3, r4, #127	; 0x7f
   10c90:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   10c94:	e596700c 	ldr	r7, [r6, #12]
   10c98:	e0853003 	add	r3, r5, r3
   10c9c:	e1550003 	cmp	r5, r3
   10ca0:	2a000003 	bcs	10cb4 <CHeapAllocator::Allocate(unsigned int)+0x80>
   10ca4:	e5962008 	ldr	r2, [r6, #8]
   10ca8:	e0422007 	sub	r2, r2, r7
   10cac:	e1530002 	cmp	r3, r2
   10cb0:	9a000030 	bls	10d78 <CHeapAllocator::Allocate(unsigned int)+0x144>
   10cb4:	e3570000 	cmp	r7, #0
   10cb8:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   10cbc:	1a00004b 	bne	10df0 <CHeapAllocator::Allocate(unsigned int)+0x1bc>
   10cc0:	e3530000 	cmp	r3, #0
   10cc4:	1a000040 	bne	10dcc <CHeapAllocator::Allocate(unsigned int)+0x198>
   10cc8:	e3a00000 	mov	r0, #0
   10ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10cd0:	e5925004 	ldr	r5, [r2, #4]
   10cd4:	e3550000 	cmp	r5, #0
   10cd8:	01a04003 	moveq	r4, r3
   10cdc:	0affffe9 	beq	10c88 <CHeapAllocator::Allocate(unsigned int)+0x54>
   10ce0:	e5d53000 	ldrb	r3, [r5]
   10ce4:	e3041d43 	movw	r1, #19779	; 0x4d43
   10ce8:	e344124c 	movt	r1, #16972	; 0x424c
   10cec:	e5d5e001 	ldrb	lr, [r5, #1]
   10cf0:	e5d5c002 	ldrb	ip, [r5, #2]
   10cf4:	e5d50003 	ldrb	r0, [r5, #3]
   10cf8:	e183340e 	orr	r3, r3, lr, lsl #8
   10cfc:	e183380c 	orr	r3, r3, ip, lsl #16
   10d00:	e1833c00 	orr	r3, r3, r0, lsl #24
   10d04:	e1530001 	cmp	r3, r1
   10d08:	1a000032 	bne	10dd8 <CHeapAllocator::Allocate(unsigned int)+0x1a4>
   10d0c:	e5d53008 	ldrb	r3, [r5, #8]
   10d10:	e5d5c009 	ldrb	ip, [r5, #9]
   10d14:	e5d5000a 	ldrb	r0, [r5, #10]
   10d18:	e5d5100b 	ldrb	r1, [r5, #11]
   10d1c:	e183340c 	orr	r3, r3, ip, lsl #8
   10d20:	e1833800 	orr	r3, r3, r0, lsl #16
   10d24:	e1833c01 	orr	r3, r3, r1, lsl #24
   10d28:	e5823004 	str	r3, [r2, #4]
   10d2c:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   10d30:	e3530000 	cmp	r3, #0
   10d34:	1a000022 	bne	10dc4 <CHeapAllocator::Allocate(unsigned int)+0x190>
   10d38:	e2850040 	add	r0, r5, #64	; 0x40
   10d3c:	e3a03000 	mov	r3, #0
   10d40:	e310003f 	tst	r0, #63	; 0x3f
   10d44:	e5c53008 	strb	r3, [r5, #8]
   10d48:	e5c53009 	strb	r3, [r5, #9]
   10d4c:	e5c5300a 	strb	r3, [r5, #10]
   10d50:	e5c5300b 	strb	r3, [r5, #11]
   10d54:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10d58:	e3051570 	movw	r1, #21872	; 0x5570
   10d5c:	e3401001 	movt	r1, #1
   10d60:	e30505c0 	movw	r0, #21952	; 0x55c0
   10d64:	e3400001 	movt	r0, #1
   10d68:	e3a0208e 	mov	r2, #142	; 0x8e
   10d6c:	eb00050b 	bl	121a0 <assertion_failed>
   10d70:	eb000336 	bl	11a50 <EnterCritical>
   10d74:	eaffffb7 	b	10c58 <CHeapAllocator::Allocate(unsigned int)+0x24>
   10d78:	e5863004 	str	r3, [r6, #4]
   10d7c:	e7e73854 	ubfx	r3, r4, #16, #8
   10d80:	e5c53006 	strb	r3, [r5, #6]
   10d84:	e7e72454 	ubfx	r2, r4, #8, #8
   10d88:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   10d8c:	e3a0e043 	mov	lr, #67	; 0x43
   10d90:	e3a0c04d 	mov	ip, #77	; 0x4d
   10d94:	e3a0004c 	mov	r0, #76	; 0x4c
   10d98:	e3530000 	cmp	r3, #0
   10d9c:	e3a01042 	mov	r1, #66	; 0x42
   10da0:	e5c54004 	strb	r4, [r5, #4]
   10da4:	e1a04c24 	lsr	r4, r4, #24
   10da8:	e5c5e000 	strb	lr, [r5]
   10dac:	e5c5c001 	strb	ip, [r5, #1]
   10db0:	e5c50002 	strb	r0, [r5, #2]
   10db4:	e5c51003 	strb	r1, [r5, #3]
   10db8:	e5c52005 	strb	r2, [r5, #5]
   10dbc:	e5c54007 	strb	r4, [r5, #7]
   10dc0:	0affffdc 	beq	10d38 <CHeapAllocator::Allocate(unsigned int)+0x104>
   10dc4:	eb00034e 	bl	11b04 <LeaveCritical>
   10dc8:	eaffffda 	b	10d38 <CHeapAllocator::Allocate(unsigned int)+0x104>
   10dcc:	eb00034c 	bl	11b04 <LeaveCritical>
   10dd0:	e1a00007 	mov	r0, r7
   10dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10dd8:	e3051570 	movw	r1, #21872	; 0x5570
   10ddc:	e3401001 	movt	r1, #1
   10de0:	e3050584 	movw	r0, #21892	; 0x5584
   10de4:	e3400001 	movt	r0, #1
   10de8:	e3a0205e 	mov	r2, #94	; 0x5e
   10dec:	eb0004eb 	bl	121a0 <assertion_failed>
   10df0:	e3a02000 	mov	r2, #0
   10df4:	e1530002 	cmp	r3, r2
   10df8:	e586200c 	str	r2, [r6, #12]
   10dfc:	0a000000 	beq	10e04 <CHeapAllocator::Allocate(unsigned int)+0x1d0>
   10e00:	eb00033f 	bl	11b04 <LeaveCritical>
   10e04:	ebffe5d1 	bl	a550 <CLogger::Get()>
   10e08:	e5961000 	ldr	r1, [r6]
   10e0c:	e3a02000 	mov	r2, #0
   10e10:	e30535b0 	movw	r3, #21936	; 0x55b0
   10e14:	e3403001 	movt	r3, #1
   10e18:	ebffe509 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e1c:	e3a00000 	mov	r0, #0
   10e20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10e24:	e3a00000 	mov	r0, #0
   10e28:	e12fff1e 	bx	lr

00010e2c <CHeapAllocator::Free(void*)>:
   10e2c:	e3510000 	cmp	r1, #0
   10e30:	012fff1e 	bxeq	lr
   10e34:	e92d4070 	push	{r4, r5, r6, lr}
   10e38:	e2415040 	sub	r5, r1, #64	; 0x40
   10e3c:	e5513040 	ldrb	r3, [r1, #-64]	; 0xffffffc0
   10e40:	e5d5c001 	ldrb	ip, [r5, #1]
   10e44:	e1a06000 	mov	r6, r0
   10e48:	e5d50002 	ldrb	r0, [r5, #2]
   10e4c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10e50:	e344224c 	movt	r2, #16972	; 0x424c
   10e54:	e183340c 	orr	r3, r3, ip, lsl #8
   10e58:	e5d51003 	ldrb	r1, [r5, #3]
   10e5c:	e1833800 	orr	r3, r3, r0, lsl #16
   10e60:	e1833c01 	orr	r3, r3, r1, lsl #24
   10e64:	e1530002 	cmp	r3, r2
   10e68:	1a00002f 	bne	10f2c <CHeapAllocator::Free(void*)+0x100>
   10e6c:	e5963010 	ldr	r3, [r6, #16]
   10e70:	e2864010 	add	r4, r6, #16
   10e74:	e3530000 	cmp	r3, #0
   10e78:	08bd8070 	popeq	{r4, r5, r6, pc}
   10e7c:	e5d52004 	ldrb	r2, [r5, #4]
   10e80:	e5d5c005 	ldrb	ip, [r5, #5]
   10e84:	e5d50006 	ldrb	r0, [r5, #6]
   10e88:	e5d51007 	ldrb	r1, [r5, #7]
   10e8c:	e182240c 	orr	r2, r2, ip, lsl #8
   10e90:	e1822800 	orr	r2, r2, r0, lsl #16
   10e94:	e1822c01 	orr	r2, r2, r1, lsl #24
   10e98:	e1530002 	cmp	r3, r2
   10e9c:	1a000002 	bne	10eac <CHeapAllocator::Free(void*)+0x80>
   10ea0:	ea000005 	b	10ebc <CHeapAllocator::Free(void*)+0x90>
   10ea4:	e1520003 	cmp	r2, r3
   10ea8:	0a000003 	beq	10ebc <CHeapAllocator::Free(void*)+0x90>
   10eac:	e5b43008 	ldr	r3, [r4, #8]!
   10eb0:	e3530000 	cmp	r3, #0
   10eb4:	1afffffa 	bne	10ea4 <CHeapAllocator::Free(void*)+0x78>
   10eb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ebc:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   10ec0:	e3500000 	cmp	r0, #0
   10ec4:	1a000009 	bne	10ef0 <CHeapAllocator::Free(void*)+0xc4>
   10ec8:	e5d40004 	ldrb	r0, [r4, #4]
   10ecc:	e5d41005 	ldrb	r1, [r4, #5]
   10ed0:	e5d42006 	ldrb	r2, [r4, #6]
   10ed4:	e5d43007 	ldrb	r3, [r4, #7]
   10ed8:	e5c50008 	strb	r0, [r5, #8]
   10edc:	e5c51009 	strb	r1, [r5, #9]
   10ee0:	e5c5200a 	strb	r2, [r5, #10]
   10ee4:	e5c5300b 	strb	r3, [r5, #11]
   10ee8:	e5845004 	str	r5, [r4, #4]
   10eec:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ef0:	eb0002d6 	bl	11a50 <EnterCritical>
   10ef4:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   10ef8:	e5d40004 	ldrb	r0, [r4, #4]
   10efc:	e3530000 	cmp	r3, #0
   10f00:	e5d41005 	ldrb	r1, [r4, #5]
   10f04:	e5d42006 	ldrb	r2, [r4, #6]
   10f08:	e5d43007 	ldrb	r3, [r4, #7]
   10f0c:	e5c50008 	strb	r0, [r5, #8]
   10f10:	e5c51009 	strb	r1, [r5, #9]
   10f14:	e5c5200a 	strb	r2, [r5, #10]
   10f18:	e5c5300b 	strb	r3, [r5, #11]
   10f1c:	e5845004 	str	r5, [r4, #4]
   10f20:	08bd8070 	popeq	{r4, r5, r6, pc}
   10f24:	e8bd4070 	pop	{r4, r5, r6, lr}
   10f28:	ea0002f5 	b	11b04 <LeaveCritical>
   10f2c:	e3051570 	movw	r1, #21872	; 0x5570
   10f30:	e3401001 	movt	r1, #1
   10f34:	e3050584 	movw	r0, #21892	; 0x5584
   10f38:	e3400001 	movt	r0, #1
   10f3c:	e3a020bf 	mov	r2, #191	; 0xbf
   10f40:	eb000496 	bl	121a0 <assertion_failed>

00010f44 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   10f44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10f48:	e2515000 	subs	r5, r1, #0
   10f4c:	e24dd00c 	sub	sp, sp, #12
   10f50:	0a000034 	beq	11028 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe4>
   10f54:	e3520000 	cmp	r2, #0
   10f58:	0a000036 	beq	11038 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xf4>
   10f5c:	e2454040 	sub	r4, r5, #64	; 0x40
   10f60:	e5553040 	ldrb	r3, [r5, #-64]	; 0xffffffc0
   10f64:	e5d4c001 	ldrb	ip, [r4, #1]
   10f68:	e3041d43 	movw	r1, #19779	; 0x4d43
   10f6c:	e344124c 	movt	r1, #16972	; 0x424c
   10f70:	e5d4e002 	ldrb	lr, [r4, #2]
   10f74:	e183340c 	orr	r3, r3, ip, lsl #8
   10f78:	e5d4c003 	ldrb	ip, [r4, #3]
   10f7c:	e183380e 	orr	r3, r3, lr, lsl #16
   10f80:	e1833c0c 	orr	r3, r3, ip, lsl #24
   10f84:	e1530001 	cmp	r3, r1
   10f88:	1a000020 	bne	11010 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xcc>
   10f8c:	e5d41005 	ldrb	r1, [r4, #5]
   10f90:	e5d43004 	ldrb	r3, [r4, #4]
   10f94:	e5d4c006 	ldrb	ip, [r4, #6]
   10f98:	e1833401 	orr	r3, r3, r1, lsl #8
   10f9c:	e5d41007 	ldrb	r1, [r4, #7]
   10fa0:	e183380c 	orr	r3, r3, ip, lsl #16
   10fa4:	e1833c01 	orr	r3, r3, r1, lsl #24
   10fa8:	e1520003 	cmp	r2, r3
   10fac:	8a000002 	bhi	10fbc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   10fb0:	e1a00005 	mov	r0, r5
   10fb4:	e28dd00c 	add	sp, sp, #12
   10fb8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10fbc:	e1a01002 	mov	r1, r2
   10fc0:	e1a06000 	mov	r6, r0
   10fc4:	ebffff1a 	bl	10c34 <CHeapAllocator::Allocate(unsigned int)>
   10fc8:	e2507000 	subs	r7, r0, #0
   10fcc:	0a00001e 	beq	1104c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x108>
   10fd0:	e5d4e005 	ldrb	lr, [r4, #5]
   10fd4:	e1a01005 	mov	r1, r5
   10fd8:	e5d43004 	ldrb	r3, [r4, #4]
   10fdc:	e5d4c006 	ldrb	ip, [r4, #6]
   10fe0:	e5d42007 	ldrb	r2, [r4, #7]
   10fe4:	e183340e 	orr	r3, r3, lr, lsl #8
   10fe8:	e183380c 	orr	r3, r3, ip, lsl #16
   10fec:	e1832c02 	orr	r2, r3, r2, lsl #24
   10ff0:	ebfffdd8 	bl	10758 <memcpy>
   10ff4:	e1a01005 	mov	r1, r5
   10ff8:	e1a00006 	mov	r0, r6
   10ffc:	e1a05007 	mov	r5, r7
   11000:	ebffff89 	bl	10e2c <CHeapAllocator::Free(void*)>
   11004:	e1a00005 	mov	r0, r5
   11008:	e28dd00c 	add	sp, sp, #12
   1100c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11010:	e3051570 	movw	r1, #21872	; 0x5570
   11014:	e3401001 	movt	r1, #1
   11018:	e3050584 	movw	r0, #21892	; 0x5584
   1101c:	e3400001 	movt	r0, #1
   11020:	e3a020a3 	mov	r2, #163	; 0xa3
   11024:	eb00045d 	bl	121a0 <assertion_failed>
   11028:	e1a01002 	mov	r1, r2
   1102c:	e28dd00c 	add	sp, sp, #12
   11030:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   11034:	eafffefe 	b	10c34 <CHeapAllocator::Allocate(unsigned int)>
   11038:	e58d2004 	str	r2, [sp, #4]
   1103c:	ebffff7a 	bl	10e2c <CHeapAllocator::Free(void*)>
   11040:	e59d2004 	ldr	r2, [sp, #4]
   11044:	e1a05002 	mov	r5, r2
   11048:	eaffffd8 	b	10fb0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   1104c:	e1a05007 	mov	r5, r7
   11050:	eaffffd6 	b	10fb0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>

00011054 <InvalidateDataCacheL1Only>:
   11054:	e92d0070 	push	{r4, r5, r6}
   11058:	e3a00000 	mov	r0, #0
   1105c:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   11060:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   11064:	e3071fff 	movw	r1, #32767	; 0x7fff
   11068:	e00126a0 	and	r2, r1, r0, lsr #13
   1106c:	e30013ff 	movw	r1, #1023	; 0x3ff
   11070:	e00131a0 	and	r3, r1, r0, lsr #3
   11074:	e2822001 	add	r2, r2, #1
   11078:	e2000007 	and	r0, r0, #7
   1107c:	e2800004 	add	r0, r0, #4
   11080:	e16f1f13 	clz	r1, r3
   11084:	e2834001 	add	r4, r3, #1
   11088:	e2422001 	sub	r2, r2, #1
   1108c:	e1a03004 	mov	r3, r4
   11090:	e2533001 	subs	r3, r3, #1
   11094:	e1a05113 	lsl	r5, r3, r1
   11098:	e1a06012 	lsl	r6, r2, r0
   1109c:	e1855006 	orr	r5, r5, r6
   110a0:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   110a4:	cafffff9 	bgt	11090 <InvalidateDataCacheL1Only+0x3c>
   110a8:	e3520000 	cmp	r2, #0
   110ac:	cafffff5 	bgt	11088 <InvalidateDataCacheL1Only+0x34>
   110b0:	f57ff04e 	dsb	st
   110b4:	f57ff06f 	isb	sy
   110b8:	e8bd0070 	pop	{r4, r5, r6}
   110bc:	e12fff1e 	bx	lr

000110c0 <InvalidateDataCache>:
   110c0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   110c4:	f57ff05f 	dmb	sy
   110c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   110cc:	e1a03ba0 	lsr	r3, r0, #23
   110d0:	e213300e 	ands	r3, r3, #14
   110d4:	0a00001d 	beq	11150 <InvalidateDataCache+0x90>
   110d8:	e3a0a000 	mov	sl, #0
   110dc:	e08a20aa 	add	r2, sl, sl, lsr #1
   110e0:	e1a01230 	lsr	r1, r0, r2
   110e4:	e2011007 	and	r1, r1, #7
   110e8:	e3510002 	cmp	r1, #2
   110ec:	ba000014 	blt	11144 <InvalidateDataCache+0x84>
   110f0:	e10f9000 	mrs	r9, CPSR
   110f4:	f10c0080 	cpsid	i
   110f8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   110fc:	f57ff06f 	isb	sy
   11100:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   11104:	e121f009 	msr	CPSR_c, r9
   11108:	e2012007 	and	r2, r1, #7
   1110c:	e2822004 	add	r2, r2, #4
   11110:	e30043ff 	movw	r4, #1023	; 0x3ff
   11114:	e01441a1 	ands	r4, r4, r1, lsr #3
   11118:	e16f5f14 	clz	r5, r4
   1111c:	e3077fff 	movw	r7, #32767	; 0x7fff
   11120:	e01776a1 	ands	r7, r7, r1, lsr #13
   11124:	e1a09007 	mov	r9, r7
   11128:	e18ab514 	orr	fp, sl, r4, lsl r5
   1112c:	e18bb219 	orr	fp, fp, r9, lsl r2
   11130:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   11134:	e2599001 	subs	r9, r9, #1
   11138:	aafffffa 	bge	11128 <InvalidateDataCache+0x68>
   1113c:	e2544001 	subs	r4, r4, #1
   11140:	aafffff7 	bge	11124 <InvalidateDataCache+0x64>
   11144:	e28aa002 	add	sl, sl, #2
   11148:	e153000a 	cmp	r3, sl
   1114c:	caffffe2 	bgt	110dc <InvalidateDataCache+0x1c>
   11150:	e3a0a000 	mov	sl, #0
   11154:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11158:	f57ff04e 	dsb	st
   1115c:	f57ff06f 	isb	sy
   11160:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   11164:	e12fff1e 	bx	lr

00011168 <CleanDataCache>:
   11168:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   1116c:	f57ff05f 	dmb	sy
   11170:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   11174:	e1a03ba0 	lsr	r3, r0, #23
   11178:	e213300e 	ands	r3, r3, #14
   1117c:	0a00001d 	beq	111f8 <CleanDataCache+0x90>
   11180:	e3a0a000 	mov	sl, #0
   11184:	e08a20aa 	add	r2, sl, sl, lsr #1
   11188:	e1a01230 	lsr	r1, r0, r2
   1118c:	e2011007 	and	r1, r1, #7
   11190:	e3510002 	cmp	r1, #2
   11194:	ba000014 	blt	111ec <CleanDataCache+0x84>
   11198:	e10f9000 	mrs	r9, CPSR
   1119c:	f10c0080 	cpsid	i
   111a0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   111a4:	f57ff06f 	isb	sy
   111a8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   111ac:	e121f009 	msr	CPSR_c, r9
   111b0:	e2012007 	and	r2, r1, #7
   111b4:	e2822004 	add	r2, r2, #4
   111b8:	e30043ff 	movw	r4, #1023	; 0x3ff
   111bc:	e01441a1 	ands	r4, r4, r1, lsr #3
   111c0:	e16f5f14 	clz	r5, r4
   111c4:	e3077fff 	movw	r7, #32767	; 0x7fff
   111c8:	e01776a1 	ands	r7, r7, r1, lsr #13
   111cc:	e1a09007 	mov	r9, r7
   111d0:	e18ab514 	orr	fp, sl, r4, lsl r5
   111d4:	e18bb219 	orr	fp, fp, r9, lsl r2
   111d8:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   111dc:	e2599001 	subs	r9, r9, #1
   111e0:	aafffffa 	bge	111d0 <CleanDataCache+0x68>
   111e4:	e2544001 	subs	r4, r4, #1
   111e8:	aafffff7 	bge	111cc <CleanDataCache+0x64>
   111ec:	e28aa002 	add	sl, sl, #2
   111f0:	e153000a 	cmp	r3, sl
   111f4:	caffffe2 	bgt	11184 <CleanDataCache+0x1c>
   111f8:	e3a0a000 	mov	sl, #0
   111fc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11200:	f57ff04e 	dsb	st
   11204:	f57ff06f 	isb	sy
   11208:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   1120c:	e12fff1e 	bx	lr

00011210 <CleanAndInvalidateDataCacheRange>:
   11210:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   11214:	e1a03823 	lsr	r3, r3, #16
   11218:	e203300f 	and	r3, r3, #15
   1121c:	e3a02004 	mov	r2, #4
   11220:	e1a02312 	lsl	r2, r2, r3
   11224:	e0801001 	add	r1, r0, r1
   11228:	e2423001 	sub	r3, r2, #1
   1122c:	e1c00003 	bic	r0, r0, r3
   11230:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11234:	e0800002 	add	r0, r0, r2
   11238:	e1500001 	cmp	r0, r1
   1123c:	3afffffb 	bcc	11230 <CleanAndInvalidateDataCacheRange+0x20>
   11240:	f57ff04e 	dsb	st
   11244:	e12fff1e 	bx	lr

00011248 <CExceptionHandler::~CExceptionHandler()>:
   11248:	e3073298 	movw	r3, #29336	; 0x7298
   1124c:	e3403001 	movt	r3, #1
   11250:	e3a02000 	mov	r2, #0
   11254:	e5832000 	str	r2, [r3]
   11258:	e12fff1e 	bx	lr

0001125c <CExceptionHandler::~CExceptionHandler()>:
   1125c:	e3073298 	movw	r3, #29336	; 0x7298
   11260:	e3403001 	movt	r3, #1
   11264:	e92d4010 	push	{r4, lr}
   11268:	e3a02000 	mov	r2, #0
   1126c:	e1a04000 	mov	r4, r0
   11270:	e3a01004 	mov	r1, #4
   11274:	e5832000 	str	r2, [r3]
   11278:	ebfffe47 	bl	10b9c <operator delete(void*, unsigned int)>
   1127c:	e1a00004 	mov	r0, r4
   11280:	e8bd8010 	pop	{r4, pc}

00011284 <CExceptionHandler::Throw(unsigned int)>:
   11284:	e92d4010 	push	{r4, lr}
   11288:	e1a04001 	mov	r4, r1
   1128c:	e24dd008 	sub	sp, sp, #8
   11290:	ebffe4ae 	bl	a550 <CLogger::Get()>
   11294:	e307221c 	movw	r2, #29212	; 0x721c
   11298:	e3402001 	movt	r2, #1
   1129c:	e305360c 	movw	r3, #22028	; 0x560c
   112a0:	e3403001 	movt	r3, #1
   112a4:	e30515ec 	movw	r1, #21996	; 0x55ec
   112a8:	e3401001 	movt	r1, #1
   112ac:	e792c104 	ldr	ip, [r2, r4, lsl #2]
   112b0:	e3a02000 	mov	r2, #0
   112b4:	e58dc000 	str	ip, [sp]
   112b8:	ebffe3e1 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   112bc:	e28dd008 	add	sp, sp, #8
   112c0:	e8bd8010 	pop	{r4, pc}

000112c4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   112c4:	e3510002 	cmp	r1, #2
   112c8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   112cc:	e1a05001 	mov	r5, r1
   112d0:	e24dd024 	sub	sp, sp, #36	; 0x24
   112d4:	e1a04002 	mov	r4, r2
   112d8:	0a000030 	beq	113a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   112dc:	e3510003 	cmp	r1, #3
   112e0:	0a000024 	beq	11378 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   112e4:	e3a07000 	mov	r7, #0
   112e8:	e1a08007 	mov	r8, r7
   112ec:	e3540000 	cmp	r4, #0
   112f0:	0a000024 	beq	11388 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   112f4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   112f8:	e5949048 	ldr	r9, [r4, #72]	; 0x48
   112fc:	e203301f 	and	r3, r3, #31
   11300:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   11304:	e3530011 	cmp	r3, #17
   11308:	0a000027 	beq	113ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   1130c:	e3530012 	cmp	r3, #18
   11310:	08940240 	ldmeq	r4, {r6, r9}
   11314:	e1a00006 	mov	r0, r6
   11318:	e30515ec 	movw	r1, #21996	; 0x55ec
   1131c:	e3401001 	movt	r1, #1
   11320:	eb0005fe 	bl	12b20 <debug_stacktrace(unsigned int const*, char const*)>
   11324:	ebffe489 	bl	a550 <CLogger::Get()>
   11328:	e307321c 	movw	r3, #29212	; 0x721c
   1132c:	e3403001 	movt	r3, #1
   11330:	e594e04c 	ldr	lr, [r4, #76]	; 0x4c
   11334:	e3a02000 	mov	r2, #0
   11338:	e594c050 	ldr	ip, [r4, #80]	; 0x50
   1133c:	e30515ec 	movw	r1, #21996	; 0x55ec
   11340:	e3401001 	movt	r1, #1
   11344:	e7934105 	ldr	r4, [r3, r5, lsl #2]
   11348:	e3053640 	movw	r3, #22080	; 0x5640
   1134c:	e3403001 	movt	r3, #1
   11350:	e58d9014 	str	r9, [sp, #20]
   11354:	e58d6010 	str	r6, [sp, #16]
   11358:	e58d700c 	str	r7, [sp, #12]
   1135c:	e58d8008 	str	r8, [sp, #8]
   11360:	e58d4000 	str	r4, [sp]
   11364:	e58de018 	str	lr, [sp, #24]
   11368:	e58dc004 	str	ip, [sp, #4]
   1136c:	ebffe3b4 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11370:	e28dd024 	add	sp, sp, #36	; 0x24
   11374:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11378:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   1137c:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   11380:	e3540000 	cmp	r4, #0
   11384:	1affffda 	bne	112f4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   11388:	e305161c 	movw	r1, #22044	; 0x561c
   1138c:	e3401001 	movt	r1, #1
   11390:	e3050634 	movw	r0, #22068	; 0x5634
   11394:	e3400001 	movt	r0, #1
   11398:	e3a02069 	mov	r2, #105	; 0x69
   1139c:	eb00037f 	bl	121a0 <assertion_failed>
   113a0:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   113a4:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   113a8:	eaffffcf 	b	112ec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   113ac:	e594900c 	ldr	r9, [r4, #12]
   113b0:	e5946008 	ldr	r6, [r4, #8]
   113b4:	eaffffd6 	b	11314 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

000113b8 <CExceptionHandler::Get() [clone .part.1]>:
   113b8:	e305161c 	movw	r1, #22044	; 0x561c
   113bc:	e3401001 	movt	r1, #1
   113c0:	e3050500 	movw	r0, #21760	; 0x5500
   113c4:	e3400001 	movt	r0, #1
   113c8:	e92d4010 	push	{r4, lr}
   113cc:	e3a02087 	mov	r2, #135	; 0x87
   113d0:	eb000372 	bl	121a0 <assertion_failed>

000113d4 <CExceptionHandler::CExceptionHandler()>:
   113d4:	e92d4070 	push	{r4, r5, r6, lr}
   113d8:	e3075298 	movw	r5, #29336	; 0x7298
   113dc:	e3405001 	movt	r5, #1
   113e0:	e59f20ac 	ldr	r2, [pc, #172]	; 11494 <CExceptionHandler::CExceptionHandler()+0xc0>
   113e4:	e24dd008 	sub	sp, sp, #8
   113e8:	e5953000 	ldr	r3, [r5]
   113ec:	e5802000 	str	r2, [r0]
   113f0:	e3530000 	cmp	r3, #0
   113f4:	1a000020 	bne	1147c <CExceptionHandler::CExceptionHandler()+0xa8>
   113f8:	e3a03004 	mov	r3, #4
   113fc:	e1a04000 	mov	r4, r0
   11400:	e58d3004 	str	r3, [sp, #4]
   11404:	e3013628 	movw	r3, #5672	; 0x1628
   11408:	e3403001 	movt	r3, #1
   1140c:	e59dc004 	ldr	ip, [sp, #4]
   11410:	e59f1080 	ldr	r1, [pc, #128]	; 11498 <CExceptionHandler::CExceptionHandler()+0xc4>
   11414:	e59de004 	ldr	lr, [sp, #4]
   11418:	e59d0004 	ldr	r0, [sp, #4]
   1141c:	e59d6004 	ldr	r6, [sp, #4]
   11420:	e043300e 	sub	r3, r3, lr
   11424:	e59f2070 	ldr	r2, [pc, #112]	; 1149c <CExceptionHandler::CExceptionHandler()+0xc8>
   11428:	e59de004 	ldr	lr, [sp, #4]
   1142c:	e0411006 	sub	r1, r1, r6
   11430:	e59d6004 	ldr	r6, [sp, #4]
   11434:	e1a03143 	asr	r3, r3, #2
   11438:	e1a01141 	asr	r1, r1, #2
   1143c:	e2433002 	sub	r3, r3, #2
   11440:	e0422006 	sub	r2, r2, r6
   11444:	e2411002 	sub	r1, r1, #2
   11448:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1144c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   11450:	e1a02142 	asr	r2, r2, #2
   11454:	e5854000 	str	r4, [r5]
   11458:	e2422002 	sub	r2, r2, #2
   1145c:	e58c3000 	str	r3, [ip]
   11460:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11464:	e5801008 	str	r1, [r0, #8]
   11468:	e58e200c 	str	r2, [lr, #12]
   1146c:	eb0001b9 	bl	11b58 <SyncDataAndInstructionCache>
   11470:	e1a00004 	mov	r0, r4
   11474:	e28dd008 	add	sp, sp, #8
   11478:	e8bd8070 	pop	{r4, r5, r6, pc}
   1147c:	e305161c 	movw	r1, #22044	; 0x561c
   11480:	e3401001 	movt	r1, #1
   11484:	e305034c 	movw	r0, #21324	; 0x534c
   11488:	e3400001 	movt	r0, #1
   1148c:	e3a02030 	mov	r2, #48	; 0x30
   11490:	eb000342 	bl	121a0 <assertion_failed>
   11494:	000155fc 	.word	0x000155fc
   11498:	00011580 	.word	0x00011580
   1149c:	000115cc 	.word	0x000115cc

000114a0 <CExceptionHandler::Get()>:
   114a0:	e3073298 	movw	r3, #29336	; 0x7298
   114a4:	e3403001 	movt	r3, #1
   114a8:	e5930000 	ldr	r0, [r3]
   114ac:	e3500000 	cmp	r0, #0
   114b0:	0a000000 	beq	114b8 <CExceptionHandler::Get()+0x18>
   114b4:	e12fff1e 	bx	lr
   114b8:	e92d4010 	push	{r4, lr}
   114bc:	ebffffbd 	bl	113b8 <CExceptionHandler::Get() [clone .part.1]>

000114c0 <ExceptionHandler>:
   114c0:	e92d4070 	push	{r4, r5, r6, lr}
   114c4:	e1a04000 	mov	r4, r0
   114c8:	e1a05001 	mov	r5, r1
   114cc:	eb0002cd 	bl	12008 <CInterruptSystem::DisableFIQ()>
   114d0:	f1080040 	cpsie	f
   114d4:	e3073298 	movw	r3, #29336	; 0x7298
   114d8:	e3403001 	movt	r3, #1
   114dc:	e5930000 	ldr	r0, [r3]
   114e0:	e3500000 	cmp	r0, #0
   114e4:	0a000005 	beq	11500 <ExceptionHandler+0x40>
   114e8:	e590c000 	ldr	ip, [r0]
   114ec:	e1a02005 	mov	r2, r5
   114f0:	e1a01004 	mov	r1, r4
   114f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   114f8:	e59c300c 	ldr	r3, [ip, #12]
   114fc:	e12fff13 	bx	r3
   11500:	ebffffac 	bl	113b8 <CExceptionHandler::Get() [clone .part.1]>

00011504 <raise>:
   11504:	e3073298 	movw	r3, #29336	; 0x7298
   11508:	e3403001 	movt	r3, #1
   1150c:	e92d4010 	push	{r4, lr}
   11510:	e5930000 	ldr	r0, [r3]
   11514:	e3500000 	cmp	r0, #0
   11518:	0a000005 	beq	11534 <raise+0x30>
   1151c:	e5903000 	ldr	r3, [r0]
   11520:	e3a01004 	mov	r1, #4
   11524:	e5933008 	ldr	r3, [r3, #8]
   11528:	e12fff33 	blx	r3
   1152c:	e3a00000 	mov	r0, #0
   11530:	e8bd8010 	pop	{r4, pc}
   11534:	ebffff9f 	bl	113b8 <CExceptionHandler::Get() [clone .part.1]>

00011538 <UndefinedInstructionInternal>:
   11538:	e24dd004 	sub	sp, sp, #4
   1153c:	e24ee004 	sub	lr, lr, #4
   11540:	e92d4000 	stmfd	sp!, {lr}
   11544:	e14fe000 	mrs	lr, SPSR
   11548:	e92d4000 	stmfd	sp!, {lr}
   1154c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11550:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11554:	e1a0100d 	mov	r1, sp
   11558:	f1020012 	cps	#18
   1155c:	e1a0200d 	mov	r2, sp
   11560:	e1a0300e 	mov	r3, lr
   11564:	f1020011 	cps	#17
   11568:	e1a0400d 	mov	r4, sp
   1156c:	e1a0500e 	mov	r5, lr
   11570:	f102001f 	cps	#31
   11574:	e1a0d001 	mov	sp, r1
   11578:	e92d003c 	push	{r2, r3, r4, r5}
   1157c:	e1a0100d 	mov	r1, sp
   11580:	e3a00001 	mov	r0, #1
   11584:	eaffffcd 	b	114c0 <ExceptionHandler>

00011588 <PrefetchAbortStub>:
   11588:	e24dd004 	sub	sp, sp, #4
   1158c:	e24ee004 	sub	lr, lr, #4
   11590:	e92d4000 	stmfd	sp!, {lr}
   11594:	e14fe000 	mrs	lr, SPSR
   11598:	e92d4000 	stmfd	sp!, {lr}
   1159c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   115a0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   115a4:	e1a0100d 	mov	r1, sp
   115a8:	f1020012 	cps	#18
   115ac:	e1a0200d 	mov	r2, sp
   115b0:	e1a0300e 	mov	r3, lr
   115b4:	f1020011 	cps	#17
   115b8:	e1a0400d 	mov	r4, sp
   115bc:	e1a0500e 	mov	r5, lr
   115c0:	f102001f 	cps	#31
   115c4:	e1a0d001 	mov	sp, r1
   115c8:	e92d003c 	push	{r2, r3, r4, r5}
   115cc:	e1a0100d 	mov	r1, sp
   115d0:	e3a00002 	mov	r0, #2
   115d4:	eaffffb9 	b	114c0 <ExceptionHandler>

000115d8 <DataAbortStub>:
   115d8:	e24dd004 	sub	sp, sp, #4
   115dc:	e24ee008 	sub	lr, lr, #8
   115e0:	e92d4000 	stmfd	sp!, {lr}
   115e4:	e14fe000 	mrs	lr, SPSR
   115e8:	e92d4000 	stmfd	sp!, {lr}
   115ec:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   115f0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   115f4:	e1a0100d 	mov	r1, sp
   115f8:	f1020012 	cps	#18
   115fc:	e1a0200d 	mov	r2, sp
   11600:	e1a0300e 	mov	r3, lr
   11604:	f1020011 	cps	#17
   11608:	e1a0400d 	mov	r4, sp
   1160c:	e1a0500e 	mov	r5, lr
   11610:	f102001f 	cps	#31
   11614:	e1a0d001 	mov	sp, r1
   11618:	e92d003c 	push	{r2, r3, r4, r5}
   1161c:	e1a0100d 	mov	r1, sp
   11620:	e3a00003 	mov	r0, #3
   11624:	eaffffa5 	b	114c0 <ExceptionHandler>

00011628 <UndefinedInstructionStub>:
   11628:	e92d4001 	push	{r0, lr}
   1162c:	eef80a10 	vmrs	r0, fpexc
   11630:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   11634:	0affffbf 	beq	11538 <UndefinedInstructionInternal>
   11638:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   1163c:	eee80a10 	vmsr	fpexc, r0
   11640:	e8fd8001 	ldm	sp!, {r0, pc}^

00011644 <IRQStub>:
   11644:	e24ee004 	sub	lr, lr, #4
   11648:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   1164c:	e59f003c 	ldr	r0, [pc, #60]	; 11690 <FIQStub+0x34>
   11650:	e580e000 	str	lr, [r0]
   11654:	eb0002d0 	bl	1219c <InterruptHandler>
   11658:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0001165c <FIQStub>:
   1165c:	e24ee004 	sub	lr, lr, #4
   11660:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11664:	e59f2028 	ldr	r2, [pc, #40]	; 11694 <FIQStub+0x38>
   11668:	e5921000 	ldr	r1, [r2]
   1166c:	e3510000 	cmp	r1, #0
   11670:	0a000002 	beq	11680 <FIQStub+0x24>
   11674:	e5920004 	ldr	r0, [r2, #4]
   11678:	e12fff31 	blx	r1
   1167c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11680:	e59f1010 	ldr	r1, [pc, #16]	; 11698 <FIQStub+0x3c>
   11684:	e3a00000 	mov	r0, #0
   11688:	e5810000 	str	r0, [r1]
   1168c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11690:	0001723c 	.word	0x0001723c
   11694:	00017230 	.word	0x00017230
   11698:	3f00b20c 	.word	0x3f00b20c

0001169c <CMemorySystem::CMemorySystem(bool)>:
   1169c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   116a0:	e1a04000 	mov	r4, r0
   116a4:	e3a05000 	mov	r5, #0
   116a8:	e280700c 	add	r7, r0, #12
   116ac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   116b0:	e28060c8 	add	r6, r0, #200	; 0xc8
   116b4:	e5c41000 	strb	r1, [r4]
   116b8:	e5845004 	str	r5, [r4, #4]
   116bc:	e1a00007 	mov	r0, r7
   116c0:	e5845008 	str	r5, [r4, #8]
   116c4:	e30516d0 	movw	r1, #22224	; 0x56d0
   116c8:	e3401001 	movt	r1, #1
   116cc:	ebfffd39 	bl	10bb8 <CHeapAllocator::CHeapAllocator(char const*)>
   116d0:	e1a00006 	mov	r0, r6
   116d4:	eb000aeb 	bl	14288 <CPageAllocator::CPageAllocator()>
   116d8:	e307329c 	movw	r3, #29340	; 0x729c
   116dc:	e3403001 	movt	r3, #1
   116e0:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   116e4:	e5935000 	ldr	r5, [r3]
   116e8:	e3550000 	cmp	r5, #0
   116ec:	0a000002 	beq	116fc <CMemorySystem::CMemorySystem(bool)+0x60>
   116f0:	e1a00004 	mov	r0, r4
   116f4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   116f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   116fc:	e3a01001 	mov	r1, #1
   11700:	e28d000c 	add	r0, sp, #12
   11704:	e5834000 	str	r4, [r3]
   11708:	eb00040c 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1170c:	e3a03014 	mov	r3, #20
   11710:	e58d5000 	str	r5, [sp]
   11714:	e28d000c 	add	r0, sp, #12
   11718:	e3a01005 	mov	r1, #5
   1171c:	e3401001 	movt	r1, #1
   11720:	e08d2003 	add	r2, sp, r3
   11724:	eb000411 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11728:	e3500000 	cmp	r0, #0
   1172c:	0a00001c 	beq	117a4 <CMemorySystem::CMemorySystem(bool)+0x108>
   11730:	e59d3020 	ldr	r3, [sp, #32]
   11734:	e3530000 	cmp	r3, #0
   11738:	1a00001f 	bne	117bc <CMemorySystem::CMemorySystem(bool)+0x120>
   1173c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11740:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   11744:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   11748:	e5843004 	str	r3, [r4, #4]
   1174c:	e1a00007 	mov	r0, r7
   11750:	e3a03701 	mov	r3, #262144	; 0x40000
   11754:	e3a01605 	mov	r1, #5242880	; 0x500000
   11758:	ebfffd2f 	bl	10c1c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   1175c:	e1a01005 	mov	r1, r5
   11760:	e1a00006 	mov	r0, r6
   11764:	e3a02501 	mov	r2, #4194304	; 0x400000
   11768:	eb000ace 	bl	142a8 <CPageAllocator::Setup(unsigned int, unsigned int)>
   1176c:	e5d43000 	ldrb	r3, [r4]
   11770:	e3530000 	cmp	r3, #0
   11774:	0a000007 	beq	11798 <CMemorySystem::CMemorySystem(bool)+0xfc>
   11778:	e3a00004 	mov	r0, #4
   1177c:	ebfffcf8 	bl	10b64 <operator new(unsigned int)>
   11780:	e5941004 	ldr	r1, [r4, #4]
   11784:	e1a05000 	mov	r5, r0
   11788:	eb000081 	bl	11994 <CPageTable::CPageTable(unsigned int)>
   1178c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11790:	e1a00004 	mov	r0, r4
   11794:	eb000046 	bl	118b4 <CMemorySystem::EnableMMU()>
   11798:	e28d000c 	add	r0, sp, #12
   1179c:	eb0003ee 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   117a0:	eaffffd2 	b	116f0 <CMemorySystem::CMemorySystem(bool)+0x54>
   117a4:	e3a03303 	mov	r3, #201326592	; 0xc000000
   117a8:	e58d0020 	str	r0, [sp, #32]
   117ac:	e58d3024 	str	r3, [sp, #36]	; 0x24
   117b0:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   117b4:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   117b8:	eaffffe2 	b	11748 <CMemorySystem::CMemorySystem(bool)+0xac>
   117bc:	e59f1008 	ldr	r1, [pc, #8]	; 117cc <CMemorySystem::CMemorySystem(bool)+0x130>
   117c0:	e3a0204e 	mov	r2, #78	; 0x4e
   117c4:	e281000c 	add	r0, r1, #12
   117c8:	eb000274 	bl	121a0 <assertion_failed>
   117cc:	000156d8 	.word	0x000156d8

000117d0 <CMemorySystem::~CMemorySystem()>:
   117d0:	e307329c 	movw	r3, #29340	; 0x729c
   117d4:	e3403001 	movt	r3, #1
   117d8:	e92d4010 	push	{r4, lr}
   117dc:	e1a04000 	mov	r4, r0
   117e0:	e5932000 	ldr	r2, [r3]
   117e4:	e1500002 	cmp	r0, r2
   117e8:	0a000005 	beq	11804 <CMemorySystem::~CMemorySystem()+0x34>
   117ec:	e28400c8 	add	r0, r4, #200	; 0xc8
   117f0:	eb000aab 	bl	142a4 <CPageAllocator::~CPageAllocator()>
   117f4:	e284000c 	add	r0, r4, #12
   117f8:	ebfffd06 	bl	10c18 <CHeapAllocator::~CHeapAllocator()>
   117fc:	e1a00004 	mov	r0, r4
   11800:	e8bd8010 	pop	{r4, pc}
   11804:	e5d02000 	ldrb	r2, [r0]
   11808:	e3a01000 	mov	r1, #0
   1180c:	e5831000 	str	r1, [r3]
   11810:	e1520001 	cmp	r2, r1
   11814:	0afffff4 	beq	117ec <CMemorySystem::~CMemorySystem()+0x1c>
   11818:	eb000053 	bl	1196c <CMemorySystem::Destructor() [clone .part.0]>
   1181c:	eafffff2 	b	117ec <CMemorySystem::~CMemorySystem()+0x1c>

00011820 <CMemorySystem::Destructor()>:
   11820:	e307329c 	movw	r3, #29340	; 0x729c
   11824:	e3403001 	movt	r3, #1
   11828:	e5932000 	ldr	r2, [r3]
   1182c:	e1520000 	cmp	r2, r0
   11830:	112fff1e 	bxne	lr
   11834:	e5d22000 	ldrb	r2, [r2]
   11838:	e3a01000 	mov	r1, #0
   1183c:	e5831000 	str	r1, [r3]
   11840:	e1520001 	cmp	r2, r1
   11844:	012fff1e 	bxeq	lr
   11848:	ea000047 	b	1196c <CMemorySystem::Destructor() [clone .part.0]>

0001184c <CMemorySystem::GetMemSize() const>:
   1184c:	e307329c 	movw	r3, #29340	; 0x729c
   11850:	e3403001 	movt	r3, #1
   11854:	e5933000 	ldr	r3, [r3]
   11858:	e3530000 	cmp	r3, #0
   1185c:	0a000002 	beq	1186c <CMemorySystem::GetMemSize() const+0x20>
   11860:	e9930009 	ldmib	r3, {r0, r3}
   11864:	e0800003 	add	r0, r0, r3
   11868:	e12fff1e 	bx	lr
   1186c:	e59f100c 	ldr	r1, [pc, #12]	; 11880 <CMemorySystem::GetMemSize() const+0x34>
   11870:	e3a020a0 	mov	r2, #160	; 0xa0
   11874:	e92d4010 	push	{r4, lr}
   11878:	e2810028 	add	r0, r1, #40	; 0x28
   1187c:	eb000247 	bl	121a0 <assertion_failed>
   11880:	000156d8 	.word	0x000156d8

00011884 <CMemorySystem::Get()>:
   11884:	e307329c 	movw	r3, #29340	; 0x729c
   11888:	e3403001 	movt	r3, #1
   1188c:	e5930000 	ldr	r0, [r3]
   11890:	e3500000 	cmp	r0, #0
   11894:	0a000000 	beq	1189c <CMemorySystem::Get()+0x18>
   11898:	e12fff1e 	bx	lr
   1189c:	e59f100c 	ldr	r1, [pc, #12]	; 118b0 <CMemorySystem::Get()+0x2c>
   118a0:	e3a020a6 	mov	r2, #166	; 0xa6
   118a4:	e92d4010 	push	{r4, lr}
   118a8:	e2810028 	add	r0, r1, #40	; 0x28
   118ac:	eb00023b 	bl	121a0 <assertion_failed>
   118b0:	000156d8 	.word	0x000156d8

000118b4 <CMemorySystem::EnableMMU()>:
   118b4:	e5d03000 	ldrb	r3, [r0]
   118b8:	e92d4010 	push	{r4, lr}
   118bc:	e3530000 	cmp	r3, #0
   118c0:	0a000019 	beq	1192c <CMemorySystem::EnableMMU()+0x78>
   118c4:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   118c8:	e3833040 	orr	r3, r3, #64	; 0x40
   118cc:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   118d0:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   118d4:	e2144001 	ands	r4, r4, #1
   118d8:	1a000017 	bne	1193c <CMemorySystem::EnableMMU()+0x88>
   118dc:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   118e0:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   118e4:	e3500000 	cmp	r0, #0
   118e8:	0a000017 	beq	1194c <CMemorySystem::EnableMMU()+0x98>
   118ec:	eb00004f 	bl	11a30 <CPageTable::GetBaseAddress() const>
   118f0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   118f4:	e3a03001 	mov	r3, #1
   118f8:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   118fc:	ebfffdef 	bl	110c0 <InvalidateDataCache>
   11900:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   11904:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   11908:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   1190c:	f57ff04f 	dsb	sy
   11910:	f57ff06f 	isb	sy
   11914:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11918:	e3c33002 	bic	r3, r3, #2
   1191c:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   11920:	e3833005 	orr	r3, r3, #5
   11924:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11928:	e8bd8010 	pop	{r4, pc}
   1192c:	e59f1028 	ldr	r1, [pc, #40]	; 1195c <CMemorySystem::EnableMMU()+0xa8>
   11930:	e3a020ac 	mov	r2, #172	; 0xac
   11934:	e2810038 	add	r0, r1, #56	; 0x38
   11938:	eb000218 	bl	121a0 <assertion_failed>
   1193c:	e59f1018 	ldr	r1, [pc, #24]	; 1195c <CMemorySystem::EnableMMU()+0xa8>
   11940:	e3a020ba 	mov	r2, #186	; 0xba
   11944:	e2810048 	add	r0, r1, #72	; 0x48
   11948:	eb000214 	bl	121a0 <assertion_failed>
   1194c:	e59f1008 	ldr	r1, [pc, #8]	; 1195c <CMemorySystem::EnableMMU()+0xa8>
   11950:	e3a020c0 	mov	r2, #192	; 0xc0
   11954:	e2810074 	add	r0, r1, #116	; 0x74
   11958:	eb000210 	bl	121a0 <assertion_failed>
   1195c:	000156d8 	.word	0x000156d8

00011960 <CMemorySystem::GetCoherentPage(unsigned int)>:
   11960:	e1a00600 	lsl	r0, r0, #12
   11964:	e2800501 	add	r0, r0, #4194304	; 0x400000
   11968:	e12fff1e 	bx	lr

0001196c <CMemorySystem::Destructor() [clone .part.0]>:
   1196c:	e92d4010 	push	{r4, lr}
   11970:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11974:	e3c33005 	bic	r3, r3, #5
   11978:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1197c:	ebfffdf9 	bl	11168 <CleanDataCache>
   11980:	ebfffdce 	bl	110c0 <InvalidateDataCache>
   11984:	e3a03000 	mov	r3, #0
   11988:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   1198c:	f57ff04f 	dsb	sy
   11990:	e8bd8010 	pop	{r4, pc}

00011994 <CPageTable::CPageTable(unsigned int)>:
   11994:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11998:	e1a07000 	mov	r7, r0
   1199c:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
   119a0:	e304e9d4 	movw	lr, #18900	; 0x49d4
   119a4:	e340e001 	movt	lr, #1
   119a8:	e307cffc 	movw	ip, #32764	; 0x7ffc
   119ac:	e340c02e 	movt	ip, #46	; 0x2e
   119b0:	e3000412 	movw	r0, #1042	; 0x412
   119b4:	e3400001 	movt	r0, #1
   119b8:	e30f6ffe 	movw	r6, #65534	; 0xfffe
   119bc:	e3446003 	movt	r6, #16387	; 0x4003
   119c0:	e3005416 	movw	r5, #1046	; 0x416
   119c4:	e3405001 	movt	r5, #1
   119c8:	e30b4ffc 	movw	r4, #49148	; 0xbffc
   119cc:	e340402e 	movt	r4, #46	; 0x2e
   119d0:	e3a03000 	mov	r3, #0
   119d4:	e5872000 	str	r2, [r7]
   119d8:	e153000e 	cmp	r3, lr
   119dc:	e300240e 	movw	r2, #1038	; 0x40e
   119e0:	3a000007 	bcc	11a04 <CPageTable::CPageTable(unsigned int)+0x70>
   119e4:	e3530501 	cmp	r3, #4194304	; 0x400000
   119e8:	e300241e 	movw	r2, #1054	; 0x41e
   119ec:	0a00000c 	beq	11a24 <CPageTable::CPageTable(unsigned int)+0x90>
   119f0:	e1510003 	cmp	r1, r3
   119f4:	8a000002 	bhi	11a04 <CPageTable::CPageTable(unsigned int)+0x70>
   119f8:	e1530006 	cmp	r3, r6
   119fc:	91a02005 	movls	r2, r5
   11a00:	83a02000 	movhi	r2, #0
   11a04:	e1822003 	orr	r2, r2, r3
   11a08:	e2833601 	add	r3, r3, #1048576	; 0x100000
   11a0c:	e5ac2004 	str	r2, [ip, #4]!
   11a10:	e15c0004 	cmp	ip, r4
   11a14:	1affffef 	bne	119d8 <CPageTable::CPageTable(unsigned int)+0x44>
   11a18:	ebfffdd2 	bl	11168 <CleanDataCache>
   11a1c:	e1a00007 	mov	r0, r7
   11a20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11a24:	e1a02000 	mov	r2, r0
   11a28:	eafffff5 	b	11a04 <CPageTable::CPageTable(unsigned int)+0x70>

00011a2c <CPageTable::~CPageTable()>:
   11a2c:	e12fff1e 	bx	lr

00011a30 <CPageTable::GetBaseAddress() const>:
   11a30:	e5900000 	ldr	r0, [r0]
   11a34:	e3800059 	orr	r0, r0, #89	; 0x59
   11a38:	e12fff1e 	bx	lr

00011a3c <CurrentExecutionLevel>:
   11a3c:	e10f0000 	mrs	r0, CPSR
   11a40:	e3100040 	tst	r0, #64	; 0x40
   11a44:	07e003d0 	ubfxeq	r0, r0, #7, #1
   11a48:	13a00002 	movne	r0, #2
   11a4c:	e12fff1e 	bx	lr

00011a50 <EnterCritical>:
   11a50:	e2403001 	sub	r3, r0, #1
   11a54:	e92d4010 	push	{r4, lr}
   11a58:	e3530001 	cmp	r3, #1
   11a5c:	8a000014 	bhi	11ab4 <EnterCritical+0x64>
   11a60:	e10f1000 	mrs	r1, CPSR
   11a64:	e3500002 	cmp	r0, #2
   11a68:	1a000017 	bne	11acc <EnterCritical+0x7c>
   11a6c:	f10c00c0 	cpsid	if
   11a70:	e30732a0 	movw	r3, #29344	; 0x72a0
   11a74:	e3403001 	movt	r3, #1
   11a78:	e5932000 	ldr	r2, [r3]
   11a7c:	e3520013 	cmp	r2, #19
   11a80:	8a000019 	bhi	11aec <EnterCritical+0x9c>
   11a84:	e5932000 	ldr	r2, [r3]
   11a88:	e3500001 	cmp	r0, #1
   11a8c:	e2820001 	add	r0, r2, #1
   11a90:	e0832102 	add	r2, r3, r2, lsl #2
   11a94:	e5830000 	str	r0, [r3]
   11a98:	e5821004 	str	r1, [r2, #4]
   11a9c:	0a000001 	beq	11aa8 <EnterCritical+0x58>
   11aa0:	f57ff05f 	dmb	sy
   11aa4:	e8bd8010 	pop	{r4, pc}
   11aa8:	f1080040 	cpsie	f
   11aac:	f57ff05f 	dmb	sy
   11ab0:	e8bd8010 	pop	{r4, pc}
   11ab4:	e3051760 	movw	r1, #22368	; 0x5760
   11ab8:	e3401001 	movt	r1, #1
   11abc:	e3050770 	movw	r0, #22384	; 0x5770
   11ac0:	e3400001 	movt	r0, #1
   11ac4:	e3a02064 	mov	r2, #100	; 0x64
   11ac8:	eb0001b4 	bl	121a0 <assertion_failed>
   11acc:	e3110040 	tst	r1, #64	; 0x40
   11ad0:	0affffe5 	beq	11a6c <EnterCritical+0x1c>
   11ad4:	e3051760 	movw	r1, #22368	; 0x5760
   11ad8:	e3401001 	movt	r1, #1
   11adc:	e30507a8 	movw	r0, #22440	; 0x57a8
   11ae0:	e3400001 	movt	r0, #1
   11ae4:	e3a0206a 	mov	r2, #106	; 0x6a
   11ae8:	eb0001ac 	bl	121a0 <assertion_failed>
   11aec:	e3051760 	movw	r1, #22368	; 0x5760
   11af0:	e3401001 	movt	r1, #1
   11af4:	e30507d8 	movw	r0, #22488	; 0x57d8
   11af8:	e3400001 	movt	r0, #1
   11afc:	e3a0206e 	mov	r2, #110	; 0x6e
   11b00:	eb0001a6 	bl	121a0 <assertion_failed>

00011b04 <LeaveCritical>:
   11b04:	f57ff05f 	dmb	sy
   11b08:	f10c0040 	cpsid	f
   11b0c:	e30732a0 	movw	r3, #29344	; 0x72a0
   11b10:	e3403001 	movt	r3, #1
   11b14:	e5932000 	ldr	r2, [r3]
   11b18:	e3520000 	cmp	r2, #0
   11b1c:	0a000006 	beq	11b3c <LeaveCritical+0x38>
   11b20:	e5932000 	ldr	r2, [r3]
   11b24:	e2422001 	sub	r2, r2, #1
   11b28:	e5832000 	str	r2, [r3]
   11b2c:	e0833102 	add	r3, r3, r2, lsl #2
   11b30:	e5933004 	ldr	r3, [r3, #4]
   11b34:	e121f003 	msr	CPSR_c, r3
   11b38:	e12fff1e 	bx	lr
   11b3c:	e3051760 	movw	r1, #22368	; 0x5760
   11b40:	e3401001 	movt	r1, #1
   11b44:	e3050800 	movw	r0, #22528	; 0x5800
   11b48:	e3400001 	movt	r0, #1
   11b4c:	e92d4010 	push	{r4, lr}
   11b50:	e3a0207f 	mov	r2, #127	; 0x7f
   11b54:	eb000191 	bl	121a0 <assertion_failed>

00011b58 <SyncDataAndInstructionCache>:
   11b58:	e92d4010 	push	{r4, lr}
   11b5c:	ebfffd81 	bl	11168 <CleanDataCache>
   11b60:	e3a03000 	mov	r3, #0
   11b64:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11b68:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11b6c:	f57ff04f 	dsb	sy
   11b70:	f57ff06f 	isb	sy
   11b74:	e8bd8010 	pop	{r4, pc}

00011b78 <CInterruptSystem::CInterruptSystem()>:
   11b78:	e2802f53 	add	r2, r0, #332	; 0x14c
   11b7c:	e1a0c000 	mov	ip, r0
   11b80:	e2403004 	sub	r3, r0, #4
   11b84:	e3a01000 	mov	r1, #0
   11b88:	e1a00002 	mov	r0, r2
   11b8c:	e5a31004 	str	r1, [r3, #4]!
   11b90:	e5a21004 	str	r1, [r2, #4]!
   11b94:	e1530000 	cmp	r3, r0
   11b98:	1afffffb 	bne	11b8c <CInterruptSystem::CInterruptSystem()+0x14>
   11b9c:	e30732f4 	movw	r3, #29428	; 0x72f4
   11ba0:	e3403001 	movt	r3, #1
   11ba4:	e1a0000c 	mov	r0, ip
   11ba8:	e583c000 	str	ip, [r3]
   11bac:	e12fff1e 	bx	lr

00011bb0 <CInterruptSystem::~CInterruptSystem()>:
   11bb0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11bb4:	f10c0080 	cpsid	i
   11bb8:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   11bbc:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11bc0:	e3433f00 	movt	r3, #16128	; 0x3f00
   11bc4:	e30722f4 	movw	r2, #29428	; 0x72f4
   11bc8:	e3402001 	movt	r2, #1
   11bcc:	e3e0c000 	mvn	ip, #0
   11bd0:	e3a01000 	mov	r1, #0
   11bd4:	e583120c 	str	r1, [r3, #524]	; 0x20c
   11bd8:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   11bdc:	e583c220 	str	ip, [r3, #544]	; 0x220
   11be0:	e583c224 	str	ip, [r3, #548]	; 0x224
   11be4:	e58e1040 	str	r1, [lr, #64]	; 0x40
   11be8:	e5821000 	str	r1, [r2]
   11bec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011bf0 <CInterruptSystem::Initialize()>:
   11bf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11bf4:	e3a03004 	mov	r3, #4
   11bf8:	e59f207c 	ldr	r2, [pc, #124]	; 11c7c <CInterruptSystem::Initialize()+0x8c>
   11bfc:	e24dd00c 	sub	sp, sp, #12
   11c00:	e58d3004 	str	r3, [sp, #4]
   11c04:	e59d0004 	ldr	r0, [sp, #4]
   11c08:	e59f3070 	ldr	r3, [pc, #112]	; 11c80 <CInterruptSystem::Initialize()+0x90>
   11c0c:	e59de004 	ldr	lr, [sp, #4]
   11c10:	e59d1004 	ldr	r1, [sp, #4]
   11c14:	e59dc004 	ldr	ip, [sp, #4]
   11c18:	e042200e 	sub	r2, r2, lr
   11c1c:	e043300c 	sub	r3, r3, ip
   11c20:	e1a02142 	asr	r2, r2, #2
   11c24:	e2422002 	sub	r2, r2, #2
   11c28:	e1a03143 	asr	r3, r3, #2
   11c2c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11c30:	e2433002 	sub	r3, r3, #2
   11c34:	e5802014 	str	r2, [r0, #20]
   11c38:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11c3c:	e5813018 	str	r3, [r1, #24]
   11c40:	ebffffc4 	bl	11b58 <SyncDataAndInstructionCache>
   11c44:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   11c48:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11c4c:	e3433f00 	movt	r3, #16128	; 0x3f00
   11c50:	e3e02000 	mvn	r2, #0
   11c54:	e3a01000 	mov	r1, #0
   11c58:	e583120c 	str	r1, [r3, #524]	; 0x20c
   11c5c:	e583221c 	str	r2, [r3, #540]	; 0x21c
   11c60:	e5832220 	str	r2, [r3, #544]	; 0x220
   11c64:	e5832224 	str	r2, [r3, #548]	; 0x224
   11c68:	e5801040 	str	r1, [r0, #64]	; 0x40
   11c6c:	f1080080 	cpsie	i
   11c70:	e3a00001 	mov	r0, #1
   11c74:	e28dd00c 	add	sp, sp, #12
   11c78:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11c7c:	00011630 	.word	0x00011630
   11c80:	00011644 	.word	0x00011644

00011c84 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   11c84:	e3510047 	cmp	r1, #71	; 0x47
   11c88:	e92d4070 	push	{r4, r5, r6, lr}
   11c8c:	8a00001e 	bhi	11d0c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   11c90:	e3520000 	cmp	r2, #0
   11c94:	0a000022 	beq	11d24 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   11c98:	e3070230 	movw	r0, #29232	; 0x7230
   11c9c:	e3400001 	movt	r0, #1
   11ca0:	e5d0c000 	ldrb	ip, [r0]
   11ca4:	e5d05001 	ldrb	r5, [r0, #1]
   11ca8:	e5d04002 	ldrb	r4, [r0, #2]
   11cac:	e5d0e003 	ldrb	lr, [r0, #3]
   11cb0:	e18cc405 	orr	ip, ip, r5, lsl #8
   11cb4:	e18cc804 	orr	ip, ip, r4, lsl #16
   11cb8:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   11cbc:	1a00001e 	bne	11d3c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   11cc0:	e3a0ca0b 	mov	ip, #45056	; 0xb000
   11cc4:	e343cf00 	movt	ip, #16128	; 0x3f00
   11cc8:	e7e76452 	ubfx	r6, r2, #8, #8
   11ccc:	e7e75852 	ubfx	r5, r2, #16, #8
   11cd0:	e1a04c22 	lsr	r4, r2, #24
   11cd4:	e5c02000 	strb	r2, [r0]
   11cd8:	e7e7e453 	ubfx	lr, r3, #8, #8
   11cdc:	e5c03004 	strb	r3, [r0, #4]
   11ce0:	e7e72853 	ubfx	r2, r3, #16, #8
   11ce4:	e3811080 	orr	r1, r1, #128	; 0x80
   11ce8:	e1a03c23 	lsr	r3, r3, #24
   11cec:	e5c06001 	strb	r6, [r0, #1]
   11cf0:	e5c05002 	strb	r5, [r0, #2]
   11cf4:	e5c04003 	strb	r4, [r0, #3]
   11cf8:	e5c0e005 	strb	lr, [r0, #5]
   11cfc:	e5c02006 	strb	r2, [r0, #6]
   11d00:	e5c03007 	strb	r3, [r0, #7]
   11d04:	e58c120c 	str	r1, [ip, #524]	; 0x20c
   11d08:	e8bd8070 	pop	{r4, r5, r6, pc}
   11d0c:	e3051818 	movw	r1, #22552	; 0x5818
   11d10:	e3401001 	movt	r1, #1
   11d14:	e3050828 	movw	r0, #22568	; 0x5828
   11d18:	e3400001 	movt	r0, #1
   11d1c:	e3a0208f 	mov	r2, #143	; 0x8f
   11d20:	eb00011e 	bl	121a0 <assertion_failed>
   11d24:	e3051818 	movw	r1, #22552	; 0x5818
   11d28:	e3401001 	movt	r1, #1
   11d2c:	e305085c 	movw	r0, #22620	; 0x585c
   11d30:	e3400001 	movt	r0, #1
   11d34:	e3a02090 	mov	r2, #144	; 0x90
   11d38:	eb000118 	bl	121a0 <assertion_failed>
   11d3c:	e3051818 	movw	r1, #22552	; 0x5818
   11d40:	e3401001 	movt	r1, #1
   11d44:	e305083c 	movw	r0, #22588	; 0x583c
   11d48:	e3400001 	movt	r0, #1
   11d4c:	e3a02091 	mov	r2, #145	; 0x91
   11d50:	eb000112 	bl	121a0 <assertion_failed>

00011d54 <CInterruptSystem::DisconnectFIQ()>:
   11d54:	e3073230 	movw	r3, #29232	; 0x7230
   11d58:	e3403001 	movt	r3, #1
   11d5c:	e5d32000 	ldrb	r2, [r3]
   11d60:	e5d3c001 	ldrb	ip, [r3, #1]
   11d64:	e5d30002 	ldrb	r0, [r3, #2]
   11d68:	e5d31003 	ldrb	r1, [r3, #3]
   11d6c:	e182240c 	orr	r2, r2, ip, lsl #8
   11d70:	e1822800 	orr	r2, r2, r0, lsl #16
   11d74:	e1922c01 	orrs	r2, r2, r1, lsl #24
   11d78:	0a00000c 	beq	11db0 <CInterruptSystem::DisconnectFIQ()+0x5c>
   11d7c:	e3a01a0b 	mov	r1, #45056	; 0xb000
   11d80:	e3431f00 	movt	r1, #16128	; 0x3f00
   11d84:	e3a02000 	mov	r2, #0
   11d88:	e581220c 	str	r2, [r1, #524]	; 0x20c
   11d8c:	e5c32000 	strb	r2, [r3]
   11d90:	e5c32001 	strb	r2, [r3, #1]
   11d94:	e5c32002 	strb	r2, [r3, #2]
   11d98:	e5c32003 	strb	r2, [r3, #3]
   11d9c:	e5c32004 	strb	r2, [r3, #4]
   11da0:	e5c32005 	strb	r2, [r3, #5]
   11da4:	e5c32006 	strb	r2, [r3, #6]
   11da8:	e5c32007 	strb	r2, [r3, #7]
   11dac:	e12fff1e 	bx	lr
   11db0:	e3051818 	movw	r1, #22552	; 0x5818
   11db4:	e3401001 	movt	r1, #1
   11db8:	e3050854 	movw	r0, #22612	; 0x5854
   11dbc:	e3400001 	movt	r0, #1
   11dc0:	e92d4010 	push	{r4, lr}
   11dc4:	e3a0209b 	mov	r2, #155	; 0x9b
   11dc8:	eb0000f4 	bl	121a0 <assertion_failed>

00011dcc <CInterruptSystem::EnableIRQ(unsigned int)>:
   11dcc:	e3500053 	cmp	r0, #83	; 0x53
   11dd0:	e92d4010 	push	{r4, lr}
   11dd4:	8a000017 	bhi	11e38 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   11dd8:	e3500047 	cmp	r0, #71	; 0x47
   11ddc:	8a00000e 	bhi	11e1c <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   11de0:	e350001f 	cmp	r0, #31
   11de4:	930b3210 	movwls	r3, #45584	; 0xb210
   11de8:	93433f00 	movtls	r3, #16128	; 0x3f00
   11dec:	9a000005 	bls	11e08 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   11df0:	e30b2214 	movw	r2, #45588	; 0xb214
   11df4:	e3432f00 	movt	r2, #16128	; 0x3f00
   11df8:	e350003f 	cmp	r0, #63	; 0x3f
   11dfc:	e30b3218 	movw	r3, #45592	; 0xb218
   11e00:	e3433f00 	movt	r3, #16128	; 0x3f00
   11e04:	91a03002 	movls	r3, r2
   11e08:	e200001f 	and	r0, r0, #31
   11e0c:	e3a02001 	mov	r2, #1
   11e10:	e1a00012 	lsl	r0, r2, r0
   11e14:	e5830000 	str	r0, [r3]
   11e18:	e8bd8010 	pop	{r4, pc}
   11e1c:	e3500049 	cmp	r0, #73	; 0x49
   11e20:	1a00000a 	bne	11e50 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   11e24:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11e28:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   11e2c:	e3833002 	orr	r3, r3, #2
   11e30:	e5823040 	str	r3, [r2, #64]	; 0x40
   11e34:	e8bd8010 	pop	{r4, pc}
   11e38:	e3051818 	movw	r1, #22552	; 0x5818
   11e3c:	e3401001 	movt	r1, #1
   11e40:	e305086c 	movw	r0, #22636	; 0x586c
   11e44:	e3400001 	movt	r0, #1
   11e48:	e3a020a7 	mov	r2, #167	; 0xa7
   11e4c:	eb0000d3 	bl	121a0 <assertion_failed>
   11e50:	e3051818 	movw	r1, #22552	; 0x5818
   11e54:	e3401001 	movt	r1, #1
   11e58:	e3050880 	movw	r0, #22656	; 0x5880
   11e5c:	e3400001 	movt	r0, #1
   11e60:	e3a020b0 	mov	r2, #176	; 0xb0
   11e64:	eb0000cd 	bl	121a0 <assertion_failed>

00011e68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11e68:	e3510053 	cmp	r1, #83	; 0x53
   11e6c:	e92d4010 	push	{r4, lr}
   11e70:	8a000008 	bhi	11e98 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   11e74:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   11e78:	e080e101 	add	lr, r0, r1, lsl #2
   11e7c:	e35c0000 	cmp	ip, #0
   11e80:	1a00000a 	bne	11eb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   11e84:	e7802101 	str	r2, [r0, r1, lsl #2]
   11e88:	e1a00001 	mov	r0, r1
   11e8c:	e58e3150 	str	r3, [lr, #336]	; 0x150
   11e90:	e8bd4010 	pop	{r4, lr}
   11e94:	eaffffcc 	b	11dcc <CInterruptSystem::EnableIRQ(unsigned int)>
   11e98:	e3051818 	movw	r1, #22552	; 0x5818
   11e9c:	e3401001 	movt	r1, #1
   11ea0:	e305086c 	movw	r0, #22636	; 0x586c
   11ea4:	e3400001 	movt	r0, #1
   11ea8:	e3a02076 	mov	r2, #118	; 0x76
   11eac:	eb0000bb 	bl	121a0 <assertion_failed>
   11eb0:	e3051818 	movw	r1, #22552	; 0x5818
   11eb4:	e3401001 	movt	r1, #1
   11eb8:	e30508a0 	movw	r0, #22688	; 0x58a0
   11ebc:	e3400001 	movt	r0, #1
   11ec0:	e3a02077 	mov	r2, #119	; 0x77
   11ec4:	eb0000b5 	bl	121a0 <assertion_failed>

00011ec8 <CInterruptSystem::DisableIRQ(unsigned int)>:
   11ec8:	e3500053 	cmp	r0, #83	; 0x53
   11ecc:	e92d4010 	push	{r4, lr}
   11ed0:	8a000017 	bhi	11f34 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   11ed4:	e3500047 	cmp	r0, #71	; 0x47
   11ed8:	8a00000e 	bhi	11f18 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   11edc:	e350001f 	cmp	r0, #31
   11ee0:	930b321c 	movwls	r3, #45596	; 0xb21c
   11ee4:	93433f00 	movtls	r3, #16128	; 0x3f00
   11ee8:	9a000005 	bls	11f04 <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   11eec:	e30b2220 	movw	r2, #45600	; 0xb220
   11ef0:	e3432f00 	movt	r2, #16128	; 0x3f00
   11ef4:	e350003f 	cmp	r0, #63	; 0x3f
   11ef8:	e30b3224 	movw	r3, #45604	; 0xb224
   11efc:	e3433f00 	movt	r3, #16128	; 0x3f00
   11f00:	91a03002 	movls	r3, r2
   11f04:	e200001f 	and	r0, r0, #31
   11f08:	e3a02001 	mov	r2, #1
   11f0c:	e1a00012 	lsl	r0, r2, r0
   11f10:	e5830000 	str	r0, [r3]
   11f14:	e8bd8010 	pop	{r4, pc}
   11f18:	e3500049 	cmp	r0, #73	; 0x49
   11f1c:	1a00000a 	bne	11f4c <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   11f20:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11f24:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   11f28:	e3c33002 	bic	r3, r3, #2
   11f2c:	e5823040 	str	r3, [r2, #64]	; 0x40
   11f30:	e8bd8010 	pop	{r4, pc}
   11f34:	e3051818 	movw	r1, #22552	; 0x5818
   11f38:	e3401001 	movt	r1, #1
   11f3c:	e305086c 	movw	r0, #22636	; 0x586c
   11f40:	e3400001 	movt	r0, #1
   11f44:	e3a020bf 	mov	r2, #191	; 0xbf
   11f48:	eb000094 	bl	121a0 <assertion_failed>
   11f4c:	e3051818 	movw	r1, #22552	; 0x5818
   11f50:	e3401001 	movt	r1, #1
   11f54:	e3050880 	movw	r0, #22656	; 0x5880
   11f58:	e3400001 	movt	r0, #1
   11f5c:	e3a020c8 	mov	r2, #200	; 0xc8
   11f60:	eb00008e 	bl	121a0 <assertion_failed>

00011f64 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   11f64:	e3510053 	cmp	r1, #83	; 0x53
   11f68:	e92d4070 	push	{r4, r5, r6, lr}
   11f6c:	8a00000b 	bhi	11fa0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   11f70:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   11f74:	e1a04001 	mov	r4, r1
   11f78:	e1a05000 	mov	r5, r0
   11f7c:	e0806101 	add	r6, r0, r1, lsl #2
   11f80:	e3530000 	cmp	r3, #0
   11f84:	0a00000b 	beq	11fb8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x54>
   11f88:	e1a00001 	mov	r0, r1
   11f8c:	ebffffcd 	bl	11ec8 <CInterruptSystem::DisableIRQ(unsigned int)>
   11f90:	e3a03000 	mov	r3, #0
   11f94:	e7853104 	str	r3, [r5, r4, lsl #2]
   11f98:	e5863150 	str	r3, [r6, #336]	; 0x150
   11f9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fa0:	e3051818 	movw	r1, #22552	; 0x5818
   11fa4:	e3401001 	movt	r1, #1
   11fa8:	e305086c 	movw	r0, #22636	; 0x586c
   11fac:	e3400001 	movt	r0, #1
   11fb0:	e3a02081 	mov	r2, #129	; 0x81
   11fb4:	eb000079 	bl	121a0 <assertion_failed>
   11fb8:	e3051818 	movw	r1, #22552	; 0x5818
   11fbc:	e3401001 	movt	r1, #1
   11fc0:	e30508bc 	movw	r0, #22716	; 0x58bc
   11fc4:	e3400001 	movt	r0, #1
   11fc8:	e3a02082 	mov	r2, #130	; 0x82
   11fcc:	eb000073 	bl	121a0 <assertion_failed>

00011fd0 <CInterruptSystem::EnableFIQ(unsigned int)>:
   11fd0:	e3500047 	cmp	r0, #71	; 0x47
   11fd4:	8a000004 	bhi	11fec <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   11fd8:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11fdc:	e3433f00 	movt	r3, #16128	; 0x3f00
   11fe0:	e3800080 	orr	r0, r0, #128	; 0x80
   11fe4:	e583020c 	str	r0, [r3, #524]	; 0x20c
   11fe8:	e12fff1e 	bx	lr
   11fec:	e3051818 	movw	r1, #22552	; 0x5818
   11ff0:	e3401001 	movt	r1, #1
   11ff4:	e3050828 	movw	r0, #22568	; 0x5828
   11ff8:	e3400001 	movt	r0, #1
   11ffc:	e92d4010 	push	{r4, lr}
   12000:	e3a020d7 	mov	r2, #215	; 0xd7
   12004:	eb000065 	bl	121a0 <assertion_failed>

00012008 <CInterruptSystem::DisableFIQ()>:
   12008:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1200c:	e3433f00 	movt	r3, #16128	; 0x3f00
   12010:	e3a02000 	mov	r2, #0
   12014:	e583220c 	str	r2, [r3, #524]	; 0x20c
   12018:	e12fff1e 	bx	lr

0001201c <CInterruptSystem::Get()>:
   1201c:	e30732f4 	movw	r3, #29428	; 0x72f4
   12020:	e3403001 	movt	r3, #1
   12024:	e5930000 	ldr	r0, [r3]
   12028:	e3500000 	cmp	r0, #0
   1202c:	0a000000 	beq	12034 <CInterruptSystem::Get()+0x18>
   12030:	e12fff1e 	bx	lr
   12034:	e3051818 	movw	r1, #22552	; 0x5818
   12038:	e3401001 	movt	r1, #1
   1203c:	e3050500 	movw	r0, #21760	; 0x5500
   12040:	e3400001 	movt	r0, #1
   12044:	e92d4010 	push	{r4, lr}
   12048:	e3a020e9 	mov	r2, #233	; 0xe9
   1204c:	eb000053 	bl	121a0 <assertion_failed>

00012050 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   12050:	e3510053 	cmp	r1, #83	; 0x53
   12054:	e92d4010 	push	{r4, lr}
   12058:	8a00000b 	bhi	1208c <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   1205c:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   12060:	e0800101 	add	r0, r0, r1, lsl #2
   12064:	e3540000 	cmp	r4, #0
   12068:	0a000003 	beq	1207c <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   1206c:	e5900150 	ldr	r0, [r0, #336]	; 0x150
   12070:	e12fff34 	blx	r4
   12074:	e3a00001 	mov	r0, #1
   12078:	e8bd8010 	pop	{r4, pc}
   1207c:	e1a00001 	mov	r0, r1
   12080:	ebffff90 	bl	11ec8 <CInterruptSystem::DisableIRQ(unsigned int)>
   12084:	e1a00004 	mov	r0, r4
   12088:	e8bd8010 	pop	{r4, pc}
   1208c:	e3051818 	movw	r1, #22552	; 0x5818
   12090:	e3401001 	movt	r1, #1
   12094:	e305086c 	movw	r0, #22636	; 0x586c
   12098:	e3400001 	movt	r0, #1
   1209c:	e3a020ef 	mov	r2, #239	; 0xef
   120a0:	eb00003e 	bl	121a0 <assertion_failed>

000120a4 <CInterruptSystem::InterruptHandler()>:
   120a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   120a8:	e30772f4 	movw	r7, #29428	; 0x72f4
   120ac:	e3407001 	movt	r7, #1
   120b0:	e24dd010 	sub	sp, sp, #16
   120b4:	e5970000 	ldr	r0, [r7]
   120b8:	e3500000 	cmp	r0, #0
   120bc:	0a00002a 	beq	1216c <CInterruptSystem::InterruptHandler()+0xc8>
   120c0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   120c4:	e5933060 	ldr	r3, [r3, #96]	; 0x60
   120c8:	e3c32e1f 	bic	r2, r3, #496	; 0x1f0
   120cc:	e3c22002 	bic	r2, r2, #2
   120d0:	e3520000 	cmp	r2, #0
   120d4:	1a00002a 	bne	12184 <CInterruptSystem::InterruptHandler()+0xe0>
   120d8:	e2136002 	ands	r6, r3, #2
   120dc:	1a00001e 	bne	1215c <CInterruptSystem::InterruptHandler()+0xb8>
   120e0:	e3a03a0b 	mov	r3, #45056	; 0xb000
   120e4:	e3433f00 	movt	r3, #16128	; 0x3f00
   120e8:	e28d8008 	add	r8, sp, #8
   120ec:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   120f0:	e58d4004 	str	r4, [sp, #4]
   120f4:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   120f8:	e58d2008 	str	r2, [sp, #8]
   120fc:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   12100:	e6ef3073 	uxtb	r3, r3
   12104:	e58d300c 	str	r3, [sp, #12]
   12108:	e3540000 	cmp	r4, #0
   1210c:	0a00000d 	beq	12148 <CInterruptSystem::InterruptHandler()+0xa4>
   12110:	e1a05006 	mov	r5, r6
   12114:	ea000002 	b	12124 <CInterruptSystem::InterruptHandler()+0x80>
   12118:	e1b040a4 	lsrs	r4, r4, #1
   1211c:	e2855001 	add	r5, r5, #1
   12120:	0a000008 	beq	12148 <CInterruptSystem::InterruptHandler()+0xa4>
   12124:	e3140001 	tst	r4, #1
   12128:	0afffffa 	beq	12118 <CInterruptSystem::InterruptHandler()+0x74>
   1212c:	e1a01005 	mov	r1, r5
   12130:	e5970000 	ldr	r0, [r7]
   12134:	ebffffc5 	bl	12050 <CInterruptSystem::CallIRQHandler(unsigned int)>
   12138:	e3500000 	cmp	r0, #0
   1213c:	0afffff5 	beq	12118 <CInterruptSystem::InterruptHandler()+0x74>
   12140:	e28dd010 	add	sp, sp, #16
   12144:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12148:	e2866020 	add	r6, r6, #32
   1214c:	e3560060 	cmp	r6, #96	; 0x60
   12150:	0afffffa 	beq	12140 <CInterruptSystem::InterruptHandler()+0x9c>
   12154:	e4984004 	ldr	r4, [r8], #4
   12158:	eaffffea 	b	12108 <CInterruptSystem::InterruptHandler()+0x64>
   1215c:	e3a01049 	mov	r1, #73	; 0x49
   12160:	e28dd010 	add	sp, sp, #16
   12164:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12168:	eaffffb8 	b	12050 <CInterruptSystem::CallIRQHandler(unsigned int)>
   1216c:	e3051818 	movw	r1, #22552	; 0x5818
   12170:	e3401001 	movt	r1, #1
   12174:	e3050500 	movw	r0, #21760	; 0x5500
   12178:	e3400001 	movt	r0, #1
   1217c:	e3002102 	movw	r2, #258	; 0x102
   12180:	eb000006 	bl	121a0 <assertion_failed>
   12184:	e3051818 	movw	r1, #22552	; 0x5818
   12188:	e3401001 	movt	r1, #1
   1218c:	e30508d8 	movw	r0, #22744	; 0x58d8
   12190:	e3400001 	movt	r0, #1
   12194:	e3002106 	movw	r2, #262	; 0x106
   12198:	eb000000 	bl	121a0 <assertion_failed>

0001219c <InterruptHandler>:
   1219c:	eaffffc0 	b	120a4 <CInterruptSystem::InterruptHandler()>

000121a0 <assertion_failed>:
   121a0:	e92d4080 	push	{r7, lr}
   121a4:	e1a05000 	mov	r5, r0
   121a8:	e1a06001 	mov	r6, r1
   121ac:	e24dd018 	sub	sp, sp, #24
   121b0:	e1a07002 	mov	r7, r2
   121b4:	e1a0400d 	mov	r4, sp
   121b8:	ebffff92 	bl	12008 <CInterruptSystem::DisableFIQ()>
   121bc:	f1080040 	cpsie	f
   121c0:	e28d0008 	add	r0, sp, #8
   121c4:	ebffedf8 	bl	d9ac <CString::CString()>
   121c8:	e1a03007 	mov	r3, r7
   121cc:	e1a02006 	mov	r2, r6
   121d0:	e28d0008 	add	r0, sp, #8
   121d4:	e305190c 	movw	r1, #22796	; 0x590c
   121d8:	e3401001 	movt	r1, #1
   121dc:	ebfff321 	bl	ee68 <CString::Format(char const*, ...)>
   121e0:	e28d0008 	add	r0, sp, #8
   121e4:	ebffee28 	bl	da8c <CString::operator char const*() const>
   121e8:	e1a01000 	mov	r1, r0
   121ec:	e1a00004 	mov	r0, r4
   121f0:	eb00024a 	bl	12b20 <debug_stacktrace(unsigned int const*, char const*)>
   121f4:	ebffe0d5 	bl	a550 <CLogger::Get()>
   121f8:	e1a04000 	mov	r4, r0
   121fc:	e28d0008 	add	r0, sp, #8
   12200:	ebffee21 	bl	da8c <CString::operator char const*() const>
   12204:	e3053914 	movw	r3, #22804	; 0x5914
   12208:	e3403001 	movt	r3, #1
   1220c:	e1a01000 	mov	r1, r0
   12210:	e58d5000 	str	r5, [sp]
   12214:	e1a00004 	mov	r0, r4
   12218:	e3a02000 	mov	r2, #0
   1221c:	ebffe008 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12220:	eafffffe 	b	12220 <assertion_failed+0x80>

00012224 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12224:	e92d4030 	push	{r4, r5, lr}
   12228:	e1a04000 	mov	r4, r0
   1222c:	e3a02000 	mov	r2, #0
   12230:	e24dd014 	sub	sp, sp, #20
   12234:	e3a0c001 	mov	ip, #1
   12238:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1223c:	e1a01002 	mov	r1, r2
   12240:	e28d0008 	add	r0, sp, #8
   12244:	e5c3c011 	strb	ip, [r3, #17]
   12248:	e5c3200c 	strb	r2, [r3, #12]
   1224c:	e5c3200d 	strb	r2, [r3, #13]
   12250:	e5c3200e 	strb	r2, [r3, #14]
   12254:	e5c3200f 	strb	r2, [r3, #15]
   12258:	e5c32010 	strb	r2, [r3, #16]
   1225c:	e5c32012 	strb	r2, [r3, #18]
   12260:	e5c32013 	strb	r2, [r3, #19]
   12264:	eb000135 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12268:	e3003408 	movw	r3, #1032	; 0x408
   1226c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   12270:	e28d0008 	add	r0, sp, #8
   12274:	e58d3000 	str	r3, [sp]
   12278:	e308100b 	movw	r1, #32779	; 0x800b
   1227c:	e3401004 	movt	r1, #4
   12280:	e3003414 	movw	r3, #1044	; 0x414
   12284:	eb000139 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12288:	e2505000 	subs	r5, r0, #0
   1228c:	0a000008 	beq	122b4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x90>
   12290:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   12294:	e5d2300c 	ldrb	r3, [r2, #12]
   12298:	e5d2000d 	ldrb	r0, [r2, #13]
   1229c:	e5d2100e 	ldrb	r1, [r2, #14]
   122a0:	e5d2200f 	ldrb	r2, [r2, #15]
   122a4:	e1833400 	orr	r3, r3, r0, lsl #8
   122a8:	e1833801 	orr	r3, r3, r1, lsl #16
   122ac:	e1933c02 	orrs	r3, r3, r2, lsl #24
   122b0:	0a000000 	beq	122b8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x94>
   122b4:	e3a05000 	mov	r5, #0
   122b8:	e28d0008 	add	r0, sp, #8
   122bc:	eb000126 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   122c0:	e1a00005 	mov	r0, r5
   122c4:	e28dd014 	add	sp, sp, #20
   122c8:	e8bd8030 	pop	{r4, r5, pc}

000122cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   122cc:	e92d4070 	push	{r4, r5, r6, lr}
   122d0:	e1a04000 	mov	r4, r0
   122d4:	e3a00000 	mov	r0, #0
   122d8:	e24dd028 	sub	sp, sp, #40	; 0x28
   122dc:	e8840006 	stm	r4, {r1, r2}
   122e0:	e5843010 	str	r3, [r4, #16]
   122e4:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   122e8:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   122ec:	e3550000 	cmp	r5, #0
   122f0:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   122f4:	e584e00c 	str	lr, [r4, #12]
   122f8:	e584c008 	str	ip, [r4, #8]
   122fc:	e5845014 	str	r5, [r4, #20]
   12300:	e5840018 	str	r0, [r4, #24]
   12304:	e584001c 	str	r0, [r4, #28]
   12308:	e5840020 	str	r0, [r4, #32]
   1230c:	e5840024 	str	r0, [r4, #36]	; 0x24
   12310:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   12314:	1a00002a 	bne	123c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xf8>
   12318:	e1510000 	cmp	r1, r0
   1231c:	11520000 	cmpne	r2, r0
   12320:	1a000012 	bne	12370 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa4>
   12324:	e1a01005 	mov	r1, r5
   12328:	e28d000c 	add	r0, sp, #12
   1232c:	eb000103 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12330:	e3a03014 	mov	r3, #20
   12334:	e58d5000 	str	r5, [sp]
   12338:	e28d000c 	add	r0, sp, #12
   1233c:	e3a01003 	mov	r1, #3
   12340:	e3401004 	movt	r1, #4
   12344:	e08d2003 	add	r2, sp, r3
   12348:	eb000108 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1234c:	e3500000 	cmp	r0, #0
   12350:	1a00002b 	bne	12404 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x138>
   12354:	e3a02d0a 	mov	r2, #640	; 0x280
   12358:	e3a03e1e 	mov	r3, #480	; 0x1e0
   1235c:	e884000c 	stm	r4, {r2, r3}
   12360:	e28d000c 	add	r0, sp, #12
   12364:	eb0000fc 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   12368:	e594c008 	ldr	ip, [r4, #8]
   1236c:	e5943010 	ldr	r3, [r4, #16]
   12370:	e35c0000 	cmp	ip, #0
   12374:	1a000015 	bne	123d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x104>
   12378:	e5942004 	ldr	r2, [r4, #4]
   1237c:	e3530008 	cmp	r3, #8
   12380:	e0222296 	mla	r2, r6, r2, r2
   12384:	e5941000 	ldr	r1, [r4]
   12388:	e584200c 	str	r2, [r4, #12]
   1238c:	e5841008 	str	r1, [r4, #8]
   12390:	9a000013 	bls	123e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x118>
   12394:	e3a02070 	mov	r2, #112	; 0x70
   12398:	e305192c 	movw	r1, #22828	; 0x592c
   1239c:	e3401001 	movt	r1, #1
   123a0:	e2840028 	add	r0, r4, #40	; 0x28
   123a4:	ebfff8eb 	bl	10758 <memcpy>
   123a8:	e594c000 	ldr	ip, [r4]
   123ac:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   123b0:	e584c034 	str	ip, [r4, #52]	; 0x34
   123b4:	e5840038 	str	r0, [r4, #56]	; 0x38
   123b8:	e5841048 	str	r1, [r4, #72]	; 0x48
   123bc:	e584204c 	str	r2, [r4, #76]	; 0x4c
   123c0:	e584305c 	str	r3, [r4, #92]	; 0x5c
   123c4:	e1a00004 	mov	r0, r4
   123c8:	e28dd028 	add	sp, sp, #40	; 0x28
   123cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   123d0:	e594200c 	ldr	r2, [r4, #12]
   123d4:	e3520000 	cmp	r2, #0
   123d8:	0affffe6 	beq	12378 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xac>
   123dc:	e3530008 	cmp	r3, #8
   123e0:	8affffeb 	bhi	12394 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc8>
   123e4:	e3000414 	movw	r0, #1044	; 0x414
   123e8:	ebfff9de 	bl	10b68 <operator new[](unsigned int)>
   123ec:	e3a02b01 	mov	r2, #1024	; 0x400
   123f0:	e5840024 	str	r0, [r4, #36]	; 0x24
   123f4:	e3a01000 	mov	r1, #0
   123f8:	e2800014 	add	r0, r0, #20
   123fc:	ebfff8be 	bl	106fc <memset>
   12400:	eaffffe3 	b	12394 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc8>
   12404:	e59d2020 	ldr	r2, [sp, #32]
   12408:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1240c:	e2421d0a 	sub	r1, r2, #640	; 0x280
   12410:	e5842000 	str	r2, [r4]
   12414:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   12418:	e5843004 	str	r3, [r4, #4]
   1241c:	e3520e69 	cmp	r2, #1680	; 0x690
   12420:	93510d36 	cmpls	r1, #3456	; 0xd80
   12424:	9affffcd 	bls	12360 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x94>
   12428:	eaffffc9 	b	12354 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x88>

0001242c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   1242c:	e92d4010 	push	{r4, lr}
   12430:	e3a01014 	mov	r1, #20
   12434:	e1a04000 	mov	r4, r0
   12438:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1243c:	ebfff9d6 	bl	10b9c <operator delete(void*, unsigned int)>
   12440:	e1a00004 	mov	r0, r4
   12444:	e8bd8010 	pop	{r4, pc}

00012448 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12448:	e5903010 	ldr	r3, [r0, #16]
   1244c:	e3530008 	cmp	r3, #8
   12450:	812fff1e 	bxhi	lr
   12454:	e1a03982 	lsl	r3, r2, #19
   12458:	e1a0c5a2 	lsr	ip, r2, #11
   1245c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12460:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12464:	e2811004 	add	r1, r1, #4
   12468:	e1a02282 	lsl	r2, r2, #5
   1246c:	e183318c 	orr	r3, r3, ip, lsl #3
   12470:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12474:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   12478:	e0801101 	add	r1, r0, r1, lsl #2
   1247c:	e1822003 	orr	r2, r2, r3
   12480:	e1a0c422 	lsr	ip, r2, #8
   12484:	e1a00822 	lsr	r0, r2, #16
   12488:	e1a03c22 	lsr	r3, r2, #24
   1248c:	e5c12004 	strb	r2, [r1, #4]
   12490:	e5c1c005 	strb	ip, [r1, #5]
   12494:	e5c10006 	strb	r0, [r1, #6]
   12498:	e5c13007 	strb	r3, [r1, #7]
   1249c:	e12fff1e 	bx	lr

000124a0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   124a0:	e5903010 	ldr	r3, [r0, #16]
   124a4:	e3530008 	cmp	r3, #8
   124a8:	812fff1e 	bxhi	lr
   124ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   124b0:	e2811004 	add	r1, r1, #4
   124b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   124b8:	e7e7c852 	ubfx	ip, r2, #16, #8
   124bc:	e7e7e452 	ubfx	lr, r2, #8, #8
   124c0:	e0831101 	add	r1, r3, r1, lsl #2
   124c4:	e1a00c22 	lsr	r0, r2, #24
   124c8:	e5c12004 	strb	r2, [r1, #4]
   124cc:	e5c1e005 	strb	lr, [r1, #5]
   124d0:	e5c1c006 	strb	ip, [r1, #6]
   124d4:	e5c10007 	strb	r0, [r1, #7]
   124d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000124dc <CBcmFrameBuffer::Initialize()>:
   124dc:	e5901014 	ldr	r1, [r0, #20]
   124e0:	e92d4030 	push	{r4, r5, lr}
   124e4:	e3510000 	cmp	r1, #0
   124e8:	e24dd00c 	sub	sp, sp, #12
   124ec:	13a05000 	movne	r5, #0
   124f0:	0a000002 	beq	12500 <CBcmFrameBuffer::Initialize()+0x24>
   124f4:	e1a00005 	mov	r0, r5
   124f8:	e28dd00c 	add	sp, sp, #12
   124fc:	e8bd8030 	pop	{r4, r5, pc}
   12500:	e1a04000 	mov	r4, r0
   12504:	e1a0000d 	mov	r0, sp
   12508:	eb00008c 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1250c:	e1a0000d 	mov	r0, sp
   12510:	e3a02070 	mov	r2, #112	; 0x70
   12514:	e2841028 	add	r1, r4, #40	; 0x28
   12518:	eb0000d2 	bl	12868 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1251c:	e2505000 	subs	r5, r0, #0
   12520:	0a00001d 	beq	1259c <CBcmFrameBuffer::Initialize()+0xc0>
   12524:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   12528:	e3530000 	cmp	r3, #0
   1252c:	0a00001f 	beq	125b0 <CBcmFrameBuffer::Initialize()+0xd4>
   12530:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   12534:	e3530000 	cmp	r3, #0
   12538:	0a00001c 	beq	125b0 <CBcmFrameBuffer::Initialize()+0xd4>
   1253c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   12540:	e3530000 	cmp	r3, #0
   12544:	0a000019 	beq	125b0 <CBcmFrameBuffer::Initialize()+0xd4>
   12548:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1254c:	e3530000 	cmp	r3, #0
   12550:	0a000016 	beq	125b0 <CBcmFrameBuffer::Initialize()+0xd4>
   12554:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   12558:	e3530000 	cmp	r3, #0
   1255c:	0a000013 	beq	125b0 <CBcmFrameBuffer::Initialize()+0xd4>
   12560:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   12564:	e3530000 	cmp	r3, #0
   12568:	0a000010 	beq	125b0 <CBcmFrameBuffer::Initialize()+0xd4>
   1256c:	e5942010 	ldr	r2, [r4, #16]
   12570:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12574:	e5941084 	ldr	r1, [r4, #132]	; 0x84
   12578:	e3520008 	cmp	r2, #8
   1257c:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   12580:	e5843018 	str	r3, [r4, #24]
   12584:	e584101c 	str	r1, [r4, #28]
   12588:	e5842020 	str	r2, [r4, #32]
   1258c:	8a000002 	bhi	1259c <CBcmFrameBuffer::Initialize()+0xc0>
   12590:	e1a00004 	mov	r0, r4
   12594:	ebffff22 	bl	12224 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12598:	e1a05000 	mov	r5, r0
   1259c:	e1a0000d 	mov	r0, sp
   125a0:	eb00006d 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   125a4:	e1a00005 	mov	r0, r5
   125a8:	e28dd00c 	add	sp, sp, #12
   125ac:	e8bd8030 	pop	{r4, r5, pc}
   125b0:	e1a0000d 	mov	r0, sp
   125b4:	e1a05003 	mov	r5, r3
   125b8:	eb000067 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   125bc:	eafffff8 	b	125a4 <CBcmFrameBuffer::Initialize()+0xc8>

000125c0 <CBcmFrameBuffer::GetWidth() const>:
   125c0:	e5900000 	ldr	r0, [r0]
   125c4:	e12fff1e 	bx	lr

000125c8 <CBcmFrameBuffer::GetHeight() const>:
   125c8:	e5900004 	ldr	r0, [r0, #4]
   125cc:	e12fff1e 	bx	lr

000125d0 <CBcmFrameBuffer::GetVirtWidth() const>:
   125d0:	e5900008 	ldr	r0, [r0, #8]
   125d4:	e12fff1e 	bx	lr

000125d8 <CBcmFrameBuffer::GetVirtHeight() const>:
   125d8:	e590000c 	ldr	r0, [r0, #12]
   125dc:	e12fff1e 	bx	lr

000125e0 <CBcmFrameBuffer::GetPitch() const>:
   125e0:	e5900020 	ldr	r0, [r0, #32]
   125e4:	e12fff1e 	bx	lr

000125e8 <CBcmFrameBuffer::GetDepth() const>:
   125e8:	e5900010 	ldr	r0, [r0, #16]
   125ec:	e12fff1e 	bx	lr

000125f0 <CBcmFrameBuffer::GetBuffer() const>:
   125f0:	e5900018 	ldr	r0, [r0, #24]
   125f4:	e12fff1e 	bx	lr

000125f8 <CBcmFrameBuffer::GetSize() const>:
   125f8:	e590001c 	ldr	r0, [r0, #28]
   125fc:	e12fff1e 	bx	lr

00012600 <CBcmFrameBuffer::UpdatePalette()>:
   12600:	e5903010 	ldr	r3, [r0, #16]
   12604:	e3530008 	cmp	r3, #8
   12608:	9a000001 	bls	12614 <CBcmFrameBuffer::UpdatePalette()+0x14>
   1260c:	e3a00001 	mov	r0, #1
   12610:	e12fff1e 	bx	lr
   12614:	eaffff02 	b	12224 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00012618 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   12618:	e92d4070 	push	{r4, r5, r6, lr}
   1261c:	e1a05001 	mov	r5, r1
   12620:	e3a01000 	mov	r1, #0
   12624:	e24dd028 	sub	sp, sp, #40	; 0x28
   12628:	e1a06002 	mov	r6, r2
   1262c:	e28d000c 	add	r0, sp, #12
   12630:	eb000042 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12634:	e3a03008 	mov	r3, #8
   12638:	e58d3000 	str	r3, [sp]
   1263c:	e3a03014 	mov	r3, #20
   12640:	e28d000c 	add	r0, sp, #12
   12644:	e3081009 	movw	r1, #32777	; 0x8009
   12648:	e3401004 	movt	r1, #4
   1264c:	e08d2003 	add	r2, sp, r3
   12650:	e58d5020 	str	r5, [sp, #32]
   12654:	e58d6024 	str	r6, [sp, #36]	; 0x24
   12658:	eb000044 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1265c:	e2504000 	subs	r4, r0, #0
   12660:	0a000006 	beq	12680 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   12664:	e59d3020 	ldr	r3, [sp, #32]
   12668:	e1550003 	cmp	r5, r3
   1266c:	13a04000 	movne	r4, #0
   12670:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   12674:	00444006 	subeq	r4, r4, r6
   12678:	016f4f14 	clzeq	r4, r4
   1267c:	01a042a4 	lsreq	r4, r4, #5
   12680:	e28d000c 	add	r0, sp, #12
   12684:	eb000034 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   12688:	e1a00004 	mov	r0, r4
   1268c:	e28dd028 	add	sp, sp, #40	; 0x28
   12690:	e8bd8070 	pop	{r4, r5, r6, pc}

00012694 <CBcmFrameBuffer::WaitForVerticalSync()>:
   12694:	e92d4010 	push	{r4, lr}
   12698:	e3a01000 	mov	r1, #0
   1269c:	e24dd020 	sub	sp, sp, #32
   126a0:	e28d0008 	add	r0, sp, #8
   126a4:	eb000025 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   126a8:	e3a03000 	mov	r3, #0
   126ac:	e58d3000 	str	r3, [sp]
   126b0:	e3a03010 	mov	r3, #16
   126b4:	e08d2003 	add	r2, sp, r3
   126b8:	e28d0008 	add	r0, sp, #8
   126bc:	e308100e 	movw	r1, #32782	; 0x800e
   126c0:	e3401004 	movt	r1, #4
   126c4:	eb000029 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   126c8:	e1a04000 	mov	r4, r0
   126cc:	e28d0008 	add	r0, sp, #8
   126d0:	eb000021 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   126d4:	e1a00004 	mov	r0, r4
   126d8:	e28dd020 	add	sp, sp, #32
   126dc:	e8bd8010 	pop	{r4, pc}

000126e0 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   126e0:	e92d4010 	push	{r4, lr}
   126e4:	e1a04001 	mov	r4, r1
   126e8:	e3a01000 	mov	r1, #0
   126ec:	e24dd020 	sub	sp, sp, #32
   126f0:	e28d0008 	add	r0, sp, #8
   126f4:	eb000011 	bl	12740 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   126f8:	e3a03004 	mov	r3, #4
   126fc:	e58d3000 	str	r3, [sp]
   12700:	e3a03010 	mov	r3, #16
   12704:	e08d2003 	add	r2, sp, r3
   12708:	e28d0008 	add	r0, sp, #8
   1270c:	e308100f 	movw	r1, #32783	; 0x800f
   12710:	e3401004 	movt	r1, #4
   12714:	e58d401c 	str	r4, [sp, #28]
   12718:	eb000014 	bl	12770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1271c:	e1a04000 	mov	r4, r0
   12720:	e28d0008 	add	r0, sp, #8
   12724:	eb00000c 	bl	1275c <CBcmPropertyTags::~CBcmPropertyTags()>
   12728:	e1a00004 	mov	r0, r4
   1272c:	e28dd020 	add	sp, sp, #32
   12730:	e8bd8010 	pop	{r4, pc}

00012734 <CBcmFrameBuffer::SetDisplay()>:
   12734:	e12fff1e 	bx	lr

00012738 <CBcmFrameBuffer::GetNumDisplays()>:
   12738:	e3a00001 	mov	r0, #1
   1273c:	e12fff1e 	bx	lr

00012740 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   12740:	e92d4010 	push	{r4, lr}
   12744:	e1a02001 	mov	r2, r1
   12748:	e1a04000 	mov	r4, r0
   1274c:	e3a01008 	mov	r1, #8
   12750:	eb000742 	bl	14460 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   12754:	e1a00004 	mov	r0, r4
   12758:	e8bd8010 	pop	{r4, pc}

0001275c <CBcmPropertyTags::~CBcmPropertyTags()>:
   1275c:	e92d4010 	push	{r4, lr}
   12760:	e1a04000 	mov	r4, r0
   12764:	eb000740 	bl	1446c <CBcmMailBox::~CBcmMailBox()>
   12768:	e1a00004 	mov	r0, r4
   1276c:	e8bd8010 	pop	{r4, pc}

00012770 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   12770:	e92d4070 	push	{r4, r5, r6, lr}
   12774:	e2524000 	subs	r4, r2, #0
   12778:	0a000030 	beq	12840 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   1277c:	e353000f 	cmp	r3, #15
   12780:	9a000033 	bls	12854 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe4>
   12784:	e59d2010 	ldr	r2, [sp, #16]
   12788:	e243e00c 	sub	lr, r3, #12
   1278c:	e7e7645e 	ubfx	r6, lr, #8, #8
   12790:	e7e7585e 	ubfx	r5, lr, #16, #8
   12794:	e3c2c102 	bic	ip, r2, #-2147483648	; 0x80000000
   12798:	e5c4e004 	strb	lr, [r4, #4]
   1279c:	e1a02003 	mov	r2, r3
   127a0:	e1a0ec2e 	lsr	lr, lr, #24
   127a4:	e7e7345c 	ubfx	r3, ip, #8, #8
   127a8:	e5c46005 	strb	r6, [r4, #5]
   127ac:	e5c45006 	strb	r5, [r4, #6]
   127b0:	e7e7685c 	ubfx	r6, ip, #16, #8
   127b4:	e5c4e007 	strb	lr, [r4, #7]
   127b8:	e1a05c2c 	lsr	r5, ip, #24
   127bc:	e7e7e451 	ubfx	lr, r1, #8, #8
   127c0:	e5c4c008 	strb	ip, [r4, #8]
   127c4:	e5c43009 	strb	r3, [r4, #9]
   127c8:	e7e7c851 	ubfx	ip, r1, #16, #8
   127cc:	e1a03c21 	lsr	r3, r1, #24
   127d0:	e5c41000 	strb	r1, [r4]
   127d4:	e5c4600a 	strb	r6, [r4, #10]
   127d8:	e1a01004 	mov	r1, r4
   127dc:	e5c4500b 	strb	r5, [r4, #11]
   127e0:	e5c4e001 	strb	lr, [r4, #1]
   127e4:	e5c4c002 	strb	ip, [r4, #2]
   127e8:	e5c43003 	strb	r3, [r4, #3]
   127ec:	eb00001d 	bl	12868 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   127f0:	e3500000 	cmp	r0, #0
   127f4:	08bd8070 	popeq	{r4, r5, r6, pc}
   127f8:	e5d40009 	ldrb	r0, [r4, #9]
   127fc:	e5d43008 	ldrb	r3, [r4, #8]
   12800:	e5d4100a 	ldrb	r1, [r4, #10]
   12804:	e5d4200b 	ldrb	r2, [r4, #11]
   12808:	e1833400 	orr	r3, r3, r0, lsl #8
   1280c:	e1833801 	orr	r3, r3, r1, lsl #16
   12810:	e1833c02 	orr	r3, r3, r2, lsl #24
   12814:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   12818:	e7e7c453 	ubfx	ip, r3, #8, #8
   1281c:	e7e71853 	ubfx	r1, r3, #16, #8
   12820:	e1a02c23 	lsr	r2, r3, #24
   12824:	e2930000 	adds	r0, r3, #0
   12828:	13a00001 	movne	r0, #1
   1282c:	e5c43008 	strb	r3, [r4, #8]
   12830:	e5c4c009 	strb	ip, [r4, #9]
   12834:	e5c4100a 	strb	r1, [r4, #10]
   12838:	e5c4200b 	strb	r2, [r4, #11]
   1283c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12840:	e305199c 	movw	r1, #22940	; 0x599c
   12844:	e3401001 	movt	r1, #1
   12848:	e2810014 	add	r0, r1, #20
   1284c:	e3a02033 	mov	r2, #51	; 0x33
   12850:	ebfffe52 	bl	121a0 <assertion_failed>
   12854:	e305199c 	movw	r1, #22940	; 0x599c
   12858:	e3401001 	movt	r1, #1
   1285c:	e2810020 	add	r0, r1, #32
   12860:	e3a02034 	mov	r2, #52	; 0x34
   12864:	ebfffe4d 	bl	121a0 <assertion_failed>

00012868 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   12868:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1286c:	e2519000 	subs	r9, r1, #0
   12870:	0a000033 	beq	12944 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   12874:	e352000f 	cmp	r2, #15
   12878:	e1a07002 	mov	r7, r2
   1287c:	9a000035 	bls	12958 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   12880:	e282500c 	add	r5, r2, #12
   12884:	e2156003 	ands	r6, r5, #3
   12888:	1a000037 	bne	1296c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x104>
   1288c:	e1a0a000 	mov	sl, r0
   12890:	e1a00006 	mov	r0, r6
   12894:	ebfffc31 	bl	11960 <CMemorySystem::GetCoherentPage(unsigned int)>
   12898:	e1a04000 	mov	r4, r0
   1289c:	e2808008 	add	r8, r0, #8
   128a0:	e7e72455 	ubfx	r2, r5, #8, #8
   128a4:	e7e71855 	ubfx	r1, r5, #16, #8
   128a8:	e1a03c25 	lsr	r3, r5, #24
   128ac:	e5c05000 	strb	r5, [r0]
   128b0:	e1a00008 	mov	r0, r8
   128b4:	e5c42001 	strb	r2, [r4, #1]
   128b8:	e1a02007 	mov	r2, r7
   128bc:	e5c41002 	strb	r1, [r4, #2]
   128c0:	e1a01009 	mov	r1, r9
   128c4:	e5c46004 	strb	r6, [r4, #4]
   128c8:	e5c46005 	strb	r6, [r4, #5]
   128cc:	e5c46006 	strb	r6, [r4, #6]
   128d0:	e5c46007 	strb	r6, [r4, #7]
   128d4:	e5c43003 	strb	r3, [r4, #3]
   128d8:	ebfff79e 	bl	10758 <memcpy>
   128dc:	e7886007 	str	r6, [r8, r7]
   128e0:	f57ff04f 	dsb	sy
   128e4:	e3845103 	orr	r5, r4, #-1073741824	; 0xc0000000
   128e8:	e1a0000a 	mov	r0, sl
   128ec:	e1a01005 	mov	r1, r5
   128f0:	eb0006de 	bl	14470 <CBcmMailBox::WriteRead(unsigned int)>
   128f4:	e1550000 	cmp	r5, r0
   128f8:	0a000001 	beq	12904 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   128fc:	e3a00000 	mov	r0, #0
   12900:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12904:	f57ff05f 	dmb	sy
   12908:	e5d43004 	ldrb	r3, [r4, #4]
   1290c:	e5d40005 	ldrb	r0, [r4, #5]
   12910:	e5d41006 	ldrb	r1, [r4, #6]
   12914:	e5d42007 	ldrb	r2, [r4, #7]
   12918:	e1833400 	orr	r3, r3, r0, lsl #8
   1291c:	e1833801 	orr	r3, r3, r1, lsl #16
   12920:	e1833c02 	orr	r3, r3, r2, lsl #24
   12924:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   12928:	1afffff3 	bne	128fc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x94>
   1292c:	e1a02007 	mov	r2, r7
   12930:	e1a01008 	mov	r1, r8
   12934:	e1a00009 	mov	r0, r9
   12938:	ebfff786 	bl	10758 <memcpy>
   1293c:	e3a00001 	mov	r0, #1
   12940:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12944:	e305199c 	movw	r1, #22940	; 0x599c
   12948:	e3401001 	movt	r1, #1
   1294c:	e2810048 	add	r0, r1, #72	; 0x48
   12950:	e3a0204b 	mov	r2, #75	; 0x4b
   12954:	ebfffe11 	bl	121a0 <assertion_failed>
   12958:	e305199c 	movw	r1, #22940	; 0x599c
   1295c:	e3401001 	movt	r1, #1
   12960:	e2810054 	add	r0, r1, #84	; 0x54
   12964:	e3a0204c 	mov	r2, #76	; 0x4c
   12968:	ebfffe0c 	bl	121a0 <assertion_failed>
   1296c:	e305199c 	movw	r1, #22940	; 0x599c
   12970:	e3401001 	movt	r1, #1
   12974:	e2810080 	add	r0, r1, #128	; 0x80
   12978:	e3a0204e 	mov	r2, #78	; 0x4e
   1297c:	ebfffe07 	bl	121a0 <assertion_failed>

00012980 <CCharGenerator::CCharGenerator()>:
   12980:	e3a03008 	mov	r3, #8
   12984:	e5803000 	str	r3, [r0]
   12988:	e12fff1e 	bx	lr

0001298c <CCharGenerator::~CCharGenerator()>:
   1298c:	e12fff1e 	bx	lr

00012990 <CCharGenerator::GetCharWidth() const>:
   12990:	e5900000 	ldr	r0, [r0]
   12994:	e12fff1e 	bx	lr

00012998 <CCharGenerator::GetCharHeight() const>:
   12998:	e3a00013 	mov	r0, #19
   1299c:	e12fff1e 	bx	lr

000129a0 <CCharGenerator::GetUnderline() const>:
   129a0:	e3a00010 	mov	r0, #16
   129a4:	e12fff1e 	bx	lr

000129a8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   129a8:	e6ef1071 	uxtb	r1, r1
   129ac:	e2411021 	sub	r1, r1, #33	; 0x21
   129b0:	e35100de 	cmp	r1, #222	; 0xde
   129b4:	8a00000d 	bhi	129f0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   129b8:	e5900000 	ldr	r0, [r0]
   129bc:	e1500002 	cmp	r0, r2
   129c0:	9a00000c 	bls	129f8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   129c4:	e353000f 	cmp	r3, #15
   129c8:	8a000008 	bhi	129f0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   129cc:	e3050a34 	movw	r0, #23092	; 0x5a34
   129d0:	e3400001 	movt	r0, #1
   129d4:	e3a0c080 	mov	ip, #128	; 0x80
   129d8:	e0801201 	add	r1, r0, r1, lsl #4
   129dc:	e7d13003 	ldrb	r3, [r1, r3]
   129e0:	e013325c 	ands	r3, r3, ip, asr r2
   129e4:	13a00001 	movne	r0, #1
   129e8:	03a00000 	moveq	r0, #0
   129ec:	e12fff1e 	bx	lr
   129f0:	e3a00000 	mov	r0, #0
   129f4:	e12fff1e 	bx	lr
   129f8:	e3061824 	movw	r1, #26660	; 0x6824
   129fc:	e3401001 	movt	r1, #1
   12a00:	e3060838 	movw	r0, #26680	; 0x6838
   12a04:	e3400001 	movt	r0, #1
   12a08:	e92d4010 	push	{r4, lr}
   12a0c:	e3a0204e 	mov	r2, #78	; 0x4e
   12a10:	ebfffde2 	bl	121a0 <assertion_failed>

00012a14 <debug_hexdump(void const*, unsigned int, char const*)>:
   12a14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a18:	e3520000 	cmp	r2, #0
   12a1c:	e1a05001 	mov	r5, r1
   12a20:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   12a24:	e1a04000 	mov	r4, r0
   12a28:	e3067850 	movw	r7, #26704	; 0x6850
   12a2c:	e3407001 	movt	r7, #1
   12a30:	11a07002 	movne	r7, r2
   12a34:	ebffdec5 	bl	a550 <CLogger::Get()>
   12a38:	e58d4004 	str	r4, [sp, #4]
   12a3c:	e1a01007 	mov	r1, r7
   12a40:	e58d5000 	str	r5, [sp]
   12a44:	e3063858 	movw	r3, #26712	; 0x6858
   12a48:	e3403001 	movt	r3, #1
   12a4c:	e3a02004 	mov	r2, #4
   12a50:	ebffddfb 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a54:	e3550000 	cmp	r5, #0
   12a58:	0a00002a 	beq	12b08 <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
   12a5c:	e3068880 	movw	r8, #26752	; 0x6880
   12a60:	e3408001 	movt	r8, #1
   12a64:	ebffdeb9 	bl	a550 <CLogger::Get()>
   12a68:	e5d4e00f 	ldrb	lr, [r4, #15]
   12a6c:	e5d4b00e 	ldrb	fp, [r4, #14]
   12a70:	e6ffc074 	uxth	ip, r4
   12a74:	e5d4a00d 	ldrb	sl, [r4, #13]
   12a78:	e1a03008 	mov	r3, r8
   12a7c:	e5d4900c 	ldrb	r9, [r4, #12]
   12a80:	e3a02004 	mov	r2, #4
   12a84:	e5d4600b 	ldrb	r6, [r4, #11]
   12a88:	e1a01007 	mov	r1, r7
   12a8c:	e58de040 	str	lr, [sp, #64]	; 0x40
   12a90:	e2844010 	add	r4, r4, #16
   12a94:	e554e006 	ldrb	lr, [r4, #-6]
   12a98:	e58db03c 	str	fp, [sp, #60]	; 0x3c
   12a9c:	e554b007 	ldrb	fp, [r4, #-7]
   12aa0:	e58da038 	str	sl, [sp, #56]	; 0x38
   12aa4:	e554a008 	ldrb	sl, [r4, #-8]
   12aa8:	e58d9034 	str	r9, [sp, #52]	; 0x34
   12aac:	e5549009 	ldrb	r9, [r4, #-9]
   12ab0:	e58d6030 	str	r6, [sp, #48]	; 0x30
   12ab4:	e554600a 	ldrb	r6, [r4, #-10]
   12ab8:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   12abc:	e554e00b 	ldrb	lr, [r4, #-11]
   12ac0:	e58db028 	str	fp, [sp, #40]	; 0x28
   12ac4:	e554b00c 	ldrb	fp, [r4, #-12]
   12ac8:	e58da024 	str	sl, [sp, #36]	; 0x24
   12acc:	e554a00d 	ldrb	sl, [r4, #-13]
   12ad0:	e58d9020 	str	r9, [sp, #32]
   12ad4:	e554900e 	ldrb	r9, [r4, #-14]
   12ad8:	e58d601c 	str	r6, [sp, #28]
   12adc:	e554600f 	ldrb	r6, [r4, #-15]
   12ae0:	e58de018 	str	lr, [sp, #24]
   12ae4:	e554e010 	ldrb	lr, [r4, #-16]
   12ae8:	e58db014 	str	fp, [sp, #20]
   12aec:	e58da010 	str	sl, [sp, #16]
   12af0:	e58d900c 	str	r9, [sp, #12]
   12af4:	e58d6008 	str	r6, [sp, #8]
   12af8:	e88d5000 	stm	sp, {ip, lr}
   12afc:	ebffddd0 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b00:	e355000f 	cmp	r5, #15
   12b04:	8a000001 	bhi	12b10 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
   12b08:	e28dd04c 	add	sp, sp, #76	; 0x4c
   12b0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b10:	e2555010 	subs	r5, r5, #16
   12b14:	1affffd2 	bne	12a64 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
   12b18:	e28dd04c 	add	sp, sp, #76	; 0x4c
   12b1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012b20 <debug_stacktrace(unsigned int const*, char const*)>:
   12b20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12b24:	e3510000 	cmp	r1, #0
   12b28:	e3067850 	movw	r7, #26704	; 0x6850
   12b2c:	e3407001 	movt	r7, #1
   12b30:	11a07001 	movne	r7, r1
   12b34:	e30469d4 	movw	r6, #18900	; 0x49d4
   12b38:	e3406001 	movt	r6, #1
   12b3c:	e30688d8 	movw	r8, #26840	; 0x68d8
   12b40:	e3408001 	movt	r8, #1
   12b44:	e24dd008 	sub	sp, sp, #8
   12b48:	e1a05000 	mov	r5, r0
   12b4c:	e3a04000 	mov	r4, #0
   12b50:	ea000003 	b	12b64 <debug_stacktrace(unsigned int const*, char const*)+0x44>
   12b54:	e2844001 	add	r4, r4, #1
   12b58:	e2855004 	add	r5, r5, #4
   12b5c:	e3540040 	cmp	r4, #64	; 0x40
   12b60:	0a000012 	beq	12bb0 <debug_stacktrace(unsigned int const*, char const*)+0x90>
   12b64:	e5953000 	ldr	r3, [r5]
   12b68:	e3530902 	cmp	r3, #32768	; 0x8000
   12b6c:	3afffff8 	bcc	12b54 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12b70:	e1530006 	cmp	r3, r6
   12b74:	2afffff6 	bcs	12b54 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12b78:	e3130003 	tst	r3, #3
   12b7c:	1afffff4 	bne	12b54 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12b80:	ebffde72 	bl	a550 <CLogger::Get()>
   12b84:	e5952000 	ldr	r2, [r5]
   12b88:	e1a03008 	mov	r3, r8
   12b8c:	e58d4000 	str	r4, [sp]
   12b90:	e58d2004 	str	r2, [sp, #4]
   12b94:	e1a01007 	mov	r1, r7
   12b98:	e3a02004 	mov	r2, #4
   12b9c:	e2844001 	add	r4, r4, #1
   12ba0:	ebffdda7 	bl	a244 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ba4:	e3540040 	cmp	r4, #64	; 0x40
   12ba8:	e2855004 	add	r5, r5, #4
   12bac:	1affffec 	bne	12b64 <debug_stacktrace(unsigned int const*, char const*)+0x44>
   12bb0:	e28dd008 	add	sp, sp, #8
   12bb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00012bb8 <DelayLoop>:
   12bb8:	e1a01001 	mov	r1, r1
   12bbc:	e1a02002 	mov	r2, r2
   12bc0:	e2500001 	subs	r0, r0, #1
   12bc4:	8afffffb 	bhi	12bb8 <DelayLoop>
   12bc8:	e1a0f00e 	mov	pc, lr

00012bcc <CDevice::Read(void*, unsigned int)>:
   12bcc:	e3e00000 	mvn	r0, #0
   12bd0:	e12fff1e 	bx	lr

00012bd4 <CDevice::Seek(unsigned long long)>:
   12bd4:	e3e00000 	mvn	r0, #0
   12bd8:	e3e01000 	mvn	r1, #0
   12bdc:	e12fff1e 	bx	lr

00012be0 <CDevice::GetSize() const>:
   12be0:	e3e00000 	mvn	r0, #0
   12be4:	e3e01000 	mvn	r1, #0
   12be8:	e12fff1e 	bx	lr

00012bec <CDevice::IOCtl(unsigned long, void*)>:
   12bec:	e3e00000 	mvn	r0, #0
   12bf0:	e12fff1e 	bx	lr

00012bf4 <CDevice::RemoveDevice()>:
   12bf4:	e3a00000 	mov	r0, #0
   12bf8:	e12fff1e 	bx	lr

00012bfc <CDevice::~CDevice()>:
   12bfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12c00:	e1a05000 	mov	r5, r0
   12c04:	e59f3080 	ldr	r3, [pc, #128]	; 12c8c <CDevice::~CDevice()+0x90>
   12c08:	e1a07000 	mov	r7, r0
   12c0c:	e4853004 	str	r3, [r5], #4
   12c10:	ea000008 	b	12c38 <CDevice::~CDevice()+0x3c>
   12c14:	e5901004 	ldr	r1, [r0, #4]
   12c18:	e1a00007 	mov	r0, r7
   12c1c:	e12fff33 	blx	r3
   12c20:	e1a01006 	mov	r1, r6
   12c24:	e1a00005 	mov	r0, r5
   12c28:	eb00052c 	bl	140e0 <CPtrList::Remove(TPtrListElement*)>
   12c2c:	e1a00004 	mov	r0, r4
   12c30:	e3a01008 	mov	r1, #8
   12c34:	ebfff7d8 	bl	10b9c <operator delete(void*, unsigned int)>
   12c38:	e1a00005 	mov	r0, r5
   12c3c:	eb000480 	bl	13e44 <CPtrList::GetFirst()>
   12c40:	e2506000 	subs	r6, r0, #0
   12c44:	0a00000c 	beq	12c7c <CDevice::~CDevice()+0x80>
   12c48:	e1a01006 	mov	r1, r6
   12c4c:	e1a00005 	mov	r0, r5
   12c50:	eb000493 	bl	13ea4 <CPtrList::GetPtr(TPtrListElement*)>
   12c54:	e5903000 	ldr	r3, [r0]
   12c58:	e1a04000 	mov	r4, r0
   12c5c:	e3530000 	cmp	r3, #0
   12c60:	1affffeb 	bne	12c14 <CDevice::~CDevice()+0x18>
   12c64:	e3061914 	movw	r1, #26900	; 0x6914
   12c68:	e3401001 	movt	r1, #1
   12c6c:	e3060920 	movw	r0, #26912	; 0x6920
   12c70:	e3400001 	movt	r0, #1
   12c74:	e3a02028 	mov	r2, #40	; 0x28
   12c78:	ebfffd48 	bl	121a0 <assertion_failed>
   12c7c:	e1a00005 	mov	r0, r5
   12c80:	eb000464 	bl	13e18 <CPtrList::~CPtrList()>
   12c84:	e1a00007 	mov	r0, r7
   12c88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12c8c:	000168f4 	.word	0x000168f4

00012c90 <CDevice::~CDevice()>:
   12c90:	e92d4010 	push	{r4, lr}
   12c94:	e1a04000 	mov	r4, r0
   12c98:	ebffffd7 	bl	12bfc <CDevice::~CDevice()>
   12c9c:	e1a00004 	mov	r0, r4
   12ca0:	e3a01008 	mov	r1, #8
   12ca4:	ebfff7bc 	bl	10b9c <operator delete(void*, unsigned int)>
   12ca8:	e1a00004 	mov	r0, r4
   12cac:	e8bd8010 	pop	{r4, pc}

00012cb0 <CDevice::CDevice()>:
   12cb0:	e59f3014 	ldr	r3, [pc, #20]	; 12ccc <CDevice::CDevice()+0x1c>
   12cb4:	e92d4010 	push	{r4, lr}
   12cb8:	e1a04000 	mov	r4, r0
   12cbc:	e4803004 	str	r3, [r0], #4
   12cc0:	eb000451 	bl	13e0c <CPtrList::CPtrList()>
   12cc4:	e1a00004 	mov	r0, r4
   12cc8:	e8bd8010 	pop	{r4, pc}
   12ccc:	000168f4 	.word	0x000168f4

00012cd0 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   12cd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12cd4:	e2517000 	subs	r7, r1, #0
   12cd8:	0a000010 	beq	12d20 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x50>
   12cdc:	e1a04000 	mov	r4, r0
   12ce0:	e3a00008 	mov	r0, #8
   12ce4:	e1a06002 	mov	r6, r2
   12ce8:	ebfff79d 	bl	10b64 <operator new(unsigned int)>
   12cec:	e1a05000 	mov	r5, r0
   12cf0:	e2844004 	add	r4, r4, #4
   12cf4:	e1a00004 	mov	r0, r4
   12cf8:	e5857000 	str	r7, [r5]
   12cfc:	e5856004 	str	r6, [r5, #4]
   12d00:	eb00044f 	bl	13e44 <CPtrList::GetFirst()>
   12d04:	e2501000 	subs	r1, r0, #0
   12d08:	e1a02005 	mov	r2, r5
   12d0c:	e1a00004 	mov	r0, r4
   12d10:	0a000008 	beq	12d38 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x68>
   12d14:	eb000478 	bl	13efc <CPtrList::InsertBefore(TPtrListElement*, void*)>
   12d18:	e1a00005 	mov	r0, r5
   12d1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12d20:	e3061914 	movw	r1, #26900	; 0x6914
   12d24:	e3401001 	movt	r1, #1
   12d28:	e305085c 	movw	r0, #22620	; 0x585c
   12d2c:	e3400001 	movt	r0, #1
   12d30:	e3a02052 	mov	r2, #82	; 0x52
   12d34:	ebfffd19 	bl	121a0 <assertion_failed>
   12d38:	eb0004ac 	bl	13ff0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   12d3c:	eafffff5 	b	12d18 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x48>

00012d40 <CDevice::UnregisterRemovedHandler(void*)>:
   12d40:	e92d4070 	push	{r4, r5, r6, lr}
   12d44:	e2515000 	subs	r5, r1, #0
   12d48:	0a00000a 	beq	12d78 <CDevice::UnregisterRemovedHandler(void*)+0x38>
   12d4c:	e2804004 	add	r4, r0, #4
   12d50:	e1a00004 	mov	r0, r4
   12d54:	eb00052e 	bl	14214 <CPtrList::Find(void*)>
   12d58:	e2501000 	subs	r1, r0, #0
   12d5c:	0a00000b 	beq	12d90 <CDevice::UnregisterRemovedHandler(void*)+0x50>
   12d60:	e1a00004 	mov	r0, r4
   12d64:	eb0004dd 	bl	140e0 <CPtrList::Remove(TPtrListElement*)>
   12d68:	e1a00005 	mov	r0, r5
   12d6c:	e3a01008 	mov	r1, #8
   12d70:	e8bd4070 	pop	{r4, r5, r6, lr}
   12d74:	eafff788 	b	10b9c <operator delete(void*, unsigned int)>
   12d78:	e3061914 	movw	r1, #26900	; 0x6914
   12d7c:	e3401001 	movt	r1, #1
   12d80:	e3060938 	movw	r0, #26936	; 0x6938
   12d84:	e3400001 	movt	r0, #1
   12d88:	e3a02069 	mov	r2, #105	; 0x69
   12d8c:	ebfffd03 	bl	121a0 <assertion_failed>
   12d90:	e3061914 	movw	r1, #26900	; 0x6914
   12d94:	e3401001 	movt	r1, #1
   12d98:	e3060944 	movw	r0, #26948	; 0x6944
   12d9c:	e3400001 	movt	r0, #1
   12da0:	e3a0206c 	mov	r2, #108	; 0x6c
   12da4:	ebfffcfd 	bl	121a0 <assertion_failed>

00012da8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   12da8:	e92d4070 	push	{r4, r5, r6, lr}
   12dac:	e1a05001 	mov	r5, r1
   12db0:	e1a04000 	mov	r4, r0
   12db4:	e1a06002 	mov	r6, r2
   12db8:	ebffe120 	bl	b240 <CMachineInfo::Get()>
   12dbc:	e1a01005 	mov	r1, r5
   12dc0:	e3a05000 	mov	r5, #0
   12dc4:	ebffe0ca 	bl	b0f4 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   12dc8:	e3500080 	cmp	r0, #128	; 0x80
   12dcc:	e584600c 	str	r6, [r4, #12]
   12dd0:	e8840021 	stm	r4, {r0, r5}
   12dd4:	e5845008 	str	r5, [r4, #8]
   12dd8:	e5c45010 	strb	r5, [r4, #16]
   12ddc:	e5845014 	str	r5, [r4, #20]
   12de0:	e5845018 	str	r5, [r4, #24]
   12de4:	e5c4501c 	strb	r5, [r4, #28]
   12de8:	0a000021 	beq	12e74 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xcc>
   12dec:	e350000b 	cmp	r0, #11
   12df0:	8a000024 	bhi	12e88 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xe0>
   12df4:	e1a01005 	mov	r1, r5
   12df8:	e3a0003f 	mov	r0, #63	; 0x3f
   12dfc:	ebfff748 	bl	10b24 <operator new[](unsigned int, int)>
   12e00:	e280301f 	add	r3, r0, #31
   12e04:	e3c3301f 	bic	r3, r3, #31
   12e08:	e3a02a07 	mov	r2, #28672	; 0x7000
   12e0c:	e3432f00 	movt	r2, #16128	; 0x3f00
   12e10:	e9840009 	stmib	r4, {r0, r3}
   12e14:	e3a0c001 	mov	ip, #1
   12e18:	e5941000 	ldr	r1, [r4]
   12e1c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   12e20:	e5835018 	str	r5, [r3, #24]
   12e24:	e583501c 	str	r5, [r3, #28]
   12e28:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   12e2c:	e183311c 	orr	r3, r3, ip, lsl r1
   12e30:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   12e34:	ebfff3a6 	bl	fcd4 <CTimer::SimpleusDelay(unsigned int)>
   12e38:	e5943000 	ldr	r3, [r4]
   12e3c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   12e40:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12e44:	e2833070 	add	r3, r3, #112	; 0x70
   12e48:	e1a03403 	lsl	r3, r3, #8
   12e4c:	e5832000 	str	r2, [r3]
   12e50:	e5942000 	ldr	r2, [r4]
   12e54:	e282283f 	add	r2, r2, #4128768	; 0x3f0000
   12e58:	e2822070 	add	r2, r2, #112	; 0x70
   12e5c:	e1a02402 	lsl	r2, r2, #8
   12e60:	e5923000 	ldr	r3, [r2]
   12e64:	e3530000 	cmp	r3, #0
   12e68:	bafffffc 	blt	12e60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb8>
   12e6c:	e1a00004 	mov	r0, r4
   12e70:	e8bd8070 	pop	{r4, r5, r6, pc}
   12e74:	e3061954 	movw	r1, #26964	; 0x6954
   12e78:	e3401001 	movt	r1, #1
   12e7c:	e2810010 	add	r0, r1, #16
   12e80:	e3a02039 	mov	r2, #57	; 0x39
   12e84:	ebfffcc5 	bl	121a0 <assertion_failed>
   12e88:	e3061954 	movw	r1, #26964	; 0x6954
   12e8c:	e3401001 	movt	r1, #1
   12e90:	e2810030 	add	r0, r1, #48	; 0x30
   12e94:	e3a0203a 	mov	r2, #58	; 0x3a
   12e98:	ebfffcc0 	bl	121a0 <assertion_failed>

00012e9c <CDMAChannel::~CDMAChannel()>:
   12e9c:	e5903000 	ldr	r3, [r0]
   12ea0:	e92d4010 	push	{r4, lr}
   12ea4:	e353000b 	cmp	r3, #11
   12ea8:	8a00002d 	bhi	12f64 <CDMAChannel::~CDMAChannel()+0xc8>
   12eac:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12eb0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   12eb4:	e2833070 	add	r3, r3, #112	; 0x70
   12eb8:	e1a04000 	mov	r4, r0
   12ebc:	e1a03403 	lsl	r3, r3, #8
   12ec0:	e5832000 	str	r2, [r3]
   12ec4:	e5901000 	ldr	r1, [r0]
   12ec8:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   12ecc:	e2822070 	add	r2, r2, #112	; 0x70
   12ed0:	e1a02402 	lsl	r2, r2, #8
   12ed4:	e5923000 	ldr	r3, [r2]
   12ed8:	e3530000 	cmp	r3, #0
   12edc:	bafffffc 	blt	12ed4 <CDMAChannel::~CDMAChannel()+0x38>
   12ee0:	e3a03a07 	mov	r3, #28672	; 0x7000
   12ee4:	e3433f00 	movt	r3, #16128	; 0x3f00
   12ee8:	e594000c 	ldr	r0, [r4, #12]
   12eec:	e3a0c000 	mov	ip, #0
   12ef0:	e3a0e001 	mov	lr, #1
   12ef4:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   12ef8:	e150000c 	cmp	r0, ip
   12efc:	e1c2211e 	bic	r2, r2, lr, lsl r1
   12f00:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   12f04:	e584c014 	str	ip, [r4, #20]
   12f08:	0a000004 	beq	12f20 <CDMAChannel::~CDMAChannel()+0x84>
   12f0c:	e5d43010 	ldrb	r3, [r4, #16]
   12f10:	e153000c 	cmp	r3, ip
   12f14:	1a00000c 	bne	12f4c <CDMAChannel::~CDMAChannel()+0xb0>
   12f18:	e3a03000 	mov	r3, #0
   12f1c:	e584300c 	str	r3, [r4, #12]
   12f20:	ebffe0c6 	bl	b240 <CMachineInfo::Get()>
   12f24:	e5941000 	ldr	r1, [r4]
   12f28:	ebffe0a3 	bl	b1bc <CMachineInfo::FreeDMAChannel(unsigned int)>
   12f2c:	e5940004 	ldr	r0, [r4, #4]
   12f30:	e3a03000 	mov	r3, #0
   12f34:	e1500003 	cmp	r0, r3
   12f38:	e5843008 	str	r3, [r4, #8]
   12f3c:	0a000000 	beq	12f44 <CDMAChannel::~CDMAChannel()+0xa8>
   12f40:	ebfff70f 	bl	10b84 <operator delete[](void*)>
   12f44:	e1a00004 	mov	r0, r4
   12f48:	e8bd8010 	pop	{r4, pc}
   12f4c:	e5941000 	ldr	r1, [r4]
   12f50:	e351000c 	cmp	r1, #12
   12f54:	8a000007 	bhi	12f78 <CDMAChannel::~CDMAChannel()+0xdc>
   12f58:	e2811010 	add	r1, r1, #16
   12f5c:	ebfffc00 	bl	11f64 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   12f60:	eaffffec 	b	12f18 <CDMAChannel::~CDMAChannel()+0x7c>
   12f64:	e3061954 	movw	r1, #26964	; 0x6954
   12f68:	e3401001 	movt	r1, #1
   12f6c:	e2810030 	add	r0, r1, #48	; 0x30
   12f70:	e3a02062 	mov	r2, #98	; 0x62
   12f74:	ebfffc89 	bl	121a0 <assertion_failed>
   12f78:	e3061954 	movw	r1, #26964	; 0x6954
   12f7c:	e3401001 	movt	r1, #1
   12f80:	e281004c 	add	r0, r1, #76	; 0x4c
   12f84:	e3a02074 	mov	r2, #116	; 0x74
   12f88:	ebfffc84 	bl	121a0 <assertion_failed>

00012f8c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   12f8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12f90:	e2514000 	subs	r4, r1, #0
   12f94:	e1a05000 	mov	r5, r0
   12f98:	e24dd008 	sub	sp, sp, #8
   12f9c:	e59dc020 	ldr	ip, [sp, #32]
   12fa0:	e5dd0024 	ldrb	r0, [sp, #36]	; 0x24
   12fa4:	0a00004f 	beq	130e8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x15c>
   12fa8:	e3520000 	cmp	r2, #0
   12fac:	0a000052 	beq	130fc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x170>
   12fb0:	e3530000 	cmp	r3, #0
   12fb4:	0a000055 	beq	13110 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x184>
   12fb8:	e35c000f 	cmp	ip, #15
   12fbc:	8a000058 	bhi	13124 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x198>
   12fc0:	e5951008 	ldr	r1, [r5, #8]
   12fc4:	e3510000 	cmp	r1, #0
   12fc8:	0a00005a 	beq	13138 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1ac>
   12fcc:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   12fd0:	8a00005d 	bhi	1314c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c0>
   12fd4:	e595e000 	ldr	lr, [r5]
   12fd8:	e28ee83f 	add	lr, lr, #4128768	; 0x3f0000
   12fdc:	e28ee070 	add	lr, lr, #112	; 0x70
   12fe0:	e1a0e40e 	lsl	lr, lr, #8
   12fe4:	e59ee020 	ldr	lr, [lr, #32]
   12fe8:	e22ee201 	eor	lr, lr, #268435456	; 0x10000000
   12fec:	e7e0ee5e 	ubfx	lr, lr, #28, #1
   12ff0:	e3530801 	cmp	r3, #65536	; 0x10000
   12ff4:	338ee001 	orrcc	lr, lr, #1
   12ff8:	e35e0000 	cmp	lr, #0
   12ffc:	0a000057 	beq	13160 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13000:	e1a0c60c 	lsl	ip, ip, #12
   13004:	e3826103 	orr	r6, r2, #-1073741824	; 0xc0000000
   13008:	e38cce33 	orr	ip, ip, #816	; 0x330
   1300c:	e384e103 	orr	lr, r4, #-1073741824	; 0xc0000000
   13010:	e7e78456 	ubfx	r8, r6, #8, #8
   13014:	e5c16004 	strb	r6, [r1, #4]
   13018:	e1a0742c 	lsr	r7, ip, #8
   1301c:	e3500000 	cmp	r0, #0
   13020:	e5c17001 	strb	r7, [r1, #1]
   13024:	e7e7785c 	ubfx	r7, ip, #16, #8
   13028:	e5c17002 	strb	r7, [r1, #2]
   1302c:	e7e77856 	ubfx	r7, r6, #16, #8
   13030:	e1a06c26 	lsr	r6, r6, #24
   13034:	e5c1c000 	strb	ip, [r1]
   13038:	e5c17006 	strb	r7, [r1, #6]
   1303c:	e1a0cc2c 	lsr	ip, ip, #24
   13040:	e7e7745e 	ubfx	r7, lr, #8, #8
   13044:	e5c16007 	strb	r6, [r1, #7]
   13048:	e5c1e008 	strb	lr, [r1, #8]
   1304c:	e7e7685e 	ubfx	r6, lr, #16, #8
   13050:	e1a0ec2e 	lsr	lr, lr, #24
   13054:	e5c1c003 	strb	ip, [r1, #3]
   13058:	e5c17009 	strb	r7, [r1, #9]
   1305c:	e3a0c000 	mov	ip, #0
   13060:	e5c1600a 	strb	r6, [r1, #10]
   13064:	e7e77453 	ubfx	r7, r3, #8, #8
   13068:	e5c1e00b 	strb	lr, [r1, #11]
   1306c:	e7e76853 	ubfx	r6, r3, #16, #8
   13070:	e1a0ec23 	lsr	lr, r3, #24
   13074:	e5c1300c 	strb	r3, [r1, #12]
   13078:	e5c18005 	strb	r8, [r1, #5]
   1307c:	e5c1c010 	strb	ip, [r1, #16]
   13080:	e5c1c011 	strb	ip, [r1, #17]
   13084:	e5c1c012 	strb	ip, [r1, #18]
   13088:	e5c1c013 	strb	ip, [r1, #19]
   1308c:	e5c1c014 	strb	ip, [r1, #20]
   13090:	e5c1c015 	strb	ip, [r1, #21]
   13094:	e5c1c016 	strb	ip, [r1, #22]
   13098:	e5c1c017 	strb	ip, [r1, #23]
   1309c:	e5c1700d 	strb	r7, [r1, #13]
   130a0:	e5c1600e 	strb	r6, [r1, #14]
   130a4:	e5c1e00f 	strb	lr, [r1, #15]
   130a8:	1a000002 	bne	130b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x12c>
   130ac:	e5850020 	str	r0, [r5, #32]
   130b0:	e28dd008 	add	sp, sp, #8
   130b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   130b8:	e1a00002 	mov	r0, r2
   130bc:	e5853024 	str	r3, [r5, #36]	; 0x24
   130c0:	e1a01003 	mov	r1, r3
   130c4:	e5854020 	str	r4, [r5, #32]
   130c8:	e58d3004 	str	r3, [sp, #4]
   130cc:	ebfff84f 	bl	11210 <CleanAndInvalidateDataCacheRange>
   130d0:	e59d3004 	ldr	r3, [sp, #4]
   130d4:	e1a00004 	mov	r0, r4
   130d8:	e1a01003 	mov	r1, r3
   130dc:	e28dd008 	add	sp, sp, #8
   130e0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   130e4:	eafff849 	b	11210 <CleanAndInvalidateDataCacheRange>
   130e8:	e3061954 	movw	r1, #26964	; 0x6954
   130ec:	e3401001 	movt	r1, #1
   130f0:	e2810060 	add	r0, r1, #96	; 0x60
   130f4:	e3a0208f 	mov	r2, #143	; 0x8f
   130f8:	ebfffc28 	bl	121a0 <assertion_failed>
   130fc:	e3061954 	movw	r1, #26964	; 0x6954
   13100:	e3401001 	movt	r1, #1
   13104:	e2810074 	add	r0, r1, #116	; 0x74
   13108:	e3a02090 	mov	r2, #144	; 0x90
   1310c:	ebfffc23 	bl	121a0 <assertion_failed>
   13110:	e3061954 	movw	r1, #26964	; 0x6954
   13114:	e3401001 	movt	r1, #1
   13118:	e2810084 	add	r0, r1, #132	; 0x84
   1311c:	e3a02091 	mov	r2, #145	; 0x91
   13120:	ebfffc1e 	bl	121a0 <assertion_failed>
   13124:	e3061954 	movw	r1, #26964	; 0x6954
   13128:	e3401001 	movt	r1, #1
   1312c:	e2810090 	add	r0, r1, #144	; 0x90
   13130:	e3a02092 	mov	r2, #146	; 0x92
   13134:	ebfffc19 	bl	121a0 <assertion_failed>
   13138:	e3061954 	movw	r1, #26964	; 0x6954
   1313c:	e3401001 	movt	r1, #1
   13140:	e28100a4 	add	r0, r1, #164	; 0xa4
   13144:	e3a02094 	mov	r2, #148	; 0x94
   13148:	ebfffc14 	bl	121a0 <assertion_failed>
   1314c:	e3061954 	movw	r1, #26964	; 0x6954
   13150:	e3401001 	movt	r1, #1
   13154:	e28100bc 	add	r0, r1, #188	; 0xbc
   13158:	e3a02095 	mov	r2, #149	; 0x95
   1315c:	ebfffc0f 	bl	121a0 <assertion_failed>
   13160:	e3061954 	movw	r1, #26964	; 0x6954
   13164:	e3401001 	movt	r1, #1
   13168:	e28100d4 	add	r0, r1, #212	; 0xd4
   1316c:	e3a02097 	mov	r2, #151	; 0x97
   13170:	ebfffc0a 	bl	121a0 <assertion_failed>

00013174 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   13174:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13178:	e2514000 	subs	r4, r1, #0
   1317c:	e1a0e000 	mov	lr, r0
   13180:	e5dd0018 	ldrb	r0, [sp, #24]
   13184:	0a000042 	beq	13294 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   13188:	e3530000 	cmp	r3, #0
   1318c:	0a000045 	beq	132a8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x134>
   13190:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   13194:	8a000048 	bhi	132bc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x148>
   13198:	e59e1000 	ldr	r1, [lr]
   1319c:	e281183f 	add	r1, r1, #4128768	; 0x3f0000
   131a0:	e2811070 	add	r1, r1, #112	; 0x70
   131a4:	e1a01401 	lsl	r1, r1, #8
   131a8:	e5911020 	ldr	r1, [r1, #32]
   131ac:	e2211201 	eor	r1, r1, #268435456	; 0x10000000
   131b0:	e7e01e51 	ubfx	r1, r1, #28, #1
   131b4:	e3530801 	cmp	r3, #65536	; 0x10000
   131b8:	33811001 	orrcc	r1, r1, #1
   131bc:	e3510000 	cmp	r1, #0
   131c0:	0a00004c 	beq	132f8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   131c4:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   131c8:	0a000040 	beq	132d0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x15c>
   131cc:	e59ec008 	ldr	ip, [lr, #8]
   131d0:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   131d4:	e35c0000 	cmp	ip, #0
   131d8:	0a000041 	beq	132e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x170>
   131dc:	e3001438 	movw	r1, #1080	; 0x438
   131e0:	e3845103 	orr	r5, r4, #-1073741824	; 0xc0000000
   131e4:	e7e76455 	ubfx	r6, r5, #8, #8
   131e8:	e5cc5008 	strb	r5, [ip, #8]
   131ec:	e1811800 	orr	r1, r1, r0, lsl #16
   131f0:	e5cc2004 	strb	r2, [ip, #4]
   131f4:	e5cc1000 	strb	r1, [ip]
   131f8:	e7e78452 	ubfx	r8, r2, #8, #8
   131fc:	e1a00421 	lsr	r0, r1, #8
   13200:	e5cc6009 	strb	r6, [ip, #9]
   13204:	e5cc0001 	strb	r0, [ip, #1]
   13208:	e1a00821 	lsr	r0, r1, #16
   1320c:	e5cc0002 	strb	r0, [ip, #2]
   13210:	e1a01c21 	lsr	r1, r1, #24
   13214:	e7e70855 	ubfx	r0, r5, #16, #8
   13218:	e1a05c25 	lsr	r5, r5, #24
   1321c:	e5cc1003 	strb	r1, [ip, #3]
   13220:	e7e77852 	ubfx	r7, r2, #16, #8
   13224:	e3a01000 	mov	r1, #0
   13228:	e5cc000a 	strb	r0, [ip, #10]
   1322c:	e5cc500b 	strb	r5, [ip, #11]
   13230:	e7e70453 	ubfx	r0, r3, #8, #8
   13234:	e7e76853 	ubfx	r6, r3, #16, #8
   13238:	e1a05c23 	lsr	r5, r3, #24
   1323c:	e1a02c22 	lsr	r2, r2, #24
   13240:	e5cc1010 	strb	r1, [ip, #16]
   13244:	e5cc1011 	strb	r1, [ip, #17]
   13248:	e5cc1012 	strb	r1, [ip, #18]
   1324c:	e5cc1013 	strb	r1, [ip, #19]
   13250:	e5cc1014 	strb	r1, [ip, #20]
   13254:	e5cc1015 	strb	r1, [ip, #21]
   13258:	e5cc1016 	strb	r1, [ip, #22]
   1325c:	e5cc1017 	strb	r1, [ip, #23]
   13260:	e1a01003 	mov	r1, r3
   13264:	e5cc8005 	strb	r8, [ip, #5]
   13268:	e5cc7006 	strb	r7, [ip, #6]
   1326c:	e5cc000d 	strb	r0, [ip, #13]
   13270:	e1a00004 	mov	r0, r4
   13274:	e5cc600e 	strb	r6, [ip, #14]
   13278:	e5cc500f 	strb	r5, [ip, #15]
   1327c:	e5cc300c 	strb	r3, [ip, #12]
   13280:	e5cc2007 	strb	r2, [ip, #7]
   13284:	e58e4020 	str	r4, [lr, #32]
   13288:	e58e3024 	str	r3, [lr, #36]	; 0x24
   1328c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13290:	eafff7de 	b	11210 <CleanAndInvalidateDataCacheRange>
   13294:	e3061954 	movw	r1, #26964	; 0x6954
   13298:	e3401001 	movt	r1, #1
   1329c:	e2810060 	add	r0, r1, #96	; 0x60
   132a0:	e3a020bd 	mov	r2, #189	; 0xbd
   132a4:	ebfffbbd 	bl	121a0 <assertion_failed>
   132a8:	e3061954 	movw	r1, #26964	; 0x6954
   132ac:	e3401001 	movt	r1, #1
   132b0:	e2810084 	add	r0, r1, #132	; 0x84
   132b4:	e3a020be 	mov	r2, #190	; 0xbe
   132b8:	ebfffbb8 	bl	121a0 <assertion_failed>
   132bc:	e3061954 	movw	r1, #26964	; 0x6954
   132c0:	e3401001 	movt	r1, #1
   132c4:	e28100bc 	add	r0, r1, #188	; 0xbc
   132c8:	e3a020bf 	mov	r2, #191	; 0xbf
   132cc:	ebfffbb3 	bl	121a0 <assertion_failed>
   132d0:	e3061954 	movw	r1, #26964	; 0x6954
   132d4:	e3401001 	movt	r1, #1
   132d8:	e2810f4b 	add	r0, r1, #300	; 0x12c
   132dc:	e3a020c4 	mov	r2, #196	; 0xc4
   132e0:	ebfffbae 	bl	121a0 <assertion_failed>
   132e4:	e3061954 	movw	r1, #26964	; 0x6954
   132e8:	e3401001 	movt	r1, #1
   132ec:	e28100a4 	add	r0, r1, #164	; 0xa4
   132f0:	e3a020c7 	mov	r2, #199	; 0xc7
   132f4:	ebfffba9 	bl	121a0 <assertion_failed>
   132f8:	e3061954 	movw	r1, #26964	; 0x6954
   132fc:	e3401001 	movt	r1, #1
   13300:	e28100d4 	add	r0, r1, #212	; 0xd4
   13304:	e3a020c1 	mov	r2, #193	; 0xc1
   13308:	ebfffba4 	bl	121a0 <assertion_failed>

0001330c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   1330c:	e3520000 	cmp	r2, #0
   13310:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13314:	e5dd4018 	ldrb	r4, [sp, #24]
   13318:	0a000042 	beq	13428 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x11c>
   1331c:	e3530000 	cmp	r3, #0
   13320:	0a000045 	beq	1343c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x130>
   13324:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   13328:	8a000048 	bhi	13450 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x144>
   1332c:	e1a05000 	mov	r5, r0
   13330:	e5900000 	ldr	r0, [r0]
   13334:	e280083f 	add	r0, r0, #4128768	; 0x3f0000
   13338:	e2800070 	add	r0, r0, #112	; 0x70
   1333c:	e1a00400 	lsl	r0, r0, #8
   13340:	e5900020 	ldr	r0, [r0, #32]
   13344:	e2200201 	eor	r0, r0, #268435456	; 0x10000000
   13348:	e7e00e50 	ubfx	r0, r0, #28, #1
   1334c:	e3530801 	cmp	r3, #65536	; 0x10000
   13350:	33800001 	orrcc	r0, r0, #1
   13354:	e3500000 	cmp	r0, #0
   13358:	0a00004b 	beq	1348c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   1335c:	e3d114ff 	bics	r1, r1, #-16777216	; 0xff000000
   13360:	0a00003f 	beq	13464 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x158>
   13364:	e595c008 	ldr	ip, [r5, #8]
   13368:	e281e47e 	add	lr, r1, #2113929216	; 0x7e000000
   1336c:	e35c0000 	cmp	ip, #0
   13370:	0a000040 	beq	13478 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x16c>
   13374:	e1a04804 	lsl	r4, r4, #16
   13378:	e3821103 	orr	r1, r2, #-1073741824	; 0xc0000000
   1337c:	e3844fd2 	orr	r4, r4, #840	; 0x348
   13380:	e1a00002 	mov	r0, r2
   13384:	e7e16454 	ubfx	r6, r4, #8, #2
   13388:	e5cc4000 	strb	r4, [ip]
   1338c:	e1a02824 	lsr	r2, r4, #16
   13390:	e1a04c24 	lsr	r4, r4, #24
   13394:	e5cc4003 	strb	r4, [ip, #3]
   13398:	e7e74851 	ubfx	r4, r1, #16, #8
   1339c:	e5cc2002 	strb	r2, [ip, #2]
   133a0:	e7e72451 	ubfx	r2, r1, #8, #8
   133a4:	e5cc1004 	strb	r1, [ip, #4]
   133a8:	e1a01c21 	lsr	r1, r1, #24
   133ac:	e5cc4006 	strb	r4, [ip, #6]
   133b0:	e7e7445e 	ubfx	r4, lr, #8, #8
   133b4:	e5cce008 	strb	lr, [ip, #8]
   133b8:	e7e77453 	ubfx	r7, r3, #8, #8
   133bc:	e5cc6001 	strb	r6, [ip, #1]
   133c0:	e7e76853 	ubfx	r6, r3, #16, #8
   133c4:	e5cc2005 	strb	r2, [ip, #5]
   133c8:	e3a02000 	mov	r2, #0
   133cc:	e5cc1007 	strb	r1, [ip, #7]
   133d0:	e7e7185e 	ubfx	r1, lr, #16, #8
   133d4:	e5cc4009 	strb	r4, [ip, #9]
   133d8:	e1a0ec2e 	lsr	lr, lr, #24
   133dc:	e1a04c23 	lsr	r4, r3, #24
   133e0:	e5cc100a 	strb	r1, [ip, #10]
   133e4:	e5cce00b 	strb	lr, [ip, #11]
   133e8:	e1a01003 	mov	r1, r3
   133ec:	e5cc700d 	strb	r7, [ip, #13]
   133f0:	e5cc600e 	strb	r6, [ip, #14]
   133f4:	e5cc400f 	strb	r4, [ip, #15]
   133f8:	e5cc300c 	strb	r3, [ip, #12]
   133fc:	e5cc2010 	strb	r2, [ip, #16]
   13400:	e5cc2011 	strb	r2, [ip, #17]
   13404:	e5cc2012 	strb	r2, [ip, #18]
   13408:	e5cc2013 	strb	r2, [ip, #19]
   1340c:	e5cc2014 	strb	r2, [ip, #20]
   13410:	e5cc2015 	strb	r2, [ip, #21]
   13414:	e5cc2016 	strb	r2, [ip, #22]
   13418:	e5cc2017 	strb	r2, [ip, #23]
   1341c:	e5852020 	str	r2, [r5, #32]
   13420:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13424:	eafff779 	b	11210 <CleanAndInvalidateDataCacheRange>
   13428:	e3061954 	movw	r1, #26964	; 0x6954
   1342c:	e3401001 	movt	r1, #1
   13430:	e2810074 	add	r0, r1, #116	; 0x74
   13434:	e3a020e5 	mov	r2, #229	; 0xe5
   13438:	ebfffb58 	bl	121a0 <assertion_failed>
   1343c:	e3061954 	movw	r1, #26964	; 0x6954
   13440:	e3401001 	movt	r1, #1
   13444:	e2810084 	add	r0, r1, #132	; 0x84
   13448:	e3a020e6 	mov	r2, #230	; 0xe6
   1344c:	ebfffb53 	bl	121a0 <assertion_failed>
   13450:	e3061954 	movw	r1, #26964	; 0x6954
   13454:	e3401001 	movt	r1, #1
   13458:	e28100bc 	add	r0, r1, #188	; 0xbc
   1345c:	e3a020e7 	mov	r2, #231	; 0xe7
   13460:	ebfffb4e 	bl	121a0 <assertion_failed>
   13464:	e3061954 	movw	r1, #26964	; 0x6954
   13468:	e3401001 	movt	r1, #1
   1346c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   13470:	e3a020ec 	mov	r2, #236	; 0xec
   13474:	ebfffb49 	bl	121a0 <assertion_failed>
   13478:	e3061954 	movw	r1, #26964	; 0x6954
   1347c:	e3401001 	movt	r1, #1
   13480:	e28100a4 	add	r0, r1, #164	; 0xa4
   13484:	e3a020ef 	mov	r2, #239	; 0xef
   13488:	ebfffb44 	bl	121a0 <assertion_failed>
   1348c:	e3061954 	movw	r1, #26964	; 0x6954
   13490:	e3401001 	movt	r1, #1
   13494:	e28100d4 	add	r0, r1, #212	; 0xd4
   13498:	e3a020e9 	mov	r2, #233	; 0xe9
   1349c:	ebfffb3f 	bl	121a0 <assertion_failed>

000134a0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   134a0:	e3510000 	cmp	r1, #0
   134a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   134a8:	e59de01c 	ldr	lr, [sp, #28]
   134ac:	e1a07000 	mov	r7, r0
   134b0:	e59d8020 	ldr	r8, [sp, #32]
   134b4:	e59d0018 	ldr	r0, [sp, #24]
   134b8:	0a000050 	beq	13600 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
   134bc:	e3520000 	cmp	r2, #0
   134c0:	0a000053 	beq	13614 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x174>
   134c4:	e3530000 	cmp	r3, #0
   134c8:	0a000056 	beq	13628 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   134cc:	e3530801 	cmp	r3, #65536	; 0x10000
   134d0:	2a000059 	bcs	1363c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x19c>
   134d4:	e3500000 	cmp	r0, #0
   134d8:	0a00005c 	beq	13650 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b0>
   134dc:	e3500901 	cmp	r0, #16384	; 0x4000
   134e0:	2a00005f 	bcs	13664 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c4>
   134e4:	e35e0801 	cmp	lr, #65536	; 0x10000
   134e8:	2a00003f 	bcs	135ec <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   134ec:	e358000f 	cmp	r8, #15
   134f0:	8a000060 	bhi	13678 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1d8>
   134f4:	e597c000 	ldr	ip, [r7]
   134f8:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   134fc:	e28cc070 	add	ip, ip, #112	; 0x70
   13500:	e1a0c40c 	lsl	ip, ip, #8
   13504:	e59cc020 	ldr	ip, [ip, #32]
   13508:	e31c0201 	tst	ip, #268435456	; 0x10000000
   1350c:	1a00005e 	bne	1368c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ec>
   13510:	e597c008 	ldr	ip, [r7, #8]
   13514:	e35c0000 	cmp	ip, #0
   13518:	0a000060 	beq	136a0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   1351c:	e3006332 	movw	r6, #818	; 0x332
   13520:	e2405001 	sub	r5, r0, #1
   13524:	e3814103 	orr	r4, r1, #-1073741824	; 0xc0000000
   13528:	e1a0e80e 	lsl	lr, lr, #16
   1352c:	e1866608 	orr	r6, r6, r8, lsl #12
   13530:	e1835805 	orr	r5, r3, r5, lsl #16
   13534:	e5cc6000 	strb	r6, [ip]
   13538:	e3828103 	orr	r8, r2, #-1073741824	; 0xc0000000
   1353c:	e1a01426 	lsr	r1, r6, #8
   13540:	e5cc4008 	strb	r4, [ip, #8]
   13544:	e5cc1001 	strb	r1, [ip, #1]
   13548:	e7e71856 	ubfx	r1, r6, #16, #8
   1354c:	e1a06c26 	lsr	r6, r6, #24
   13550:	e5cc1002 	strb	r1, [ip, #2]
   13554:	e5cc6003 	strb	r6, [ip, #3]
   13558:	e0010390 	mul	r1, r0, r3
   1355c:	e7e76455 	ubfx	r6, r5, #8, #8
   13560:	e7e73454 	ubfx	r3, r4, #8, #8
   13564:	e7e70855 	ubfx	r0, r5, #16, #8
   13568:	e5cc500c 	strb	r5, [ip, #12]
   1356c:	e5cc600d 	strb	r6, [ip, #13]
   13570:	e1a05c25 	lsr	r5, r5, #24
   13574:	e7e76854 	ubfx	r6, r4, #16, #8
   13578:	e5cc3009 	strb	r3, [ip, #9]
   1357c:	e1a04c24 	lsr	r4, r4, #24
   13580:	e7e7385e 	ubfx	r3, lr, #16, #8
   13584:	e5cc000e 	strb	r0, [ip, #14]
   13588:	e6ef007e 	uxtb	r0, lr
   1358c:	e5cc500f 	strb	r5, [ip, #15]
   13590:	e1a0ec2e 	lsr	lr, lr, #24
   13594:	e5cc600a 	strb	r6, [ip, #10]
   13598:	e7e75858 	ubfx	r5, r8, #16, #8
   1359c:	e7e76458 	ubfx	r6, r8, #8, #8
   135a0:	e5cc400b 	strb	r4, [ip, #11]
   135a4:	e5cc3012 	strb	r3, [ip, #18]
   135a8:	e1a04c28 	lsr	r4, r8, #24
   135ac:	e3a03000 	mov	r3, #0
   135b0:	e5cc0010 	strb	r0, [ip, #16]
   135b4:	e5cce013 	strb	lr, [ip, #19]
   135b8:	e1a00002 	mov	r0, r2
   135bc:	e5cc8004 	strb	r8, [ip, #4]
   135c0:	e5cc6005 	strb	r6, [ip, #5]
   135c4:	e5cc5006 	strb	r5, [ip, #6]
   135c8:	e5cc4007 	strb	r4, [ip, #7]
   135cc:	e5cc3014 	strb	r3, [ip, #20]
   135d0:	e5cc3015 	strb	r3, [ip, #21]
   135d4:	e5cc3016 	strb	r3, [ip, #22]
   135d8:	e5cc3017 	strb	r3, [ip, #23]
   135dc:	e5cc3011 	strb	r3, [ip, #17]
   135e0:	e5873020 	str	r3, [r7, #32]
   135e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   135e8:	eafff708 	b	11210 <CleanAndInvalidateDataCacheRange>
   135ec:	e3061954 	movw	r1, #26964	; 0x6954
   135f0:	e3401001 	movt	r1, #1
   135f4:	e2810e19 	add	r0, r1, #400	; 0x190
   135f8:	e3002115 	movw	r2, #277	; 0x115
   135fc:	ebfffae7 	bl	121a0 <assertion_failed>
   13600:	e3061954 	movw	r1, #26964	; 0x6954
   13604:	e3401001 	movt	r1, #1
   13608:	e2810060 	add	r0, r1, #96	; 0x60
   1360c:	e300210f 	movw	r2, #271	; 0x10f
   13610:	ebfffae2 	bl	121a0 <assertion_failed>
   13614:	e3061954 	movw	r1, #26964	; 0x6954
   13618:	e3401001 	movt	r1, #1
   1361c:	e2810074 	add	r0, r1, #116	; 0x74
   13620:	e3a02e11 	mov	r2, #272	; 0x110
   13624:	ebfffadd 	bl	121a0 <assertion_failed>
   13628:	e3061954 	movw	r1, #26964	; 0x6954
   1362c:	e3401001 	movt	r1, #1
   13630:	e2810f4f 	add	r0, r1, #316	; 0x13c
   13634:	e3002111 	movw	r2, #273	; 0x111
   13638:	ebfffad8 	bl	121a0 <assertion_failed>
   1363c:	e3061954 	movw	r1, #26964	; 0x6954
   13640:	e3401001 	movt	r1, #1
   13644:	e2810e15 	add	r0, r1, #336	; 0x150
   13648:	e3002112 	movw	r2, #274	; 0x112
   1364c:	ebfffad3 	bl	121a0 <assertion_failed>
   13650:	e3061954 	movw	r1, #26964	; 0x6954
   13654:	e3401001 	movt	r1, #1
   13658:	e2810f5a 	add	r0, r1, #360	; 0x168
   1365c:	e3002113 	movw	r2, #275	; 0x113
   13660:	ebffface 	bl	121a0 <assertion_failed>
   13664:	e3061954 	movw	r1, #26964	; 0x6954
   13668:	e3401001 	movt	r1, #1
   1366c:	e2810f5e 	add	r0, r1, #376	; 0x178
   13670:	e3a02f45 	mov	r2, #276	; 0x114
   13674:	ebfffac9 	bl	121a0 <assertion_failed>
   13678:	e3061954 	movw	r1, #26964	; 0x6954
   1367c:	e3401001 	movt	r1, #1
   13680:	e2810090 	add	r0, r1, #144	; 0x90
   13684:	e3002116 	movw	r2, #278	; 0x116
   13688:	ebfffac4 	bl	121a0 <assertion_failed>
   1368c:	e3061954 	movw	r1, #26964	; 0x6954
   13690:	e3401001 	movt	r1, #1
   13694:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   13698:	e3a02f46 	mov	r2, #280	; 0x118
   1369c:	ebfffabf 	bl	121a0 <assertion_failed>
   136a0:	e3061954 	movw	r1, #26964	; 0x6954
   136a4:	e3401001 	movt	r1, #1
   136a8:	e28100a4 	add	r0, r1, #164	; 0xa4
   136ac:	e300211a 	movw	r2, #282	; 0x11a
   136b0:	ebfffaba 	bl	121a0 <assertion_failed>

000136b4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   136b4:	e92d4070 	push	{r4, r5, r6, lr}
   136b8:	e1a05001 	mov	r5, r1
   136bc:	e5901000 	ldr	r1, [r0]
   136c0:	e351000c 	cmp	r1, #12
   136c4:	8a000014 	bhi	1371c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   136c8:	e1a04000 	mov	r4, r0
   136cc:	e590000c 	ldr	r0, [r0, #12]
   136d0:	e3500000 	cmp	r0, #0
   136d4:	0a000015 	beq	13730 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   136d8:	e5d43010 	ldrb	r3, [r4, #16]
   136dc:	e1a06002 	mov	r6, r2
   136e0:	e3530000 	cmp	r3, #0
   136e4:	0a000004 	beq	136fc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   136e8:	e3550000 	cmp	r5, #0
   136ec:	e5845014 	str	r5, [r4, #20]
   136f0:	0a000013 	beq	13744 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   136f4:	e5846018 	str	r6, [r4, #24]
   136f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   136fc:	e1a03004 	mov	r3, r4
   13700:	e2811010 	add	r1, r1, #16
   13704:	e3032aa4 	movw	r2, #15012	; 0x3aa4
   13708:	e3402001 	movt	r2, #1
   1370c:	ebfff9d5 	bl	11e68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13710:	e3a03001 	mov	r3, #1
   13714:	e5c43010 	strb	r3, [r4, #16]
   13718:	eafffff2 	b	136e8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   1371c:	e3061954 	movw	r1, #26964	; 0x6954
   13720:	e3401001 	movt	r1, #1
   13724:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   13728:	e3002139 	movw	r2, #313	; 0x139
   1372c:	ebfffa9b 	bl	121a0 <assertion_failed>
   13730:	e3061954 	movw	r1, #26964	; 0x6954
   13734:	e3401001 	movt	r1, #1
   13738:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   1373c:	e300213a 	movw	r2, #314	; 0x13a
   13740:	ebfffa96 	bl	121a0 <assertion_failed>
   13744:	e3061954 	movw	r1, #26964	; 0x6954
   13748:	e3401001 	movt	r1, #1
   1374c:	e2810f85 	add	r0, r1, #532	; 0x214
   13750:	e3a02f51 	mov	r2, #324	; 0x144
   13754:	ebfffa91 	bl	121a0 <assertion_failed>

00013758 <CDMAChannel::Start()>:
   13758:	e5902000 	ldr	r2, [r0]
   1375c:	e92d4010 	push	{r4, lr}
   13760:	e352000b 	cmp	r2, #11
   13764:	8a000033 	bhi	13838 <CDMAChannel::Start()+0xe0>
   13768:	e1a04000 	mov	r4, r0
   1376c:	e5900008 	ldr	r0, [r0, #8]
   13770:	e3500000 	cmp	r0, #0
   13774:	0a000034 	beq	1384c <CDMAChannel::Start()+0xf4>
   13778:	e5943014 	ldr	r3, [r4, #20]
   1377c:	e3530000 	cmp	r3, #0
   13780:	0a000014 	beq	137d8 <CDMAChannel::Start()+0x80>
   13784:	e594300c 	ldr	r3, [r4, #12]
   13788:	e3530000 	cmp	r3, #0
   1378c:	0a000033 	beq	13860 <CDMAChannel::Start()+0x108>
   13790:	e5d43010 	ldrb	r3, [r4, #16]
   13794:	e3530000 	cmp	r3, #0
   13798:	0a00003a 	beq	13888 <CDMAChannel::Start()+0x130>
   1379c:	e5d0e001 	ldrb	lr, [r0, #1]
   137a0:	e5d03000 	ldrb	r3, [r0]
   137a4:	e5d0c002 	ldrb	ip, [r0, #2]
   137a8:	e5d01003 	ldrb	r1, [r0, #3]
   137ac:	e183340e 	orr	r3, r3, lr, lsl #8
   137b0:	e183380c 	orr	r3, r3, ip, lsl #16
   137b4:	e1833c01 	orr	r3, r3, r1, lsl #24
   137b8:	e3833001 	orr	r3, r3, #1
   137bc:	e7e7e453 	ubfx	lr, r3, #8, #8
   137c0:	e7e7c853 	ubfx	ip, r3, #16, #8
   137c4:	e1a01c23 	lsr	r1, r3, #24
   137c8:	e5c03000 	strb	r3, [r0]
   137cc:	e5c0e001 	strb	lr, [r0, #1]
   137d0:	e5c0c002 	strb	ip, [r0, #2]
   137d4:	e5c01003 	strb	r1, [r0, #3]
   137d8:	e282383f 	add	r3, r2, #4128768	; 0x3f0000
   137dc:	e2833070 	add	r3, r3, #112	; 0x70
   137e0:	e1a03403 	lsl	r3, r3, #8
   137e4:	e5931000 	ldr	r1, [r3]
   137e8:	e3110004 	tst	r1, #4
   137ec:	1a000020 	bne	13874 <CDMAChannel::Start()+0x11c>
   137f0:	e3a01a07 	mov	r1, #28672	; 0x7000
   137f4:	e3431f00 	movt	r1, #16128	; 0x3f00
   137f8:	e3a0c001 	mov	ip, #1
   137fc:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   13800:	e011221c 	ands	r2, r1, ip, lsl r2
   13804:	1a000024 	bne	1389c <CDMAChannel::Start()+0x144>
   13808:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   1380c:	e3a01020 	mov	r1, #32
   13810:	e5832004 	str	r2, [r3, #4]
   13814:	ebfff67d 	bl	11210 <CleanAndInvalidateDataCacheRange>
   13818:	e5943000 	ldr	r3, [r4]
   1381c:	e3a02001 	mov	r2, #1
   13820:	e34120f1 	movt	r2, #4337	; 0x10f1
   13824:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13828:	e2833070 	add	r3, r3, #112	; 0x70
   1382c:	e1a03403 	lsl	r3, r3, #8
   13830:	e5832000 	str	r2, [r3]
   13834:	e8bd8010 	pop	{r4, pc}
   13838:	e3061954 	movw	r1, #26964	; 0x6954
   1383c:	e3401001 	movt	r1, #1
   13840:	e2810030 	add	r0, r1, #48	; 0x30
   13844:	e3a02f55 	mov	r2, #340	; 0x154
   13848:	ebfffa54 	bl	121a0 <assertion_failed>
   1384c:	e3061954 	movw	r1, #26964	; 0x6954
   13850:	e3401001 	movt	r1, #1
   13854:	e28100a4 	add	r0, r1, #164	; 0xa4
   13858:	e3002155 	movw	r2, #341	; 0x155
   1385c:	ebfffa4f 	bl	121a0 <assertion_failed>
   13860:	e3061954 	movw	r1, #26964	; 0x6954
   13864:	e3401001 	movt	r1, #1
   13868:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   1386c:	e3002159 	movw	r2, #345	; 0x159
   13870:	ebfffa4a 	bl	121a0 <assertion_failed>
   13874:	e3061954 	movw	r1, #26964	; 0x6954
   13878:	e3401001 	movt	r1, #1
   1387c:	e2810d09 	add	r0, r1, #576	; 0x240
   13880:	e3a02e16 	mov	r2, #352	; 0x160
   13884:	ebfffa45 	bl	121a0 <assertion_failed>
   13888:	e3061954 	movw	r1, #26964	; 0x6954
   1388c:	e3401001 	movt	r1, #1
   13890:	e2810e23 	add	r0, r1, #560	; 0x230
   13894:	e300215a 	movw	r2, #346	; 0x15a
   13898:	ebfffa40 	bl	121a0 <assertion_failed>
   1389c:	e3061954 	movw	r1, #26964	; 0x6954
   138a0:	e3401001 	movt	r1, #1
   138a4:	e2810f9d 	add	r0, r1, #628	; 0x274
   138a8:	e3002161 	movw	r2, #353	; 0x161
   138ac:	ebfffa3b 	bl	121a0 <assertion_failed>

000138b0 <CDMAChannel::Wait()>:
   138b0:	e5902000 	ldr	r2, [r0]
   138b4:	e92d4010 	push	{r4, lr}
   138b8:	e352000b 	cmp	r2, #11
   138bc:	8a000014 	bhi	13914 <CDMAChannel::Wait()+0x64>
   138c0:	e5903014 	ldr	r3, [r0, #20]
   138c4:	e1a04000 	mov	r4, r0
   138c8:	e3530000 	cmp	r3, #0
   138cc:	0282283f 	addeq	r2, r2, #4128768	; 0x3f0000
   138d0:	02822070 	addeq	r2, r2, #112	; 0x70
   138d4:	01a02402 	lsleq	r2, r2, #8
   138d8:	1a000012 	bne	13928 <CDMAChannel::Wait()+0x78>
   138dc:	e5923000 	ldr	r3, [r2]
   138e0:	e3130001 	tst	r3, #1
   138e4:	1afffffc 	bne	138dc <CDMAChannel::Wait()+0x2c>
   138e8:	e5942020 	ldr	r2, [r4, #32]
   138ec:	e2233c01 	eor	r3, r3, #256	; 0x100
   138f0:	e7e00453 	ubfx	r0, r3, #8, #1
   138f4:	e3520000 	cmp	r2, #0
   138f8:	e5c4001c 	strb	r0, [r4, #28]
   138fc:	08bd8010 	popeq	{r4, pc}
   13900:	e1a00002 	mov	r0, r2
   13904:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13908:	ebfff640 	bl	11210 <CleanAndInvalidateDataCacheRange>
   1390c:	e5d4001c 	ldrb	r0, [r4, #28]
   13910:	e8bd8010 	pop	{r4, pc}
   13914:	e3061954 	movw	r1, #26964	; 0x6954
   13918:	e3401001 	movt	r1, #1
   1391c:	e2810030 	add	r0, r1, #48	; 0x30
   13920:	e3a02f5e 	mov	r2, #376	; 0x178
   13924:	ebfffa1d 	bl	121a0 <assertion_failed>
   13928:	e3061954 	movw	r1, #26964	; 0x6954
   1392c:	e3401001 	movt	r1, #1
   13930:	e2810faa 	add	r0, r1, #680	; 0x2a8
   13934:	e3002179 	movw	r2, #377	; 0x179
   13938:	ebfffa18 	bl	121a0 <assertion_failed>

0001393c <CDMAChannel::GetStatus()>:
   1393c:	e5903000 	ldr	r3, [r0]
   13940:	e92d4010 	push	{r4, lr}
   13944:	e353000b 	cmp	r3, #11
   13948:	8a000007 	bhi	1396c <CDMAChannel::GetStatus()+0x30>
   1394c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13950:	e2833070 	add	r3, r3, #112	; 0x70
   13954:	e1a03403 	lsl	r3, r3, #8
   13958:	e5933000 	ldr	r3, [r3]
   1395c:	e3130001 	tst	r3, #1
   13960:	1a000006 	bne	13980 <CDMAChannel::GetStatus()+0x44>
   13964:	e5d0001c 	ldrb	r0, [r0, #28]
   13968:	e8bd8010 	pop	{r4, pc}
   1396c:	e3061954 	movw	r1, #26964	; 0x6954
   13970:	e3401001 	movt	r1, #1
   13974:	e2810030 	add	r0, r1, #48	; 0x30
   13978:	e3a02f66 	mov	r2, #408	; 0x198
   1397c:	ebfffa07 	bl	121a0 <assertion_failed>
   13980:	e3061954 	movw	r1, #26964	; 0x6954
   13984:	e3401001 	movt	r1, #1
   13988:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   1398c:	e3002199 	movw	r2, #409	; 0x199
   13990:	ebfffa02 	bl	121a0 <assertion_failed>

00013994 <CDMAChannel::InterruptHandler()>:
   13994:	e92d4010 	push	{r4, lr}
   13998:	e1a04000 	mov	r4, r0
   1399c:	e5900020 	ldr	r0, [r0, #32]
   139a0:	e3500000 	cmp	r0, #0
   139a4:	1a000020 	bne	13a2c <CDMAChannel::InterruptHandler()+0x98>
   139a8:	e5941000 	ldr	r1, [r4]
   139ac:	e351000b 	cmp	r1, #11
   139b0:	8a000022 	bhi	13a40 <CDMAChannel::InterruptHandler()+0xac>
   139b4:	e3a02a07 	mov	r2, #28672	; 0x7000
   139b8:	e3432f00 	movt	r2, #16128	; 0x3f00
   139bc:	e3a03001 	mov	r3, #1
   139c0:	e5920fe0 	ldr	r0, [r2, #4064]	; 0xfe0
   139c4:	e1a03113 	lsl	r3, r3, r1
   139c8:	e1130000 	tst	r3, r0
   139cc:	0a000020 	beq	13a54 <CDMAChannel::InterruptHandler()+0xc0>
   139d0:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   139d4:	e5943000 	ldr	r3, [r4]
   139d8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   139dc:	e2833070 	add	r3, r3, #112	; 0x70
   139e0:	e1a03403 	lsl	r3, r3, #8
   139e4:	e5931000 	ldr	r1, [r3]
   139e8:	e3110004 	tst	r1, #4
   139ec:	0a00001d 	beq	13a68 <CDMAChannel::InterruptHandler()+0xd4>
   139f0:	e3110001 	tst	r1, #1
   139f4:	1a000020 	bne	13a7c <CDMAChannel::InterruptHandler()+0xe8>
   139f8:	e594e014 	ldr	lr, [r4, #20]
   139fc:	e2211c01 	eor	r1, r1, #256	; 0x100
   13a00:	e7e01451 	ubfx	r1, r1, #8, #1
   13a04:	e3a02004 	mov	r2, #4
   13a08:	e35e0000 	cmp	lr, #0
   13a0c:	e5832000 	str	r2, [r3]
   13a10:	e5c4101c 	strb	r1, [r4, #28]
   13a14:	0a00001d 	beq	13a90 <CDMAChannel::InterruptHandler()+0xfc>
   13a18:	e5942018 	ldr	r2, [r4, #24]
   13a1c:	e1a0300e 	mov	r3, lr
   13a20:	e5940000 	ldr	r0, [r4]
   13a24:	e8bd4010 	pop	{r4, lr}
   13a28:	e12fff13 	bx	r3
   13a2c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13a30:	ebfff5f6 	bl	11210 <CleanAndInvalidateDataCacheRange>
   13a34:	e5941000 	ldr	r1, [r4]
   13a38:	e351000b 	cmp	r1, #11
   13a3c:	9affffdc 	bls	139b4 <CDMAChannel::InterruptHandler()+0x20>
   13a40:	e3061954 	movw	r1, #26964	; 0x6954
   13a44:	e3401001 	movt	r1, #1
   13a48:	e2810030 	add	r0, r1, #48	; 0x30
   13a4c:	e30021a7 	movw	r2, #423	; 0x1a7
   13a50:	ebfff9d2 	bl	121a0 <assertion_failed>
   13a54:	e3061954 	movw	r1, #26964	; 0x6954
   13a58:	e3401001 	movt	r1, #1
   13a5c:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   13a60:	e30021ad 	movw	r2, #429	; 0x1ad
   13a64:	ebfff9cd 	bl	121a0 <assertion_failed>
   13a68:	e3061954 	movw	r1, #26964	; 0x6954
   13a6c:	e3401001 	movt	r1, #1
   13a70:	e2810e31 	add	r0, r1, #784	; 0x310
   13a74:	e30021b1 	movw	r2, #433	; 0x1b1
   13a78:	ebfff9c8 	bl	121a0 <assertion_failed>
   13a7c:	e3061954 	movw	r1, #26964	; 0x6954
   13a80:	e3401001 	movt	r1, #1
   13a84:	e2810e32 	add	r0, r1, #800	; 0x320
   13a88:	e30021b2 	movw	r2, #434	; 0x1b2
   13a8c:	ebfff9c3 	bl	121a0 <assertion_failed>
   13a90:	e3061954 	movw	r1, #26964	; 0x6954
   13a94:	e3401001 	movt	r1, #1
   13a98:	e2810f85 	add	r0, r1, #532	; 0x214
   13a9c:	e30021b9 	movw	r2, #441	; 0x1b9
   13aa0:	ebfff9be 	bl	121a0 <assertion_failed>

00013aa4 <CDMAChannel::InterruptStub(void*)>:
   13aa4:	e3500000 	cmp	r0, #0
   13aa8:	0a000000 	beq	13ab0 <CDMAChannel::InterruptStub(void*)+0xc>
   13aac:	eaffffb8 	b	13994 <CDMAChannel::InterruptHandler()>
   13ab0:	e3061954 	movw	r1, #26964	; 0x6954
   13ab4:	e3401001 	movt	r1, #1
   13ab8:	e92d4010 	push	{r4, lr}
   13abc:	e2810fcd 	add	r0, r1, #820	; 0x334
   13ac0:	e3a02d07 	mov	r2, #448	; 0x1c0
   13ac4:	ebfff9b5 	bl	121a0 <assertion_failed>

00013ac8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   13ac8:	e1a03000 	mov	r3, r0
   13acc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13ad0:	e3a0e000 	mov	lr, #0
   13ad4:	e1a0c00e 	mov	ip, lr
   13ad8:	e28020dc 	add	r2, r0, #220	; 0xdc
   13adc:	e5801000 	str	r1, [r0]
   13ae0:	e5e3e004 	strb	lr, [r3, #4]!
   13ae4:	e5a3c004 	str	ip, [r3, #4]!
   13ae8:	e1530002 	cmp	r3, r2
   13aec:	1afffffc 	bne	13ae4 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   13af0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00013af4 <CGPIOManager::~CGPIOManager()>:
   13af4:	e92d4010 	push	{r4, lr}
   13af8:	e2803004 	add	r3, r0, #4
   13afc:	e1a04000 	mov	r4, r0
   13b00:	e28010dc 	add	r1, r0, #220	; 0xdc
   13b04:	ea000001 	b	13b10 <CGPIOManager::~CGPIOManager()+0x1c>
   13b08:	e1530001 	cmp	r3, r1
   13b0c:	0a000008 	beq	13b34 <CGPIOManager::~CGPIOManager()+0x40>
   13b10:	e5b32004 	ldr	r2, [r3, #4]!
   13b14:	e3520000 	cmp	r2, #0
   13b18:	0afffffa 	beq	13b08 <CGPIOManager::~CGPIOManager()+0x14>
   13b1c:	e3061c94 	movw	r1, #27796	; 0x6c94
   13b20:	e3401001 	movt	r1, #1
   13b24:	e3060ca4 	movw	r0, #27812	; 0x6ca4
   13b28:	e3400001 	movt	r0, #1
   13b2c:	e3a0202c 	mov	r2, #44	; 0x2c
   13b30:	ebfff99a 	bl	121a0 <assertion_failed>
   13b34:	e5d43004 	ldrb	r3, [r4, #4]
   13b38:	e3530000 	cmp	r3, #0
   13b3c:	0a000004 	beq	13b54 <CGPIOManager::~CGPIOManager()+0x60>
   13b40:	e5940000 	ldr	r0, [r4]
   13b44:	e3500000 	cmp	r0, #0
   13b48:	0a000003 	beq	13b5c <CGPIOManager::~CGPIOManager()+0x68>
   13b4c:	e3a01034 	mov	r1, #52	; 0x34
   13b50:	ebfff903 	bl	11f64 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13b54:	e1a00004 	mov	r0, r4
   13b58:	e8bd8010 	pop	{r4, pc}
   13b5c:	e3061c94 	movw	r1, #27796	; 0x6c94
   13b60:	e3401001 	movt	r1, #1
   13b64:	e3060cb8 	movw	r0, #27832	; 0x6cb8
   13b68:	e3400001 	movt	r0, #1
   13b6c:	e3a02032 	mov	r2, #50	; 0x32
   13b70:	ebfff98a 	bl	121a0 <assertion_failed>

00013b74 <CGPIOManager::Initialize()>:
   13b74:	e5d03004 	ldrb	r3, [r0, #4]
   13b78:	e92d4010 	push	{r4, lr}
   13b7c:	e3530000 	cmp	r3, #0
   13b80:	1a00000b 	bne	13bb4 <CGPIOManager::Initialize()+0x40>
   13b84:	e1a04000 	mov	r4, r0
   13b88:	e5900000 	ldr	r0, [r0]
   13b8c:	e3500000 	cmp	r0, #0
   13b90:	0a00000d 	beq	13bcc <CGPIOManager::Initialize()+0x58>
   13b94:	e1a03004 	mov	r3, r4
   13b98:	e3a01034 	mov	r1, #52	; 0x34
   13b9c:	e3032de4 	movw	r2, #15844	; 0x3de4
   13ba0:	e3402001 	movt	r2, #1
   13ba4:	ebfff8af 	bl	11e68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13ba8:	e3a00001 	mov	r0, #1
   13bac:	e5c40004 	strb	r0, [r4, #4]
   13bb0:	e8bd8010 	pop	{r4, pc}
   13bb4:	e3061c94 	movw	r1, #27796	; 0x6c94
   13bb8:	e3401001 	movt	r1, #1
   13bbc:	e3060ccc 	movw	r0, #27852	; 0x6ccc
   13bc0:	e3400001 	movt	r0, #1
   13bc4:	e3a0203b 	mov	r2, #59	; 0x3b
   13bc8:	ebfff974 	bl	121a0 <assertion_failed>
   13bcc:	e3061c94 	movw	r1, #27796	; 0x6c94
   13bd0:	e3401001 	movt	r1, #1
   13bd4:	e3060cb8 	movw	r0, #27832	; 0x6cb8
   13bd8:	e3400001 	movt	r0, #1
   13bdc:	e3a0203c 	mov	r2, #60	; 0x3c
   13be0:	ebfff96e 	bl	121a0 <assertion_failed>

00013be4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   13be4:	e5d03004 	ldrb	r3, [r0, #4]
   13be8:	e92d4010 	push	{r4, lr}
   13bec:	e3530000 	cmp	r3, #0
   13bf0:	0a00000a 	beq	13c20 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   13bf4:	e3510000 	cmp	r1, #0
   13bf8:	0a00000e 	beq	13c38 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   13bfc:	e5913004 	ldr	r3, [r1, #4]
   13c00:	e3530035 	cmp	r3, #53	; 0x35
   13c04:	8a000011 	bhi	13c50 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   13c08:	e0800103 	add	r0, r0, r3, lsl #2
   13c0c:	e5903008 	ldr	r3, [r0, #8]
   13c10:	e3530000 	cmp	r3, #0
   13c14:	1a000013 	bne	13c68 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   13c18:	e5801008 	str	r1, [r0, #8]
   13c1c:	e8bd8010 	pop	{r4, pc}
   13c20:	e3061c94 	movw	r1, #27796	; 0x6c94
   13c24:	e3401001 	movt	r1, #1
   13c28:	e3060ce0 	movw	r0, #27872	; 0x6ce0
   13c2c:	e3400001 	movt	r0, #1
   13c30:	e3a02045 	mov	r2, #69	; 0x45
   13c34:	ebfff959 	bl	121a0 <assertion_failed>
   13c38:	e3061c94 	movw	r1, #27796	; 0x6c94
   13c3c:	e3401001 	movt	r1, #1
   13c40:	e3060cf0 	movw	r0, #27888	; 0x6cf0
   13c44:	e3400001 	movt	r0, #1
   13c48:	e3a02047 	mov	r2, #71	; 0x47
   13c4c:	ebfff953 	bl	121a0 <assertion_failed>
   13c50:	e3061c94 	movw	r1, #27796	; 0x6c94
   13c54:	e3401001 	movt	r1, #1
   13c58:	e3060cfc 	movw	r0, #27900	; 0x6cfc
   13c5c:	e3400001 	movt	r0, #1
   13c60:	e3a02049 	mov	r2, #73	; 0x49
   13c64:	ebfff94d 	bl	121a0 <assertion_failed>
   13c68:	e3061c94 	movw	r1, #27796	; 0x6c94
   13c6c:	e3401001 	movt	r1, #1
   13c70:	e3060ca4 	movw	r0, #27812	; 0x6ca4
   13c74:	e3400001 	movt	r0, #1
   13c78:	e3a0204b 	mov	r2, #75	; 0x4b
   13c7c:	ebfff947 	bl	121a0 <assertion_failed>

00013c80 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   13c80:	e5d03004 	ldrb	r3, [r0, #4]
   13c84:	e92d4010 	push	{r4, lr}
   13c88:	e3530000 	cmp	r3, #0
   13c8c:	0a00000b 	beq	13cc0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   13c90:	e3510000 	cmp	r1, #0
   13c94:	0a00000f 	beq	13cd8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   13c98:	e5913004 	ldr	r3, [r1, #4]
   13c9c:	e3530035 	cmp	r3, #53	; 0x35
   13ca0:	8a000012 	bhi	13cf0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   13ca4:	e0800103 	add	r0, r0, r3, lsl #2
   13ca8:	e5903008 	ldr	r3, [r0, #8]
   13cac:	e3530000 	cmp	r3, #0
   13cb0:	0a000014 	beq	13d08 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   13cb4:	e3a03000 	mov	r3, #0
   13cb8:	e5803008 	str	r3, [r0, #8]
   13cbc:	e8bd8010 	pop	{r4, pc}
   13cc0:	e3061c94 	movw	r1, #27796	; 0x6c94
   13cc4:	e3401001 	movt	r1, #1
   13cc8:	e3060ce0 	movw	r0, #27872	; 0x6ce0
   13ccc:	e3400001 	movt	r0, #1
   13cd0:	e3a02052 	mov	r2, #82	; 0x52
   13cd4:	ebfff931 	bl	121a0 <assertion_failed>
   13cd8:	e3061c94 	movw	r1, #27796	; 0x6c94
   13cdc:	e3401001 	movt	r1, #1
   13ce0:	e3060cf0 	movw	r0, #27888	; 0x6cf0
   13ce4:	e3400001 	movt	r0, #1
   13ce8:	e3a02054 	mov	r2, #84	; 0x54
   13cec:	ebfff92b 	bl	121a0 <assertion_failed>
   13cf0:	e3061c94 	movw	r1, #27796	; 0x6c94
   13cf4:	e3401001 	movt	r1, #1
   13cf8:	e3060cfc 	movw	r0, #27900	; 0x6cfc
   13cfc:	e3400001 	movt	r0, #1
   13d00:	e3a02056 	mov	r2, #86	; 0x56
   13d04:	ebfff925 	bl	121a0 <assertion_failed>
   13d08:	e3061c94 	movw	r1, #27796	; 0x6c94
   13d0c:	e3401001 	movt	r1, #1
   13d10:	e3060d10 	movw	r0, #27920	; 0x6d10
   13d14:	e3400001 	movt	r0, #1
   13d18:	e3a02058 	mov	r2, #88	; 0x58
   13d1c:	ebfff91f 	bl	121a0 <assertion_failed>

00013d20 <CGPIOManager::InterruptHandler()>:
   13d20:	e5d03004 	ldrb	r3, [r0, #4]
   13d24:	e92d4070 	push	{r4, r5, r6, lr}
   13d28:	e3530000 	cmp	r3, #0
   13d2c:	0a00001b 	beq	13da0 <CGPIOManager::InterruptHandler()+0x80>
   13d30:	e3a03000 	mov	r3, #0
   13d34:	e3433f20 	movt	r3, #16160	; 0x3f20
   13d38:	e1a02003 	mov	r2, r3
   13d3c:	e3a04000 	mov	r4, #0
   13d40:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   13d44:	ea000005 	b	13d60 <CGPIOManager::InterruptHandler()+0x40>
   13d48:	e2844001 	add	r4, r4, #1
   13d4c:	e314001f 	tst	r4, #31
   13d50:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   13d54:	11a030a3 	lsrne	r3, r3, #1
   13d58:	e3540036 	cmp	r4, #54	; 0x36
   13d5c:	08bd8070 	popeq	{r4, r5, r6, pc}
   13d60:	e3130001 	tst	r3, #1
   13d64:	0afffff7 	beq	13d48 <CGPIOManager::InterruptHandler()+0x28>
   13d68:	e2843002 	add	r3, r4, #2
   13d6c:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   13d70:	e3550000 	cmp	r5, #0
   13d74:	0a00000f 	beq	13db8 <CGPIOManager::InterruptHandler()+0x98>
   13d78:	e1a00005 	mov	r0, r5
   13d7c:	ebffd654 	bl	96d4 <CGPIOPin::InterruptHandler()>
   13d80:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   13d84:	e3530000 	cmp	r3, #0
   13d88:	13a03040 	movne	r3, #64	; 0x40
   13d8c:	13433f20 	movtne	r3, #16160	; 0x3f20
   13d90:	15952008 	ldrne	r2, [r5, #8]
   13d94:	1595100c 	ldrne	r1, [r5, #12]
   13d98:	17821003 	strne	r1, [r2, r3]
   13d9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13da0:	e3061c94 	movw	r1, #27796	; 0x6c94
   13da4:	e3401001 	movt	r1, #1
   13da8:	e3060ce0 	movw	r0, #27872	; 0x6ce0
   13dac:	e3400001 	movt	r0, #1
   13db0:	e3a0205e 	mov	r2, #94	; 0x5e
   13db4:	ebfff8f9 	bl	121a0 <assertion_failed>
   13db8:	e1a00004 	mov	r0, r4
   13dbc:	ebffd663 	bl	9750 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   13dc0:	e3a03010 	mov	r3, #16
   13dc4:	e3403fc8 	movt	r3, #4040	; 0xfc8
   13dc8:	e204101f 	and	r1, r4, #31
   13dcc:	e3a02001 	mov	r2, #1
   13dd0:	e08332a4 	add	r3, r3, r4, lsr #5
   13dd4:	e1a03103 	lsl	r3, r3, #2
   13dd8:	e1a02112 	lsl	r2, r2, r1
   13ddc:	e5832000 	str	r2, [r3]
   13de0:	e8bd8070 	pop	{r4, r5, r6, pc}

00013de4 <CGPIOManager::InterruptStub(void*)>:
   13de4:	e3500000 	cmp	r0, #0
   13de8:	0a000000 	beq	13df0 <CGPIOManager::InterruptStub(void*)+0xc>
   13dec:	eaffffcb 	b	13d20 <CGPIOManager::InterruptHandler()>
   13df0:	e3061c94 	movw	r1, #27796	; 0x6c94
   13df4:	e3401001 	movt	r1, #1
   13df8:	e3060d24 	movw	r0, #27940	; 0x6d24
   13dfc:	e3400001 	movt	r0, #1
   13e00:	e92d4010 	push	{r4, lr}
   13e04:	e3a0208e 	mov	r2, #142	; 0x8e
   13e08:	ebfff8e4 	bl	121a0 <assertion_failed>

00013e0c <CPtrList::CPtrList()>:
   13e0c:	e3a02000 	mov	r2, #0
   13e10:	e5802000 	str	r2, [r0]
   13e14:	e12fff1e 	bx	lr

00013e18 <CPtrList::~CPtrList()>:
   13e18:	e5903000 	ldr	r3, [r0]
   13e1c:	e3530000 	cmp	r3, #0
   13e20:	1a000000 	bne	13e28 <CPtrList::~CPtrList()+0x10>
   13e24:	e12fff1e 	bx	lr
   13e28:	e3061d30 	movw	r1, #27952	; 0x6d30
   13e2c:	e3401001 	movt	r1, #1
   13e30:	e3060d3c 	movw	r0, #27964	; 0x6d3c
   13e34:	e3400001 	movt	r0, #1
   13e38:	e92d4010 	push	{r4, lr}
   13e3c:	e3a0202a 	mov	r2, #42	; 0x2a
   13e40:	ebfff8d6 	bl	121a0 <assertion_failed>

00013e44 <CPtrList::GetFirst()>:
   13e44:	e5900000 	ldr	r0, [r0]
   13e48:	e12fff1e 	bx	lr

00013e4c <CPtrList::GetNext(TPtrListElement*)>:
   13e4c:	e3510000 	cmp	r1, #0
   13e50:	e92d4010 	push	{r4, lr}
   13e54:	0a000006 	beq	13e74 <CPtrList::GetNext(TPtrListElement*)+0x28>
   13e58:	e5912000 	ldr	r2, [r1]
   13e5c:	e3043d43 	movw	r3, #19779	; 0x4d43
   13e60:	e345304c 	movt	r3, #20556	; 0x504c
   13e64:	e1520003 	cmp	r2, r3
   13e68:	1a000007 	bne	13e8c <CPtrList::GetNext(TPtrListElement*)+0x40>
   13e6c:	e5910008 	ldr	r0, [r1, #8]
   13e70:	e8bd8010 	pop	{r4, pc}
   13e74:	e3061d30 	movw	r1, #27952	; 0x6d30
   13e78:	e3401001 	movt	r1, #1
   13e7c:	e3060944 	movw	r0, #26948	; 0x6944
   13e80:	e3400001 	movt	r0, #1
   13e84:	e3a02034 	mov	r2, #52	; 0x34
   13e88:	ebfff8c4 	bl	121a0 <assertion_failed>
   13e8c:	e3061d30 	movw	r1, #27952	; 0x6d30
   13e90:	e3401001 	movt	r1, #1
   13e94:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   13e98:	e3400001 	movt	r0, #1
   13e9c:	e3a02035 	mov	r2, #53	; 0x35
   13ea0:	ebfff8be 	bl	121a0 <assertion_failed>

00013ea4 <CPtrList::GetPtr(TPtrListElement*)>:
   13ea4:	e3510000 	cmp	r1, #0
   13ea8:	e92d4010 	push	{r4, lr}
   13eac:	0a000006 	beq	13ecc <CPtrList::GetPtr(TPtrListElement*)+0x28>
   13eb0:	e5912000 	ldr	r2, [r1]
   13eb4:	e3043d43 	movw	r3, #19779	; 0x4d43
   13eb8:	e345304c 	movt	r3, #20556	; 0x504c
   13ebc:	e1520003 	cmp	r2, r3
   13ec0:	1a000007 	bne	13ee4 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   13ec4:	e591000c 	ldr	r0, [r1, #12]
   13ec8:	e8bd8010 	pop	{r4, pc}
   13ecc:	e3061d30 	movw	r1, #27952	; 0x6d30
   13ed0:	e3401001 	movt	r1, #1
   13ed4:	e3060944 	movw	r0, #26948	; 0x6944
   13ed8:	e3400001 	movt	r0, #1
   13edc:	e3a0203c 	mov	r2, #60	; 0x3c
   13ee0:	ebfff8ae 	bl	121a0 <assertion_failed>
   13ee4:	e3061d30 	movw	r1, #27952	; 0x6d30
   13ee8:	e3401001 	movt	r1, #1
   13eec:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   13ef0:	e3400001 	movt	r0, #1
   13ef4:	e3a0203d 	mov	r2, #61	; 0x3d
   13ef8:	ebfff8a8 	bl	121a0 <assertion_failed>

00013efc <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13efc:	e92d4070 	push	{r4, r5, r6, lr}
   13f00:	e1a05000 	mov	r5, r0
   13f04:	e3a00010 	mov	r0, #16
   13f08:	e1a04001 	mov	r4, r1
   13f0c:	e1a06002 	mov	r6, r2
   13f10:	ebfff313 	bl	10b64 <operator new(unsigned int)>
   13f14:	e5951000 	ldr	r1, [r5]
   13f18:	e3043d43 	movw	r3, #19779	; 0x4d43
   13f1c:	e345304c 	movt	r3, #20556	; 0x504c
   13f20:	e3510000 	cmp	r1, #0
   13f24:	e580600c 	str	r6, [r0, #12]
   13f28:	e5803000 	str	r3, [r0]
   13f2c:	0a000017 	beq	13f90 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x94>
   13f30:	e3540000 	cmp	r4, #0
   13f34:	0a00001b 	beq	13fa8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xac>
   13f38:	e5942000 	ldr	r2, [r4]
   13f3c:	e1520003 	cmp	r2, r3
   13f40:	1a00001e 	bne	13fc0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   13f44:	e1510004 	cmp	r1, r4
   13f48:	0a000022 	beq	13fd8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   13f4c:	e5943004 	ldr	r3, [r4, #4]
   13f50:	e5804008 	str	r4, [r0, #8]
   13f54:	e3530000 	cmp	r3, #0
   13f58:	e5803004 	str	r3, [r0, #4]
   13f5c:	0a000003 	beq	13f70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x74>
   13f60:	e5931000 	ldr	r1, [r3]
   13f64:	e1510002 	cmp	r1, r2
   13f68:	05830008 	streq	r0, [r3, #8]
   13f6c:	1a000001 	bne	13f78 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x7c>
   13f70:	e5840004 	str	r0, [r4, #4]
   13f74:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f78:	e3061d30 	movw	r1, #27952	; 0x6d30
   13f7c:	e3401001 	movt	r1, #1
   13f80:	e3060db0 	movw	r0, #28080	; 0x6db0
   13f84:	e3400001 	movt	r0, #1
   13f88:	e3a02060 	mov	r2, #96	; 0x60
   13f8c:	ebfff883 	bl	121a0 <assertion_failed>
   13f90:	e3061d30 	movw	r1, #27952	; 0x6d30
   13f94:	e3401001 	movt	r1, #1
   13f98:	e3060d70 	movw	r0, #28016	; 0x6d70
   13f9c:	e3400001 	movt	r0, #1
   13fa0:	e3a0204c 	mov	r2, #76	; 0x4c
   13fa4:	ebfff87d 	bl	121a0 <assertion_failed>
   13fa8:	e3061d30 	movw	r1, #27952	; 0x6d30
   13fac:	e3401001 	movt	r1, #1
   13fb0:	e3060d80 	movw	r0, #28032	; 0x6d80
   13fb4:	e3400001 	movt	r0, #1
   13fb8:	e3a0204d 	mov	r2, #77	; 0x4d
   13fbc:	ebfff877 	bl	121a0 <assertion_failed>
   13fc0:	e3061d30 	movw	r1, #27952	; 0x6d30
   13fc4:	e3401001 	movt	r1, #1
   13fc8:	e3060d8c 	movw	r0, #28044	; 0x6d8c
   13fcc:	e3400001 	movt	r0, #1
   13fd0:	e3a0204e 	mov	r2, #78	; 0x4e
   13fd4:	ebfff871 	bl	121a0 <assertion_failed>
   13fd8:	e3a03000 	mov	r3, #0
   13fdc:	e5801008 	str	r1, [r0, #8]
   13fe0:	e5803004 	str	r3, [r0, #4]
   13fe4:	e5810004 	str	r0, [r1, #4]
   13fe8:	e5850000 	str	r0, [r5]
   13fec:	e8bd8070 	pop	{r4, r5, r6, pc}

00013ff0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   13ff0:	e92d4070 	push	{r4, r5, r6, lr}
   13ff4:	e1a04001 	mov	r4, r1
   13ff8:	e1a05000 	mov	r5, r0
   13ffc:	e3a00010 	mov	r0, #16
   14000:	e1a06002 	mov	r6, r2
   14004:	ebfff2d6 	bl	10b64 <operator new(unsigned int)>
   14008:	e3540000 	cmp	r4, #0
   1400c:	e3043d43 	movw	r3, #19779	; 0x4d43
   14010:	e345304c 	movt	r3, #20556	; 0x504c
   14014:	e580600c 	str	r6, [r0, #12]
   14018:	e5803000 	str	r3, [r0]
   1401c:	0a000016 	beq	1407c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   14020:	e5952000 	ldr	r2, [r5]
   14024:	e3520000 	cmp	r2, #0
   14028:	0a00001a 	beq	14098 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   1402c:	e5942000 	ldr	r2, [r4]
   14030:	e1520003 	cmp	r2, r3
   14034:	1a00001d 	bne	140b0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   14038:	e5943008 	ldr	r3, [r4, #8]
   1403c:	e5804004 	str	r4, [r0, #4]
   14040:	e3530000 	cmp	r3, #0
   14044:	e5803008 	str	r3, [r0, #8]
   14048:	0a000003 	beq	1405c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   1404c:	e5931000 	ldr	r1, [r3]
   14050:	e1510002 	cmp	r1, r2
   14054:	05830004 	streq	r0, [r3, #4]
   14058:	1a000001 	bne	14064 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   1405c:	e5840008 	str	r0, [r4, #8]
   14060:	e8bd8070 	pop	{r4, r5, r6, pc}
   14064:	e3061d30 	movw	r1, #27952	; 0x6d30
   14068:	e3401001 	movt	r1, #1
   1406c:	e3060dfc 	movw	r0, #28156	; 0x6dfc
   14070:	e3400001 	movt	r0, #1
   14074:	e3a02085 	mov	r2, #133	; 0x85
   14078:	ebfff848 	bl	121a0 <assertion_failed>
   1407c:	e5953000 	ldr	r3, [r5]
   14080:	e3530000 	cmp	r3, #0
   14084:	1a00000f 	bne	140c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   14088:	e5803004 	str	r3, [r0, #4]
   1408c:	e5803008 	str	r3, [r0, #8]
   14090:	e5850000 	str	r0, [r5]
   14094:	e8bd8070 	pop	{r4, r5, r6, pc}
   14098:	e3061d30 	movw	r1, #27952	; 0x6d30
   1409c:	e3401001 	movt	r1, #1
   140a0:	e3060d70 	movw	r0, #28016	; 0x6d70
   140a4:	e3400001 	movt	r0, #1
   140a8:	e3a0207d 	mov	r2, #125	; 0x7d
   140ac:	ebfff83b 	bl	121a0 <assertion_failed>
   140b0:	e3061d30 	movw	r1, #27952	; 0x6d30
   140b4:	e3401001 	movt	r1, #1
   140b8:	e3060dd8 	movw	r0, #28120	; 0x6dd8
   140bc:	e3400001 	movt	r0, #1
   140c0:	e3a0207e 	mov	r2, #126	; 0x7e
   140c4:	ebfff835 	bl	121a0 <assertion_failed>
   140c8:	e3061d30 	movw	r1, #27952	; 0x6d30
   140cc:	e3401001 	movt	r1, #1
   140d0:	e3060d3c 	movw	r0, #27964	; 0x6d3c
   140d4:	e3400001 	movt	r0, #1
   140d8:	e3a02074 	mov	r2, #116	; 0x74
   140dc:	ebfff82f 	bl	121a0 <assertion_failed>

000140e0 <CPtrList::Remove(TPtrListElement*)>:
   140e0:	e3510000 	cmp	r1, #0
   140e4:	e92d4010 	push	{r4, lr}
   140e8:	0a000031 	beq	141b4 <CPtrList::Remove(TPtrListElement*)+0xd4>
   140ec:	e5912000 	ldr	r2, [r1]
   140f0:	e3043d43 	movw	r3, #19779	; 0x4d43
   140f4:	e345304c 	movt	r3, #20556	; 0x504c
   140f8:	e1520003 	cmp	r2, r3
   140fc:	1a000032 	bne	141cc <CPtrList::Remove(TPtrListElement*)+0xec>
   14100:	e5903000 	ldr	r3, [r0]
   14104:	e1510003 	cmp	r1, r3
   14108:	0a00001a 	beq	14178 <CPtrList::Remove(TPtrListElement*)+0x98>
   1410c:	e5913004 	ldr	r3, [r1, #4]
   14110:	e3530000 	cmp	r3, #0
   14114:	0a000032 	beq	141e4 <CPtrList::Remove(TPtrListElement*)+0x104>
   14118:	e5930000 	ldr	r0, [r3]
   1411c:	e1500002 	cmp	r0, r2
   14120:	1a000035 	bne	141fc <CPtrList::Remove(TPtrListElement*)+0x11c>
   14124:	e5912008 	ldr	r2, [r1, #8]
   14128:	e5832008 	str	r2, [r3, #8]
   1412c:	e5912008 	ldr	r2, [r1, #8]
   14130:	e3520000 	cmp	r2, #0
   14134:	0a000003 	beq	14148 <CPtrList::Remove(TPtrListElement*)+0x68>
   14138:	e592c000 	ldr	ip, [r2]
   1413c:	e15c0000 	cmp	ip, r0
   14140:	05823004 	streq	r3, [r2, #4]
   14144:	1a000005 	bne	14160 <CPtrList::Remove(TPtrListElement*)+0x80>
   14148:	e3a03000 	mov	r3, #0
   1414c:	e1a00001 	mov	r0, r1
   14150:	e5813000 	str	r3, [r1]
   14154:	e3a01010 	mov	r1, #16
   14158:	e8bd4010 	pop	{r4, lr}
   1415c:	eafff28e 	b	10b9c <operator delete(void*, unsigned int)>
   14160:	e3061d30 	movw	r1, #27952	; 0x6d30
   14164:	e3401001 	movt	r1, #1
   14168:	e3060e28 	movw	r0, #28200	; 0x6e28
   1416c:	e3400001 	movt	r0, #1
   14170:	e3a020a4 	mov	r2, #164	; 0xa4
   14174:	ebfff809 	bl	121a0 <assertion_failed>
   14178:	e5913008 	ldr	r3, [r1, #8]
   1417c:	e3530000 	cmp	r3, #0
   14180:	e5803000 	str	r3, [r0]
   14184:	0affffef 	beq	14148 <CPtrList::Remove(TPtrListElement*)+0x68>
   14188:	e5930000 	ldr	r0, [r3]
   1418c:	e1500002 	cmp	r0, r2
   14190:	03a02000 	moveq	r2, #0
   14194:	05832004 	streq	r2, [r3, #4]
   14198:	0affffea 	beq	14148 <CPtrList::Remove(TPtrListElement*)+0x68>
   1419c:	e3061d30 	movw	r1, #27952	; 0x6d30
   141a0:	e3401001 	movt	r1, #1
   141a4:	e3060e28 	movw	r0, #28200	; 0x6e28
   141a8:	e3400001 	movt	r0, #1
   141ac:	e3a02098 	mov	r2, #152	; 0x98
   141b0:	ebfff7fa 	bl	121a0 <assertion_failed>
   141b4:	e3061d30 	movw	r1, #27952	; 0x6d30
   141b8:	e3401001 	movt	r1, #1
   141bc:	e3060944 	movw	r0, #26948	; 0x6944
   141c0:	e3400001 	movt	r0, #1
   141c4:	e3a0208f 	mov	r2, #143	; 0x8f
   141c8:	ebfff7f4 	bl	121a0 <assertion_failed>
   141cc:	e3061d30 	movw	r1, #27952	; 0x6d30
   141d0:	e3401001 	movt	r1, #1
   141d4:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   141d8:	e3400001 	movt	r0, #1
   141dc:	e3a02090 	mov	r2, #144	; 0x90
   141e0:	ebfff7ee 	bl	121a0 <assertion_failed>
   141e4:	e3061d30 	movw	r1, #27952	; 0x6d30
   141e8:	e3401001 	movt	r1, #1
   141ec:	e3060e54 	movw	r0, #28244	; 0x6e54
   141f0:	e3400001 	movt	r0, #1
   141f4:	e3a0209e 	mov	r2, #158	; 0x9e
   141f8:	ebfff7e8 	bl	121a0 <assertion_failed>
   141fc:	e3061d30 	movw	r1, #27952	; 0x6d30
   14200:	e3401001 	movt	r1, #1
   14204:	e3060e6c 	movw	r0, #28268	; 0x6e6c
   14208:	e3400001 	movt	r0, #1
   1420c:	e3a0209f 	mov	r2, #159	; 0x9f
   14210:	ebfff7e2 	bl	121a0 <assertion_failed>

00014214 <CPtrList::Find(void*)>:
   14214:	e5900000 	ldr	r0, [r0]
   14218:	e3500000 	cmp	r0, #0
   1421c:	0a000018 	beq	14284 <CPtrList::Find(void*)+0x70>
   14220:	e5902000 	ldr	r2, [r0]
   14224:	e3043d43 	movw	r3, #19779	; 0x4d43
   14228:	e345304c 	movt	r3, #20556	; 0x504c
   1422c:	e1520003 	cmp	r2, r3
   14230:	1a00000c 	bne	14268 <CPtrList::Find(void*)+0x54>
   14234:	e590300c 	ldr	r3, [r0, #12]
   14238:	e1510003 	cmp	r1, r3
   1423c:	1a000003 	bne	14250 <CPtrList::Find(void*)+0x3c>
   14240:	ea00000f 	b	14284 <CPtrList::Find(void*)+0x70>
   14244:	e590300c 	ldr	r3, [r0, #12]
   14248:	e1530001 	cmp	r3, r1
   1424c:	0a00000c 	beq	14284 <CPtrList::Find(void*)+0x70>
   14250:	e5900008 	ldr	r0, [r0, #8]
   14254:	e3500000 	cmp	r0, #0
   14258:	0a000009 	beq	14284 <CPtrList::Find(void*)+0x70>
   1425c:	e5903000 	ldr	r3, [r0]
   14260:	e1530002 	cmp	r3, r2
   14264:	0afffff6 	beq	14244 <CPtrList::Find(void*)+0x30>
   14268:	e3061d30 	movw	r1, #27952	; 0x6d30
   1426c:	e3401001 	movt	r1, #1
   14270:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   14274:	e3400001 	movt	r0, #1
   14278:	e92d4010 	push	{r4, lr}
   1427c:	e3a020b3 	mov	r2, #179	; 0xb3
   14280:	ebfff7c6 	bl	121a0 <assertion_failed>
   14284:	e12fff1e 	bx	lr

00014288 <CPageAllocator::CPageAllocator()>:
   14288:	e3a02000 	mov	r2, #0
   1428c:	e3a01001 	mov	r1, #1
   14290:	e580100c 	str	r1, [r0, #12]
   14294:	e5802000 	str	r2, [r0]
   14298:	e5802004 	str	r2, [r0, #4]
   1429c:	e5802008 	str	r2, [r0, #8]
   142a0:	e12fff1e 	bx	lr

000142a4 <CPageAllocator::~CPageAllocator()>:
   142a4:	e12fff1e 	bx	lr

000142a8 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   142a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   142ac:	e28db000 	add	fp, sp, #0
   142b0:	e24dd014 	sub	sp, sp, #20
   142b4:	e50b0008 	str	r0, [fp, #-8]
   142b8:	e50b100c 	str	r1, [fp, #-12]
   142bc:	e50b2010 	str	r2, [fp, #-16]
   142c0:	e51b300c 	ldr	r3, [fp, #-12]
   142c4:	e2833eff 	add	r3, r3, #4080	; 0xff0
   142c8:	e283300f 	add	r3, r3, #15
   142cc:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   142d0:	e3c3300f 	bic	r3, r3, #15
   142d4:	e1a02003 	mov	r2, r3
   142d8:	e51b3008 	ldr	r3, [fp, #-8]
   142dc:	e5832000 	str	r2, [r3]
   142e0:	e51b200c 	ldr	r2, [fp, #-12]
   142e4:	e51b3010 	ldr	r3, [fp, #-16]
   142e8:	e0823003 	add	r3, r2, r3
   142ec:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   142f0:	e3c3300f 	bic	r3, r3, #15
   142f4:	e1a02003 	mov	r2, r3
   142f8:	e51b3008 	ldr	r3, [fp, #-8]
   142fc:	e5832004 	str	r2, [r3, #4]
   14300:	e320f000 	nop	{0}
   14304:	e28bd000 	add	sp, fp, #0
   14308:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1430c:	e12fff1e 	bx	lr

00014310 <CPageAllocator::GetFreeSpace() const>:
   14310:	e8900005 	ldm	r0, {r0, r2}
   14314:	e0420000 	sub	r0, r2, r0
   14318:	e12fff1e 	bx	lr

0001431c <CPageAllocator::Allocate()>:
   1431c:	e5903000 	ldr	r3, [r0]
   14320:	e92d4070 	push	{r4, r5, r6, lr}
   14324:	e3530000 	cmp	r3, #0
   14328:	0a000027 	beq	143cc <CPageAllocator::Allocate()+0xb0>
   1432c:	e1a05000 	mov	r5, r0
   14330:	e590000c 	ldr	r0, [r0, #12]
   14334:	e3500000 	cmp	r0, #0
   14338:	1a000013 	bne	1438c <CPageAllocator::Allocate()+0x70>
   1433c:	e5954008 	ldr	r4, [r5, #8]
   14340:	e3540000 	cmp	r4, #0
   14344:	0a000014 	beq	1439c <CPageAllocator::Allocate()+0x80>
   14348:	e5942000 	ldr	r2, [r4]
   1434c:	e3043d43 	movw	r3, #19779	; 0x4d43
   14350:	e3453047 	movt	r3, #20551	; 0x5047
   14354:	e1520003 	cmp	r2, r3
   14358:	1a000020 	bne	143e0 <CPageAllocator::Allocate()+0xc4>
   1435c:	e5942004 	ldr	r2, [r4, #4]
   14360:	e3a03000 	mov	r3, #0
   14364:	e5852008 	str	r2, [r5, #8]
   14368:	e5843000 	str	r3, [r4]
   1436c:	e595300c 	ldr	r3, [r5, #12]
   14370:	e3530000 	cmp	r3, #0
   14374:	1a000001 	bne	14380 <CPageAllocator::Allocate()+0x64>
   14378:	e1a00004 	mov	r0, r4
   1437c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14380:	ebfff5df 	bl	11b04 <LeaveCritical>
   14384:	e1a00004 	mov	r0, r4
   14388:	e8bd8070 	pop	{r4, r5, r6, pc}
   1438c:	ebfff5af 	bl	11a50 <EnterCritical>
   14390:	e5954008 	ldr	r4, [r5, #8]
   14394:	e3540000 	cmp	r4, #0
   14398:	1affffea 	bne	14348 <CPageAllocator::Allocate()+0x2c>
   1439c:	e5954000 	ldr	r4, [r5]
   143a0:	e5952004 	ldr	r2, [r5, #4]
   143a4:	e2843a01 	add	r3, r4, #4096	; 0x1000
   143a8:	e1530002 	cmp	r3, r2
   143ac:	e5853000 	str	r3, [r5]
   143b0:	9affffed 	bls	1436c <CPageAllocator::Allocate()+0x50>
   143b4:	e595400c 	ldr	r4, [r5, #12]
   143b8:	e3540000 	cmp	r4, #0
   143bc:	0affffed 	beq	14378 <CPageAllocator::Allocate()+0x5c>
   143c0:	ebfff5cf 	bl	11b04 <LeaveCritical>
   143c4:	e3a00000 	mov	r0, #0
   143c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   143cc:	e3061e98 	movw	r1, #28312	; 0x6e98
   143d0:	e3401001 	movt	r1, #1
   143d4:	e2810014 	add	r0, r1, #20
   143d8:	e3a02036 	mov	r2, #54	; 0x36
   143dc:	ebfff76f 	bl	121a0 <assertion_failed>
   143e0:	e3061e98 	movw	r1, #28312	; 0x6e98
   143e4:	e3401001 	movt	r1, #1
   143e8:	e2810024 	add	r0, r1, #36	; 0x24
   143ec:	e3a02044 	mov	r2, #68	; 0x44
   143f0:	ebfff76a 	bl	121a0 <assertion_failed>

000143f4 <CPageAllocator::Free(void*)>:
   143f4:	e92d4070 	push	{r4, r5, r6, lr}
   143f8:	e2515000 	subs	r5, r1, #0
   143fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   14400:	e590300c 	ldr	r3, [r0, #12]
   14404:	e3530000 	cmp	r3, #0
   14408:	1a000006 	bne	14428 <CPageAllocator::Free(void*)+0x34>
   1440c:	e5902008 	ldr	r2, [r0, #8]
   14410:	e3043d43 	movw	r3, #19779	; 0x4d43
   14414:	e3453047 	movt	r3, #20551	; 0x5047
   14418:	e5853000 	str	r3, [r5]
   1441c:	e5852004 	str	r2, [r5, #4]
   14420:	e5805008 	str	r5, [r0, #8]
   14424:	e8bd8070 	pop	{r4, r5, r6, pc}
   14428:	e1a04000 	mov	r4, r0
   1442c:	e1a00003 	mov	r0, r3
   14430:	ebfff586 	bl	11a50 <EnterCritical>
   14434:	e3043d43 	movw	r3, #19779	; 0x4d43
   14438:	e3453047 	movt	r3, #20551	; 0x5047
   1443c:	e594100c 	ldr	r1, [r4, #12]
   14440:	e5942008 	ldr	r2, [r4, #8]
   14444:	e3510000 	cmp	r1, #0
   14448:	e5853000 	str	r3, [r5]
   1444c:	e5852004 	str	r2, [r5, #4]
   14450:	e5845008 	str	r5, [r4, #8]
   14454:	08bd8070 	popeq	{r4, r5, r6, pc}
   14458:	e8bd4070 	pop	{r4, r5, r6, lr}
   1445c:	eafff5a8 	b	11b04 <LeaveCritical>

00014460 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   14460:	e5801000 	str	r1, [r0]
   14464:	e5c02004 	strb	r2, [r0, #4]
   14468:	e12fff1e 	bx	lr

0001446c <CBcmMailBox::~CBcmMailBox()>:
   1446c:	e12fff1e 	bx	lr

00014470 <CBcmMailBox::WriteRead(unsigned int)>:
   14470:	e5d03004 	ldrb	r3, [r0, #4]
   14474:	e92d4070 	push	{r4, r5, r6, lr}
   14478:	e1a05000 	mov	r5, r0
   1447c:	e3530000 	cmp	r3, #0
   14480:	e24dd008 	sub	sp, sp, #8
   14484:	e1a06001 	mov	r6, r1
   14488:	1a000004 	bne	144a0 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   1448c:	e30732f8 	movw	r3, #29432	; 0x72f8
   14490:	e3403001 	movt	r3, #1
   14494:	e5930000 	ldr	r0, [r3]
   14498:	e3500000 	cmp	r0, #0
   1449c:	1a00002e 	bne	1455c <CBcmMailBox::WriteRead(unsigned int)+0xec>
   144a0:	e3a04a0b 	mov	r4, #45056	; 0xb000
   144a4:	e3434f00 	movt	r4, #16128	; 0x3f00
   144a8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   144ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
   144b0:	1a000005 	bne	144cc <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   144b4:	e3a00014 	mov	r0, #20
   144b8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   144bc:	ebffedfd 	bl	fcb8 <CTimer::SimpleMsDelay(unsigned int)>
   144c0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   144c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   144c8:	0afffff9 	beq	144b4 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   144cc:	e3a01a0b 	mov	r1, #45056	; 0xb000
   144d0:	e3431f00 	movt	r1, #16128	; 0x3f00
   144d4:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
   144d8:	e3530000 	cmp	r3, #0
   144dc:	bafffffc 	blt	144d4 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   144e0:	e316000f 	tst	r6, #15
   144e4:	1a00001e 	bne	14564 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   144e8:	e5953000 	ldr	r3, [r5]
   144ec:	e3a02a0b 	mov	r2, #45056	; 0xb000
   144f0:	e3432f00 	movt	r2, #16128	; 0x3f00
   144f4:	e1866003 	orr	r6, r6, r3
   144f8:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
   144fc:	e5950000 	ldr	r0, [r5]
   14500:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   14504:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14508:	1afffffc 	bne	14500 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   1450c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   14510:	e203100f 	and	r1, r3, #15
   14514:	e1510000 	cmp	r1, r0
   14518:	1afffff8 	bne	14500 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   1451c:	e5d52004 	ldrb	r2, [r5, #4]
   14520:	e3c3000f 	bic	r0, r3, #15
   14524:	e3520000 	cmp	r2, #0
   14528:	1a000004 	bne	14540 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   1452c:	e30732f8 	movw	r3, #29432	; 0x72f8
   14530:	e3403001 	movt	r3, #1
   14534:	e5933000 	ldr	r3, [r3]
   14538:	e3530000 	cmp	r3, #0
   1453c:	1a000001 	bne	14548 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   14540:	e28dd008 	add	sp, sp, #8
   14544:	e8bd8070 	pop	{r4, r5, r6, pc}
   14548:	e58d0004 	str	r0, [sp, #4]
   1454c:	ebfff56c 	bl	11b04 <LeaveCritical>
   14550:	e59d0004 	ldr	r0, [sp, #4]
   14554:	e28dd008 	add	sp, sp, #8
   14558:	e8bd8070 	pop	{r4, r5, r6, pc}
   1455c:	ebfff53b 	bl	11a50 <EnterCritical>
   14560:	eaffffce 	b	144a0 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   14564:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   14568:	e3401001 	movt	r1, #1
   1456c:	e3060ef0 	movw	r0, #28400	; 0x6ef0
   14570:	e3400001 	movt	r0, #1
   14574:	e3a02062 	mov	r2, #98	; 0x62
   14578:	ebfff708 	bl	121a0 <assertion_failed>

0001457c <CBcmMailBox::Flush()>:
   1457c:	e92d4010 	push	{r4, lr}
   14580:	e3a04a0b 	mov	r4, #45056	; 0xb000
   14584:	e3434f00 	movt	r4, #16128	; 0x3f00
   14588:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1458c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14590:	18bd8010 	popne	{r4, pc}
   14594:	e3a00014 	mov	r0, #20
   14598:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1459c:	ebffedc5 	bl	fcb8 <CTimer::SimpleMsDelay(unsigned int)>
   145a0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   145a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   145a8:	0afffff9 	beq	14594 <CBcmMailBox::Flush()+0x18>
   145ac:	e8bd8010 	pop	{r4, pc}

000145b0 <CBcmMailBox::Read()>:
   145b0:	e5901000 	ldr	r1, [r0]
   145b4:	e3a02a0b 	mov	r2, #45056	; 0xb000
   145b8:	e3432f00 	movt	r2, #16128	; 0x3f00
   145bc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   145c0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   145c4:	1afffffc 	bne	145bc <CBcmMailBox::Read()+0xc>
   145c8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   145cc:	e200300f 	and	r3, r0, #15
   145d0:	e1510003 	cmp	r1, r3
   145d4:	1afffff8 	bne	145bc <CBcmMailBox::Read()+0xc>
   145d8:	e3c0000f 	bic	r0, r0, #15
   145dc:	e12fff1e 	bx	lr

000145e0 <CBcmMailBox::Write(unsigned int)>:
   145e0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   145e4:	e3432f00 	movt	r2, #16128	; 0x3f00
   145e8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   145ec:	e3530000 	cmp	r3, #0
   145f0:	bafffffc 	blt	145e8 <CBcmMailBox::Write(unsigned int)+0x8>
   145f4:	e311000f 	tst	r1, #15
   145f8:	1a000003 	bne	1460c <CBcmMailBox::Write(unsigned int)+0x2c>
   145fc:	e5903000 	ldr	r3, [r0]
   14600:	e1811003 	orr	r1, r1, r3
   14604:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   14608:	e12fff1e 	bx	lr
   1460c:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   14610:	e3401001 	movt	r1, #1
   14614:	e3060ef0 	movw	r0, #28400	; 0x6ef0
   14618:	e3400001 	movt	r0, #1
   1461c:	e92d4010 	push	{r4, lr}
   14620:	e3a02062 	mov	r2, #98	; 0x62
   14624:	ebfff6dd 	bl	121a0 <assertion_failed>

00014628 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   14628:	e30732f8 	movw	r3, #29432	; 0x72f8
   1462c:	e3403001 	movt	r3, #1
   14630:	e3a02000 	mov	r2, #0
   14634:	e5832000 	str	r2, [r3]
   14638:	e12fff1e 	bx	lr

0001463c <__aeabi_uldivmod>:
   1463c:	b953      	cbnz	r3, 14654 <__aeabi_uldivmod+0x18>
   1463e:	b94a      	cbnz	r2, 14654 <__aeabi_uldivmod+0x18>
   14640:	2900      	cmp	r1, #0
   14642:	bf08      	it	eq
   14644:	2800      	cmpeq	r0, #0
   14646:	bf1c      	itt	ne
   14648:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1464c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14650:	f000 b9be 	b.w	149d0 <__aeabi_idiv0>
   14654:	f1ad 0c08 	sub.w	ip, sp, #8
   14658:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1465c:	f000 f806 	bl	1466c <__udivmoddi4>
   14660:	f8dd e004 	ldr.w	lr, [sp, #4]
   14664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14668:	b004      	add	sp, #16
   1466a:	4770      	bx	lr

0001466c <__udivmoddi4>:
   1466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14670:	4680      	mov	r8, r0
   14672:	4689      	mov	r9, r1
   14674:	b083      	sub	sp, #12
   14676:	2b00      	cmp	r3, #0
   14678:	d14c      	bne.n	14714 <__udivmoddi4+0xa8>
   1467a:	4694      	mov	ip, r2
   1467c:	fab2 f282 	clz	r2, r2
   14680:	458c      	cmp	ip, r1
   14682:	d96b      	bls.n	1475c <__udivmoddi4+0xf0>
   14684:	468e      	mov	lr, r1
   14686:	b152      	cbz	r2, 1469e <__udivmoddi4+0x32>
   14688:	f1c2 0e20 	rsb	lr, r2, #32
   1468c:	fa01 f302 	lsl.w	r3, r1, r2
   14690:	fa0c fc02 	lsl.w	ip, ip, r2
   14694:	fa20 fe0e 	lsr.w	lr, r0, lr
   14698:	ea4e 0e03 	orr.w	lr, lr, r3
   1469c:	4090      	lsls	r0, r2
   1469e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   146a2:	fa1f f58c 	uxth.w	r5, ip
   146a6:	0c03      	lsrs	r3, r0, #16
   146a8:	fbbe f1f7 	udiv	r1, lr, r7
   146ac:	fb07 ee11 	mls	lr, r7, r1, lr
   146b0:	fb01 f405 	mul.w	r4, r1, r5
   146b4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   146b8:	429c      	cmp	r4, r3
   146ba:	d911      	bls.n	146e0 <__udivmoddi4+0x74>
   146bc:	eb1c 0303 	adds.w	r3, ip, r3
   146c0:	f04f 0601 	mov.w	r6, #1
   146c4:	bf28      	it	cs
   146c6:	2600      	movcs	r6, #0
   146c8:	429c      	cmp	r4, r3
   146ca:	f006 0601 	and.w	r6, r6, #1
   146ce:	bf98      	it	ls
   146d0:	2600      	movls	r6, #0
   146d2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   146d6:	46b6      	mov	lr, r6
   146d8:	2e00      	cmp	r6, #0
   146da:	f040 816d 	bne.w	149b8 <__udivmoddi4+0x34c>
   146de:	4641      	mov	r1, r8
   146e0:	1b1b      	subs	r3, r3, r4
   146e2:	b280      	uxth	r0, r0
   146e4:	fbb3 f4f7 	udiv	r4, r3, r7
   146e8:	fb07 3314 	mls	r3, r7, r4, r3
   146ec:	fb04 f505 	mul.w	r5, r4, r5
   146f0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   146f4:	4285      	cmp	r5, r0
   146f6:	f200 80ef 	bhi.w	148d8 <__udivmoddi4+0x26c>
   146fa:	1b43      	subs	r3, r0, r5
   146fc:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
   14700:	2100      	movs	r1, #0
   14702:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14704:	b11c      	cbz	r4, 1470e <__udivmoddi4+0xa2>
   14706:	40d3      	lsrs	r3, r2
   14708:	2200      	movs	r2, #0
   1470a:	6023      	str	r3, [r4, #0]
   1470c:	6062      	str	r2, [r4, #4]
   1470e:	b003      	add	sp, #12
   14710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14714:	428b      	cmp	r3, r1
   14716:	d907      	bls.n	14728 <__udivmoddi4+0xbc>
   14718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1471a:	b113      	cbz	r3, 14722 <__udivmoddi4+0xb6>
   1471c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1471e:	e9c3 8900 	strd	r8, r9, [r3]
   14722:	2100      	movs	r1, #0
   14724:	4608      	mov	r0, r1
   14726:	e7f2      	b.n	1470e <__udivmoddi4+0xa2>
   14728:	fab3 f183 	clz	r1, r3
   1472c:	2900      	cmp	r1, #0
   1472e:	d160      	bne.n	147f2 <__udivmoddi4+0x186>
   14730:	ec49 8b30 	vmov	d16, r8, r9
   14734:	4608      	mov	r0, r1
   14736:	454b      	cmp	r3, r9
   14738:	bf28      	it	cs
   1473a:	4542      	cmpcs	r2, r8
   1473c:	d808      	bhi.n	14750 <__udivmoddi4+0xe4>
   1473e:	ebb8 0002 	subs.w	r0, r8, r2
   14742:	eb69 0203 	sbc.w	r2, r9, r3
   14746:	e9cd 0200 	strd	r0, r2, [sp]
   1474a:	2001      	movs	r0, #1
   1474c:	eddd 0b00 	vldr	d16, [sp]
   14750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14752:	2b00      	cmp	r3, #0
   14754:	d0db      	beq.n	1470e <__udivmoddi4+0xa2>
   14756:	edc3 0b00 	vstr	d16, [r3]
   1475a:	e7d8      	b.n	1470e <__udivmoddi4+0xa2>
   1475c:	2a00      	cmp	r2, #0
   1475e:	f040 80cc 	bne.w	148fa <__udivmoddi4+0x28e>
   14762:	eba1 030c 	sub.w	r3, r1, ip
   14766:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1476a:	fa1f fe8c 	uxth.w	lr, ip
   1476e:	2101      	movs	r1, #1
   14770:	fbb3 f5f7 	udiv	r5, r3, r7
   14774:	fb07 3415 	mls	r4, r7, r5, r3
   14778:	0c03      	lsrs	r3, r0, #16
   1477a:	fb0e f805 	mul.w	r8, lr, r5
   1477e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   14782:	4598      	cmp	r8, r3
   14784:	d912      	bls.n	147ac <__udivmoddi4+0x140>
   14786:	eb1c 0303 	adds.w	r3, ip, r3
   1478a:	f04f 0401 	mov.w	r4, #1
   1478e:	bf38      	it	cc
   14790:	2400      	movcc	r4, #0
   14792:	4598      	cmp	r8, r3
   14794:	f084 0401 	eor.w	r4, r4, #1
   14798:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1479c:	f004 0401 	and.w	r4, r4, #1
   147a0:	bf98      	it	ls
   147a2:	2400      	movls	r4, #0
   147a4:	2c00      	cmp	r4, #0
   147a6:	f040 8110 	bne.w	149ca <__udivmoddi4+0x35e>
   147aa:	464d      	mov	r5, r9
   147ac:	eba3 0308 	sub.w	r3, r3, r8
   147b0:	b280      	uxth	r0, r0
   147b2:	fbb3 f4f7 	udiv	r4, r3, r7
   147b6:	fb07 3314 	mls	r3, r7, r4, r3
   147ba:	fb0e fe04 	mul.w	lr, lr, r4
   147be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   147c2:	4586      	cmp	lr, r0
   147c4:	d910      	bls.n	147e8 <__udivmoddi4+0x17c>
   147c6:	eb1c 0000 	adds.w	r0, ip, r0
   147ca:	f04f 0301 	mov.w	r3, #1
   147ce:	bf28      	it	cs
   147d0:	2300      	movcs	r3, #0
   147d2:	4586      	cmp	lr, r0
   147d4:	f003 0301 	and.w	r3, r3, #1
   147d8:	f104 37ff 	add.w	r7, r4, #4294967295	; 0xffffffff
   147dc:	bf98      	it	ls
   147de:	2300      	movls	r3, #0
   147e0:	2b00      	cmp	r3, #0
   147e2:	f040 80ef 	bne.w	149c4 <__udivmoddi4+0x358>
   147e6:	463c      	mov	r4, r7
   147e8:	eba0 030e 	sub.w	r3, r0, lr
   147ec:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   147f0:	e787      	b.n	14702 <__udivmoddi4+0x96>
   147f2:	f1c1 0720 	rsb	r7, r1, #32
   147f6:	408b      	lsls	r3, r1
   147f8:	fa02 fc01 	lsl.w	ip, r2, r1
   147fc:	40fa      	lsrs	r2, r7
   147fe:	431a      	orrs	r2, r3
   14800:	fa09 fe01 	lsl.w	lr, r9, r1
   14804:	fa29 f007 	lsr.w	r0, r9, r7
   14808:	ea4f 4912 	mov.w	r9, r2, lsr #16
   1480c:	fa28 f507 	lsr.w	r5, r8, r7
   14810:	fa08 f401 	lsl.w	r4, r8, r1
   14814:	ea4e 0305 	orr.w	r3, lr, r5
   14818:	fa1f fe82 	uxth.w	lr, r2
   1481c:	fbb0 f8f9 	udiv	r8, r0, r9
   14820:	0c1d      	lsrs	r5, r3, #16
   14822:	fb09 0018 	mls	r0, r9, r8, r0
   14826:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   1482a:	fb08 f00e 	mul.w	r0, r8, lr
   1482e:	42a8      	cmp	r0, r5
   14830:	d911      	bls.n	14856 <__udivmoddi4+0x1ea>
   14832:	1955      	adds	r5, r2, r5
   14834:	f04f 0601 	mov.w	r6, #1
   14838:	bf38      	it	cc
   1483a:	2600      	movcc	r6, #0
   1483c:	42a8      	cmp	r0, r5
   1483e:	f086 0a01 	eor.w	sl, r6, #1
   14842:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
   14846:	f00a 0601 	and.w	r6, sl, #1
   1484a:	bf98      	it	ls
   1484c:	2600      	movls	r6, #0
   1484e:	2e00      	cmp	r6, #0
   14850:	f040 80a8 	bne.w	149a4 <__udivmoddi4+0x338>
   14854:	46d8      	mov	r8, fp
   14856:	1a2d      	subs	r5, r5, r0
   14858:	b29b      	uxth	r3, r3
   1485a:	fbb5 f0f9 	udiv	r0, r5, r9
   1485e:	fb09 5510 	mls	r5, r9, r0, r5
   14862:	fb00 fe0e 	mul.w	lr, r0, lr
   14866:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1486a:	459e      	cmp	lr, r3
   1486c:	d90f      	bls.n	1488e <__udivmoddi4+0x222>
   1486e:	18d3      	adds	r3, r2, r3
   14870:	f04f 0501 	mov.w	r5, #1
   14874:	bf28      	it	cs
   14876:	2500      	movcs	r5, #0
   14878:	459e      	cmp	lr, r3
   1487a:	f005 0501 	and.w	r5, r5, #1
   1487e:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
   14882:	bf98      	it	ls
   14884:	2500      	movls	r5, #0
   14886:	2d00      	cmp	r5, #0
   14888:	f040 8093 	bne.w	149b2 <__udivmoddi4+0x346>
   1488c:	4648      	mov	r0, r9
   1488e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   14892:	eba3 030e 	sub.w	r3, r3, lr
   14896:	fba0 850c 	umull	r8, r5, r0, ip
   1489a:	46c6      	mov	lr, r8
   1489c:	46a9      	mov	r9, r5
   1489e:	42ab      	cmp	r3, r5
   148a0:	d376      	bcc.n	14990 <__udivmoddi4+0x324>
   148a2:	f04f 0601 	mov.w	r6, #1
   148a6:	bf18      	it	ne
   148a8:	2600      	movne	r6, #0
   148aa:	4544      	cmp	r4, r8
   148ac:	f006 0601 	and.w	r6, r6, #1
   148b0:	bf28      	it	cs
   148b2:	2600      	movcs	r6, #0
   148b4:	2e00      	cmp	r6, #0
   148b6:	d16b      	bne.n	14990 <__udivmoddi4+0x324>
   148b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   148ba:	b15a      	cbz	r2, 148d4 <__udivmoddi4+0x268>
   148bc:	ebb4 020e 	subs.w	r2, r4, lr
   148c0:	eb63 0309 	sbc.w	r3, r3, r9
   148c4:	fa03 f707 	lsl.w	r7, r3, r7
   148c8:	40ca      	lsrs	r2, r1
   148ca:	4317      	orrs	r7, r2
   148cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   148ce:	40cb      	lsrs	r3, r1
   148d0:	e9c2 7300 	strd	r7, r3, [r2]
   148d4:	2100      	movs	r1, #0
   148d6:	e71a      	b.n	1470e <__udivmoddi4+0xa2>
   148d8:	eb1c 0000 	adds.w	r0, ip, r0
   148dc:	f04f 0301 	mov.w	r3, #1
   148e0:	bf28      	it	cs
   148e2:	2300      	movcs	r3, #0
   148e4:	4285      	cmp	r5, r0
   148e6:	f003 0301 	and.w	r3, r3, #1
   148ea:	f104 37ff 	add.w	r7, r4, #4294967295	; 0xffffffff
   148ee:	bf98      	it	ls
   148f0:	2300      	movls	r3, #0
   148f2:	2b00      	cmp	r3, #0
   148f4:	d163      	bne.n	149be <__udivmoddi4+0x352>
   148f6:	463c      	mov	r4, r7
   148f8:	e6ff      	b.n	146fa <__udivmoddi4+0x8e>
   148fa:	fa0c fc02 	lsl.w	ip, ip, r2
   148fe:	f1c2 0120 	rsb	r1, r2, #32
   14902:	fa09 f302 	lsl.w	r3, r9, r2
   14906:	fa29 f501 	lsr.w	r5, r9, r1
   1490a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1490e:	fa28 f101 	lsr.w	r1, r8, r1
   14912:	fa1f fe8c 	uxth.w	lr, ip
   14916:	430b      	orrs	r3, r1
   14918:	4090      	lsls	r0, r2
   1491a:	fbb5 f4f7 	udiv	r4, r5, r7
   1491e:	0c19      	lsrs	r1, r3, #16
   14920:	fb07 5514 	mls	r5, r7, r4, r5
   14924:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   14928:	fb04 f50e 	mul.w	r5, r4, lr
   1492c:	428d      	cmp	r5, r1
   1492e:	d910      	bls.n	14952 <__udivmoddi4+0x2e6>
   14930:	eb1c 0101 	adds.w	r1, ip, r1
   14934:	f04f 0601 	mov.w	r6, #1
   14938:	bf38      	it	cc
   1493a:	2600      	movcc	r6, #0
   1493c:	428d      	cmp	r5, r1
   1493e:	f086 0801 	eor.w	r8, r6, #1
   14942:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   14946:	f008 0601 	and.w	r6, r8, #1
   1494a:	bf98      	it	ls
   1494c:	2600      	movls	r6, #0
   1494e:	bb36      	cbnz	r6, 1499e <__udivmoddi4+0x332>
   14950:	464c      	mov	r4, r9
   14952:	1b49      	subs	r1, r1, r5
   14954:	b29b      	uxth	r3, r3
   14956:	fbb1 f5f7 	udiv	r5, r1, r7
   1495a:	fb07 1115 	mls	r1, r7, r5, r1
   1495e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   14962:	fb05 f10e 	mul.w	r1, r5, lr
   14966:	4299      	cmp	r1, r3
   14968:	d90e      	bls.n	14988 <__udivmoddi4+0x31c>
   1496a:	eb1c 0303 	adds.w	r3, ip, r3
   1496e:	f04f 0601 	mov.w	r6, #1
   14972:	bf28      	it	cs
   14974:	2600      	movcs	r6, #0
   14976:	4299      	cmp	r1, r3
   14978:	f006 0601 	and.w	r6, r6, #1
   1497c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   14980:	bf98      	it	ls
   14982:	2600      	movls	r6, #0
   14984:	b996      	cbnz	r6, 149ac <__udivmoddi4+0x340>
   14986:	464d      	mov	r5, r9
   14988:	1a5b      	subs	r3, r3, r1
   1498a:	ea45 4104 	orr.w	r1, r5, r4, lsl #16
   1498e:	e6ef      	b.n	14770 <__udivmoddi4+0x104>
   14990:	ebb8 0e0c 	subs.w	lr, r8, ip
   14994:	eb65 0202 	sbc.w	r2, r5, r2
   14998:	3801      	subs	r0, #1
   1499a:	4691      	mov	r9, r2
   1499c:	e78c      	b.n	148b8 <__udivmoddi4+0x24c>
   1499e:	3c02      	subs	r4, #2
   149a0:	4461      	add	r1, ip
   149a2:	e7d6      	b.n	14952 <__udivmoddi4+0x2e6>
   149a4:	f1a8 0802 	sub.w	r8, r8, #2
   149a8:	4415      	add	r5, r2
   149aa:	e754      	b.n	14856 <__udivmoddi4+0x1ea>
   149ac:	3d02      	subs	r5, #2
   149ae:	4463      	add	r3, ip
   149b0:	e7ea      	b.n	14988 <__udivmoddi4+0x31c>
   149b2:	3802      	subs	r0, #2
   149b4:	4413      	add	r3, r2
   149b6:	e76a      	b.n	1488e <__udivmoddi4+0x222>
   149b8:	3902      	subs	r1, #2
   149ba:	4463      	add	r3, ip
   149bc:	e690      	b.n	146e0 <__udivmoddi4+0x74>
   149be:	4460      	add	r0, ip
   149c0:	3c02      	subs	r4, #2
   149c2:	e69a      	b.n	146fa <__udivmoddi4+0x8e>
   149c4:	4460      	add	r0, ip
   149c6:	3c02      	subs	r4, #2
   149c8:	e70e      	b.n	147e8 <__udivmoddi4+0x17c>
   149ca:	3d02      	subs	r5, #2
   149cc:	4463      	add	r3, ip
   149ce:	e6ed      	b.n	147ac <__udivmoddi4+0x140>

000149d0 <__aeabi_idiv0>:
   149d0:	4770      	bx	lr
   149d2:	bf00      	nop
